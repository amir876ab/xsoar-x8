contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.9.0
    itemVersion: 2.1.11
    packID: PAN-OS
    packName: PAN-OS by Palo Alto Networks
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
description: |-
  This playbook should be run as a job. It is used to periodically remove the specified tag from domain indicators. It should be used in conjunction with the "PAN-OS - Job - Add Malicious Domains To Sinkhole" playbook, to stop domains from being sinkholed after a certain amount of time.
  The idea is that traffic to malicious domains will not be redirected to a sinkhole address forever, as malicious domains tend to lose their malicious properties (become inactive, get taken down, or the malware using them is no longer used or maintained).
id: PAN-OS - Job - Remove Malicious Domains From Sinkhole
inputs:
- description: |-
    The tag that will be removed from the tagged domain indicators.
    This should be the tag that was used to export the domains to the EDL using the Generic Export Indicators Service integration, which is used by the firewall's sinkhole configuration.
  key: SinkholeTag
  playbookInputQuery: null
  required: true
  value:
    simple: to_sinkhole
- description: |-
    The "decay period" - how many days should pass since the domains were tagged, before removing the sinkhole tag from those domains.
    The value should be a number of days. For example: 14.

    Technical details: When specifying the decay period, the playbook will take into account multiple tagging/untagging activities in the domain indicator in Cortex XSOAR. This means that if you specified a value of "14" and a domain was tagged 15 days ago, but also untagged and then tagged again 10 days ago - it will not be untagged by the playbook, as tagging activity happened 10 days ago. It will, however, be untagged when the playbook runs 5 days afterwards, since at that time the domain will have reached the decay period again.
  key: DaysTaggedBeforeRemoval
  playbookInputQuery: null
  required: true
  value:
    simple: "14"
name: PAN-OS - Job - Remove Malicious Domains From Sinkhole
outputs: []
quiet: true
starttaskid: "0"
system: true
tags:
- TIM
- Sinkhole
- PAN-OS
tasks:
  "0":
    continueonerrortype: ""
    id: "0"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "1"
      - "3"
      - "6"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: 59964f1b-d04b-4ede-8fbe-3c5d81afe4b1
      iscommand: false
      name: ""
      version: -1
    taskid: 59964f1b-d04b-4ede-8fbe-3c5d81afe4b1
    timertriggers: []
    type: start
    view: |-
      {
        "position": {
          "x": 450,
          "y": 50
        }
      }
  "1":
    continueonerrortype: ""
    id: "1"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "13"
    note: false
    quietmode: 0
    scriptarguments:
      extend-context:
        simple: indicators=
      query:
        complex:
          root: inputs.SinkholeTag
          transformers:
          - args:
              prefix:
                value:
                  simple: tags:"
              suffix:
                value:
                  simple: '" and type:Domain'
            operator: concat
    separatecontext: false
    skipunavailable: false
    task:
      brand: Builtin
      description: Gets all the domains that have the sinkhole tag.
      id: 2bc6fde6-29d1-40dc-82ed-e11d5dfe55ef
      iscommand: true
      name: Get domains with sinkhole tag
      script: Builtin|||findIndicators
      type: regular
      version: -1
    taskid: 2bc6fde6-29d1-40dc-82ed-e11d5dfe55ef
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 450,
          "y": 200
        }
      }
  "3":
    continueonerrortype: ""
    id: "3"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "13"
    note: false
    quietmode: 0
    scriptarguments:
      contextKey:
        simple: MinimumTime
      dateFormat:
        simple: ISO
      daysAgo:
        complex:
          root: inputs.DaysTaggedBeforeRemoval
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Gets the oldest date and time according to the decay period configured
        in the playbook input. Domains that have not been tagged since the decay time
        will be untagged.
      id: 7c1c7038-aaa1-4b07-8677-4921ab9077f5
      iscommand: false
      name: Get the oldest decay date
      script: GetTime
      type: regular
      version: -1
    taskid: 7c1c7038-aaa1-4b07-8677-4921ab9077f5
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": -10,
          "y": 200
        }
      }
  "4":
    continueonerrortype: ""
    id: "4"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "5"
    note: false
    quietmode: 0
    scriptarguments:
      field:
        simple: tags
      fieldValue:
        complex:
          root: inputs.SinkholeTag
      indicatorsValues:
        complex:
          filters:
          - - ignorecase: true
              left:
                iscontext: true
                value:
                  simple: indicators.value
              operator: notIn
              right:
                iscontext: true
                value:
                  simple: DomainsRecentlyTagged
          root: indicators.value
          transformers:
          - operator: uniq
    separatecontext: false
    skipunavailable: false
    task:
      brand: Builtin
      description: Removes the sinkhole tag from the domains that reached the decay
        period according to the playbook input.
      id: 1f109241-f295-4231-8a78-ae89b78d98e1
      iscommand: true
      name: Remove tags from the decayed domains
      script: Builtin|||removeIndicatorField
      type: regular
      version: -1
    taskid: 1f109241-f295-4231-8a78-ae89b78d98e1
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 680,
          "y": 1090
        }
      }
  "5":
    continueonerrortype: ""
    id: "5"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: e35a4a0b-aca0-4f03-8572-d70614c500e5
      iscommand: false
      name: Done
      type: title
      version: -1
    taskid: e35a4a0b-aca0-4f03-8572-d70614c500e5
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 450,
          "y": 1330
        }
      }
  "6":
    continueonerrortype: ""
    id: "6"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "13"
    note: false
    quietmode: 0
    scriptarguments:
      key:
        simple: TagEventName
      value:
        complex:
          root: inputs.SinkholeTag
          transformers:
          - args:
              prefix:
                value:
                  simple: 'The value '
              suffix:
                value:
                  simple: ' was added to field Tags'
            operator: concat
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Saves the name of the event that appears in the indicator timeline
        section, so that it can be used when filtering past tag events and deciding
        whether to remove the tag from the indicator.
      id: 70f7905f-7f25-44de-8f4c-d4adc31a80ff
      iscommand: false
      name: Save the name of the tagging event to search in history
      script: Set
      type: regular
      version: -1
    taskid: 70f7905f-7f25-44de-8f4c-d4adc31a80ff
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 970,
          "y": 200
        }
      }
  "13":
    continueonerrortype: ""
    id: "13"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "17"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: 91bb4e5f-5008-4f03-8449-b3238c8025e3
      iscommand: false
      name: Filter Domains
      type: title
      version: -1
    taskid: 91bb4e5f-5008-4f03-8449-b3238c8025e3
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 450,
          "y": 385
        }
      }
  "17":
    conditions:
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                accessor: value
                filters:
                - - left:
                      iscontext: true
                      value:
                        simple: indicators.comments.content
                    operator: isEqualString
                    right:
                      iscontext: true
                      value:
                        simple: TagEventName
                - - left:
                      iscontext: true
                      value:
                        simple: indicators.comments.created
                    operator: isAfter
                    right:
                      iscontext: true
                      value:
                        simple: MinimumTimeTimeNow
                root: indicators
          operator: isNotEmpty
          right:
            value: {}
      label: "yes"
    continueonerrortype: ""
    id: "17"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#default#':
      - "19"
      "yes":
      - "18"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: |-
        Checks whether any of the checked domains was tagged *after* the oldest decay date and time. If they were, they will not be considered in the decay time period, and will not be untagged.
        They will be untagged when the playbook re-runs and the time window changes in a way that their tagging activity is not present in the decay time window.
      id: b12a2bae-cb41-4c91-833c-9151d0c41f96
      iscommand: false
      name: Has any of the tagged domains been recently tagged?
      type: condition
      version: -1
    taskid: b12a2bae-cb41-4c91-833c-9151d0c41f96
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 450,
          "y": 530
        }
      }
  "18":
    continueonerrortype: ""
    id: "18"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "19"
    note: false
    quietmode: 0
    scriptarguments:
      key:
        simple: DomainsRecentlyTagged
      value:
        complex:
          accessor: value
          filters:
          - - left:
                iscontext: true
                value:
                  simple: indicators.comments.content
              operator: isEqualString
              right:
                iscontext: true
                value:
                  simple: TagEventName
          - - left:
                iscontext: true
                value:
                  simple: indicators.comments.created
              operator: isAfter
              right:
                iscontext: true
                value:
                  simple: MinimumTimeTimeNow
          root: indicators
          transformers:
          - operator: uniq
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Saves the domains that were tagged since the decay period.
      id: 4ea6f022-63b6-4742-83d8-b92a67862e9e
      iscommand: false
      name: Save newly tagged domains
      script: Set
      type: regular
      version: -1
    taskid: 4ea6f022-63b6-4742-83d8-b92a67862e9e
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 160,
          "y": 720
        }
      }
  "19":
    conditions:
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                accessor: value
                filters:
                - - left:
                      iscontext: true
                      value:
                        simple: indicators.value
                    operator: notIn
                    right:
                      iscontext: true
                      value:
                        simple: DomainsRecentlyTagged
                root: indicators
          operator: isNotEmpty
          right:
            value: {}
      label: "yes"
    continueonerrortype: ""
    id: "19"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#default#':
      - "5"
      "yes":
      - "4"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Checks whether any of the checked domains was not tagged within
        the decay period. If domains have been recently tagged (e.g., after the date
        derived from the decay period input), they will not be untagged.
      id: ed078f6d-529e-4243-8d35-a03182bdd5ad
      iscommand: false
      name: Any domains have NOT been tagged recently?
      type: condition
      version: -1
    taskid: ed078f6d-529e-4243-8d35-a03182bdd5ad
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 450,
          "y": 900
        }
      }
version: -1
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 1345,
        "width": 1360,
        "x": -10,
        "y": 50
      }
    }
  }

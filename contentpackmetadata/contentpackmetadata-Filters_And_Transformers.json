{
	"author": "Cortex XSOAR",
	"authorImage": "content/packs/Base/Author_image.png",
	"beta": false,
	"cacheVersn": 0,
	"categories": [
		"Utilities"
	],
	"certification": "certified",
	"contentItemTypes": [
		"automation"
	],
	"contentItems": {
		"automation": [
			{
				"description": "Gets specified indexes of a list.",
				"name": "GetRange",
				"tags": [
					"transformer",
					"general",
					"entirelist"
				]
			},
			{
				"description": "Remove empty items, entries or nodes from the array.",
				"name": "RemoveEmpty",
				"tags": [
					"transformer",
					"entirelist",
					"general"
				]
			},
			{
				"description": "Extract a string from an existing string.",
				"name": "ExtractInbetween",
				"tags": [
					"transformer",
					"string",
					"Utility"
				]
			},
			{
				"description": "Converts a single string to an array of that string.",
				"name": "ConvertToSingleElementArray",
				"tags": [
					"transformer",
					"entirelist"
				]
			},
			{
				"description": "Checks whether a given CIDR prefix is bigger than the defined maximum prefix.",
				"name": "CIDRBiggerThanPrefix",
				"tags": [
					"filter"
				]
			},
			{
				"description": "Check if number of availble addresses in IPv4 or IPv6 CIDR is greater than given number.",
				"name": "GreaterCidrNumAddresses",
				"tags": [
					"filter"
				]
			},
			{
				"description": "Convert all chosen values but exceptions.",
				"name": "ConvertAllExcept",
				"tags": [
					"transformer"
				]
			},
			{
				"description": "Encodes a URL string by replacing special characters in the string using the %xx escape. For example: https://example.com converts to https:%2F%2Fexample.com.",
				"name": "URLEncode",
				"tags": [
					"transformer"
				]
			},
			{
				"description": "Returns the first element of an array. If the value passed is not an array, it returns the original value that was passed.",
				"name": "FirstArrayElement",
				"tags": [
					"general",
					"transformer",
					"entirelist"
				]
			},
			{
				"description": "Extraction of all matches from a specified regular expression pattern from a provided string. Returns an array of results. This differs from RegexGroups in several ways:\n\n* It returns all matches of the specified pattern, not just specific groups. This is useful for extracting things using a pattern where the content of the source string is indeterminate, such as extracting all email addresses.\n* Some \"convenience\" arguments have been added to enhance usability: multi-line, ignore_case, period_matches_newline\n* Added a new argument, \"error_if_no_match\". The script will not ordinarily throw an error if a match is not found but if not using as a transformer within a playbook, it may, in certain limited circumstances, be desirable to throw an error if the expression doesn't match.\n* It uses the 'regex' library, which supports more some more advanced regex functionality than the standard 're' library. For more info, see https://pypi.org/project/regex/.",
				"name": "RegexExtractAll",
				"tags": [
					"transformer",
					"string"
				]
			},
			{
				"description": "Strip set of characters from prefix and/or suffix\ne.g. StripChar value=~!!~www.mydomain.com~!~!~ chars=!~ will return www.mydomain.com",
				"name": "StripChars",
				"tags": [
					"transformer",
					"string"
				]
			},
			{
				"description": "A transformer for if-elif-else logic.",
				"name": "If-Elif",
				"tags": [
					"transformer",
					"general"
				]
			},
			{
				"description": "Checks whether an IPv4 address is not contained in one or more comma-delimited CIDR ranges.",
				"name": "IsNotInCidrRanges",
				"tags": [
					"filter"
				]
			},
			{
				"description": "Converts UNIX Epoch time stamp to a simplified extended ISO format string. Use it to convert time stamp to Demisto date field\n\ne.g. 1525006939 will return '2018-04-29T13:02:19.000Z'",
				"name": "TimeStampToDate",
				"tags": [
					"transformer",
					"date"
				]
			},
			{
				"description": "Format patterns matched with regex. If the regex does not match any pattern, the original value is returned.\n\nExample 1:\n value: user=john\n regex: user=(.*)\n output_format: name=\\1\n -\u003e output value: name=john\n\nExample 2:\n value: xxx=yyy\n regex: user=(.*)\n output_format: name=\\1\n -\u003e output value: xxx=yyy",
				"name": "RegexReplace",
				"tags": [
					"transformer",
					"string"
				]
			},
			{
				"description": "Determines whether an IPv4 or IPv6 address is contained in at least one of the comma-delimited CIDR ranges. Multiple IPv4/IPv6 addresses can be passed comma-delimited and each will be tested.",
				"name": "IsInCidrRanges",
				"tags": [
					"filter"
				]
			},
			{
				"description": "Each entry in an array is merged into the existing array if the keyed-value matches.",
				"name": "MergeDictArray",
				"tags": [
					"transformer",
					"general",
					"entirelist"
				]
			},
			{
				"description": "Extracts email addresses from the given value.",
				"name": "ExtractEmailTransformer",
				"tags": [
					"transformer"
				]
			},
			{
				"description": "Converts\nhttps:%2F%2Fexample.com\ninto\nhttps://example.com",
				"name": "URLDecode",
				"tags": [
					"transformer"
				]
			},
			{
				"description": "Append item(s) to the end of the list if they are not empty.",
				"name": "AppendIfNotEmpty",
				"tags": [
					"transformer",
					"entirelist",
					"general"
				]
			},
			{
				"description": "Takes a date or time input and adds or subtracts a determined amount of time. Returns a string in date or time in ISO Format.",
				"name": "ModifyDateTime",
				"tags": [
					"transformer",
					"date"
				]
			},
			{
				"description": "Checks the given datetime has occured after the provided relative time.",
				"name": "AfterRelativeDate",
				"tags": [
					"date",
					"filter",
					"Condition"
				]
			},
			{
				"description": "Accepts a json object and returns a markdown.",
				"name": "JsonToTable",
				"tags": [
					"transformer",
					"entirelist",
					"general"
				]
			},
			{
				"description": "This script converts an input value into another value using two lists. The input value or range is searched in the first list (map_from). \nIf it exists, the value at the same index from the second list (map_to) is returned. If there is no match, the original value is returned.\nThis script supports mapping from either ranges of float numbers or text strings.\n\nExample 1:\n\nmap_from = \"1,2,3,4\"\nmap_to = \"4,3,2,1\"\nvalue = 3\n\nOutput is \"2\"\n\nExample 2:\n\nmap_from = \"1-3,4\"\nmap_to = \"5,1\"\nvalue = 3\n\nOutput is \"5\".",
				"name": "MapRangeValues",
				"tags": [
					"transformer"
				]
			},
			{
				"description": "Reverse a list\ne.g. [\"Mars\", \"Jupiter\", \"Saturn\"] =\u003e [\"Saturn\", \"Jupiter\", \"Mars\"]\n\nThis is an example for entire-list transformer - it operates the argument as a list (note the \"entirelist\" tag).",
				"name": "ReverseList",
				"tags": [
					"general",
					"entirelist",
					"transformer"
				]
			},
			{
				"description": "Extraction of elements which are contained in all the subgroups of the match to the pattern.\nFor example, extracting from the string \"The quick brown fox\" the object `{\"article\":\"The\",\"noun\":quick\"}`\n(See arguments descriptions for more details).",
				"name": "RegexGroups",
				"tags": [
					"transformer",
					"string"
				]
			},
			{
				"description": "Cut a string by delimiter and return specific fields.\nExample\n=================\ninput: \"A-B-C-D-E\"\ndelimiter: \"-\"\nfields: \"1,5\"\n\nreturn: \"A-E\"\n",
				"name": "Cut",
				"tags": [
					"transformer",
					"string"
				]
			},
			{
				"description": "Checks an object for an empty value and returns a pre-set default value.",
				"name": "SetIfEmpty",
				"tags": [
					"transformer",
					"general",
					"entirelist"
				]
			},
			{
				"description": "Checks whether the given value is within the specified time (hour) range.",
				"name": "BetweenHours",
				"tags": [
					"transformer",
					"date"
				]
			},
			{
				"description": "Transformer that returns a filtered list of IPv4 addresses, based on whether they match a comma-separated list of IPv4 ranges. Useful for filtering in internal IP address space.",
				"name": "IPv4Whitelist",
				"tags": [
					"transformer",
					"entirelist"
				]
			},
			{
				"description": "Returns the last element of an array. If the value passed is not an array, it returns the original value that was passed.",
				"name": "LastArrayElement",
				"tags": [
					"general",
					"transformer",
					"entirelist"
				]
			},
			{
				"description": "Build text from a template that can include DT expressions.",
				"name": "FormatTemplate",
				"tags": [
					"transformer",
					"general"
				]
			},
			{
				"description": "Returns a string concatenated with given a prefix and suffix which supports DT expressions.",
				"name": "ConcatFormat",
				"tags": [
					"transformer",
					"general",
					"string"
				]
			},
			{
				"description": "Takes a date or time input and get time components in a specific time zone.\nReturns a dictionary with the following components.\n- year\n- year_4_digit\n- month\n- month_3_letter\n- month_full_name\n- month_2_digit\n- day\n- day_2_digit\n- day_of_week (Sun:0, Sat:6)\n- day_of_week_3_letter\n- day_of_week_full_name\n- day_of_year\n- day_of_year_3_digit\n- hour\n- hour_12_clock\n- hour_2_digit_24_clock\n- hour_2_digit_12_clock\n- hour_of_day\n- minute\n- minute_2_digit\n- minute_of_day\n- second\n- second_2_digit\n- second_of_day\n- millisecond\n- period_12_clock\n- time_zone_hhmm\n- time_zone_offset\n- time_zone_abbreviations\n- unix_epoch_time\n- iso_8601\n- y-m-d\n- yyyy-mm-dd\n- h:m:s\n- H:m:s\n- hh:mm:ss\n- HH:mm:ss.",
				"name": "TimeComponents",
				"tags": [
					"transformer",
					"date"
				]
			},
			{
				"description": "Adds zeros (0) to the beginning of the string, until the string reaches the specified length.",
				"name": "PadZeros",
				"tags": [
					"transformer",
					"string",
					"number"
				]
			},
			{
				"description": "A filter that determines whether an IPv4 address is in the private RFC-1918 address space (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16). For more information, see https://en.wikipedia.org/wiki/Private_network",
				"name": "IsRFC1918Address",
				"tags": [
					"filter"
				]
			},
			{
				"description": "Accepts an array of domains as a block list, and a list of email addresses. The script then filters out any email address whose domain is in the block list. The filtered list will be returned as an array.",
				"name": "EmailDomainBlacklist",
				"tags": [
					"transformer",
					"general",
					"entirelist"
				]
			},
			{
				"description": "Removed selected fields from the JSON object.",
				"name": "IgnoreFieldsFromJson",
				"tags": [
					"transformer",
					"General"
				]
			},
			{
				"description": "Converts string to array. \nFor example: `http://example.com/?score:1,4,time:55` will be transformed to `[\"http://example.com/?score:1,4,time:55\"]`.",
				"name": "StringToArray",
				"tags": [
					"transformer"
				]
			},
			{
				"description": "Sums a List\ne.g. [\"25\", \"10\", \"25\"] =\u003e \"60\"\n\nThis is an example for number transformer.\n ",
				"name": "SumList",
				"tags": [
					"transformer",
					"number",
					"entirelist"
				]
			},
			{
				"description": "Return the string encoded with JSON from the whole array",
				"name": "StringifyArray",
				"tags": [
					"entirelist",
					"transformer",
					"general"
				]
			},
			{
				"description": "Find tables inside HTML and extract the contents into objects using the following logic:\n\n- If table has 2 columns and has no header row, treat the first column as key and second as value and create a table of key/value\n- If table has a header row, create a table of objects where attribute names are the headers\n- If table does not have a header row, create table of objects where attribute names are cell1, cell2, cell3...",
				"name": "ParseHTMLTables",
				"tags": [
					"transformer",
					"general"
				]
			},
			{
				"description": "Accepts an array of domains as an allow list, and a list of email addresses. The script then filters out any email address whose domain is not in the allow list. The filtered list will be returned as an array.",
				"name": "EmailDomainWhitelist",
				"tags": [
					"transformer",
					"general",
					"entirelist"
				]
			},
			{
				"description": "Parse a given JSON string \"value\" to a representative object. Example: '{\"a\": \"value\"}' =\u003e {\"a\": \"value\"}.",
				"name": "ParseJSON",
				"tags": [
					"transformer",
					"string"
				]
			},
			{
				"description": "This transformer will take in a value and transform it based on multiple condition expressions (wildcard, regex, etc) defined in a JSON dictionary structure. The key:value pair of the JSON dictionary should be:\n\n\"condition expression\": \"desired outcome\"\n\nFor example:\n\n{\n    \".*match 1.*\": \"Dest Val1\",\n    \".*match 2.*\": \"Dest Val2\",\n    \".*match 3(.*)\": \"\\\\1\",\n    \"*match 4*\": {\n        \"algorithm\": \"wildcard\",\n        \"output\": \"Dest Val4\"\n    }\n}\n\nThe transformer will return the value matched to a pattern following to the priority.\nWhen unmatched or the input value is structured (dict or list), it will simply return the input value.",
				"name": "MapPattern",
				"tags": [
					"transformer",
					"string"
				]
			},
			{
				"description": "This transformer will sort an array of dictionary values by keys in ascending or descending order.",
				"name": "SortBy",
				"tags": [
					"transformer",
					"general"
				]
			},
			{
				"description": "Transformer that returns a filtered list of IPv4 addresses, based on whether they do not match a comma-separated list of IPv4 ranges. Useful for filtering out internal IP address space.",
				"name": "IPv4Blacklist",
				"tags": [
					"transformer",
					"entirelist"
				]
			},
			{
				"description": "checks if left side is in range of right side (from,to anotation)\ne.g. - InRange left=4right=1,8 will return true.",
				"name": "InRange",
				"tags": [
					"filter",
					"number"
				]
			},
			{
				"description": "Return all items from the list where their given 'field' attribute is equal to 'equalTo' argument\n\nE.g. !WhereFieldEquals with the following arguments:\n - value=[{ \"name\": \"192.1,0.82\", \"type\": \"IP\" }, { \"name\": \"myFile.txt\", \"type\": \"File\" }, { \"name\": \"172.0.0.2\", \"type\": \"IP\" }]\n - field='type'\n - equalTo='IP'\n - getField='name' \n\nWill return all items names where field 'type' equals 'IP' - ['192.1,0.82', '172.0.0.2'].",
				"name": "WhereFieldEquals",
				"tags": [
					"transformer",
					"general",
					"entirelist"
				]
			},
			{
				"description": "A transformer for simple if-then-else logic.",
				"name": "If-Then-Else",
				"tags": [
					"transformer",
					"general"
				]
			},
			{
				"description": "This transformer will remove elements of the array that contain an identical combination of values for the keys given.",
				"name": "DedupBy",
				"tags": [
					"transformer",
					"general"
				]
			},
			{
				"description": "Returns all elements from the left side that have a substring that is equal to an element from the right side. Note: This filter is case-insensitive.\nE.g -AnyMatch left=baby right=A will return baby. For more examples see the filter's Readme.",
				"name": "AnyMatch",
				"tags": [
					"filter",
					"general"
				]
			},
			{
				"description": "Check if number of availble addresses in IPv4 CIDR is lower than given number.",
				"name": "LowerCidrNumAddresses",
				"tags": [
					"filter"
				]
			},
			{
				"description": "Performs a JMESPath search on an input JSON format, when using a transformer.",
				"name": "jmespath",
				"tags": [
					"transformer",
					"general"
				]
			},
			{
				"description": "This is a thin wrapper around the `dateutil.parser.parse` function. It will parse a string containing a date/time stamp and return it in ISO 8601 format.",
				"name": "DateStringToISOFormat",
				"tags": [
					"transformer",
					"date"
				]
			},
			{
				"description": "Checks whether a substring or an array of substrings is within a string array(each item will be checked). Supports single strings as well. For example, for substrings ['a','b','c'] in a string 'a' the script will return true.\n",
				"name": "StringContainsArray",
				"tags": [
					"filter",
					"string"
				]
			},
			{
				"description": "Return the single element in case the array has only 1 element in it, otherwise return the whole array.",
				"name": "JoinIfSingleElementOnly",
				"tags": [
					"entirelist",
					"transformer",
					"general"
				]
			},
			{
				"description": "Checks whether a given domain is a subdomain of one of the listed domains.",
				"name": "CheckIfSubdomain",
				"tags": [
					"filter"
				]
			},
			{
				"description": "Returns the product of two lists, joined by a separator, as a list of strings.",
				"name": "ProductJoin",
				"tags": [
					"transformer",
					"general",
					"entirelist"
				]
			},
			{
				"description": "This transformer will create a list of dictionary by aggregating elements from two arrays.\nThe one is given by `value` (with `array1_key`), another is given by `array2` (with `array2_key`).",
				"name": "MakePair",
				"tags": [
					"transformer",
					"general"
				]
			},
			{
				"description": "Convert object keys to match table keys.\nUse when mapping object/collection to table (grid) field.\n(Array of objects/collections is also supported).\nExample:\nInput: { \"Engine\": \"val1\", \"Max Results\": 13892378, \"Key_With^Special (characters)\": true }\nOutput: { \"engine\": \"val1\", \"maxresults\": 13892378, \"keywithspecialcharacters\": true }",
				"name": "ConvertKeysToTableFieldFormat",
				"tags": [
					"transformer"
				]
			},
			{
				"description": "Whether value is within a date range.",
				"name": "BetweenDates",
				"tags": [
					"transformer",
					"date"
				]
			},
			{
				"description": "Converts a custom-formatted timestamp to UNIX epoch time. Use it to convert custom time stamps to a XSOAR date field. If you pass formatter argument, we will use it to transform. If not, we will use dateparser.parse for transforming. For more info, see: https://docs.python.org/3.7/library/datetime.html#strftime-and-strptime-behavior",
				"name": "FormattedDateToEpoch",
				"tags": [
					"transformer",
					"date"
				]
			},
			{
				"description": "The script receives a list of fields and a context key base path. For example, Key=Test.result List=username,user and will get all of the values from Test.result.username and Test.result.user.\nThe Get field of the task must have the value ${.=[]}.",
				"name": "GetValuesOfMultipleFields",
				"tags": [
					"transformer"
				]
			},
			{
				"description": "Decodes an input in Base64 format.",
				"name": "Base64Decode",
				"tags": [
					"Utility",
					"transformer",
					"string",
					"incident-action-button"
				]
			},
			{
				"description": "This automation allows the usage of DT scripts within playbooks transformers",
				"name": "DT",
				"tags": [
					"transformer",
					"general"
				]
			},
			{
				"description": "This script converts the input value into another value using two lists. The input value is searched in the first list (input_values). \nIf it exists, the value from the second list (mapped_values) at the same index is retutrned. If there is no match, the original value is returned.\nIf the original input is a dictionary, then the script will look for a \"stringified\" version of the key/:/value pair in the input_values and then map the result in the output_values into the original \"value\".\n\nExample 1:\n\ninput_values = \"1,2,3,4\"\nmapper_values = \"4,3,2,1\"\nvalue = 3\n\nOutput would be \"2\"\n\nExample 2:\n\ninput_values =\"firstkey: datahere,secondkey: datathere\"\nmapper_values = \"datathere,datahere\"\nvalue(dict)= {\n                                \"firstkey\": \"datahere\"\n                          }\n\nOutput would be:\n                          {\n                                \"firstkey\": \"datathere\"\n                           }\n\nThe reason for matching the key AND value pair in a dictionary is to allow the mappig of values that have a specific key name. In most cases, dictionaries will continan key-value pairs in which the values are the same. You might want to change the value of KeyA, but not the value of KeyB. This method gives control over which key is changed.\n\nWhen the input is a dict, str , int, or list, the output is ALWAYS returned as a string.",
				"name": "MapValuesTransformer",
				"tags": [
					"transformer",
					"string"
				]
			},
			{
				"description": "Extract the strings matched to the patterns by doing backslash substitution on the template string.\nThis transformer allow to input multiple regex patterns and multiple match targets, and those can be given in the input value and the argument parameters.",
				"name": "RegexExpand",
				"tags": [
					"transformer",
					"string",
					"entirelist"
				]
			}
		],
		"classifier": null,
		"dashboard": null,
		"genericfield": null,
		"generictype": null,
		"incidentfield": null,
		"incidenttype": null,
		"indicatorfield": null,
		"integration": null,
		"layoutscontainer": null,
		"list": null,
		"playbook": null,
		"report": null,
		"reputation": null,
		"widget": null,
		"wizard": null
	},
	"created": "2022-01-04T22:18:23Z",
	"currentVersion": "1.2.51",
	"definitionId": "",
	"dependencies": {
		"Base": {
			"author": "Cortex XSOAR",
			"certification": "certified",
			"mandatory": true,
			"minVersion": "1.33.9",
			"name": "Base"
		}
	},
	"deprecated": false,
	"description": "Frequently used filters and transformers pack.",
	"downloads": 42776,
	"eulaLink": "https://github.com/demisto/content/blob/master/LICENSE",
	"fromServerVersion": "5.0.0",
	"general": [
		"generalFieldCertified",
		"generalFieldByCortexXSOAR",
		"generalFieldFree",
		"generalFieldSupportIncluded"
	],
	"id": "FiltersAndTransformers",
	"installMessage": "",
	"integrations": [],
	"itemVersion": "1.2.51",
	"keywords": [],
	"legacy": true,
	"modules": [],
	"name": "Filters And Transformers",
	"packID": "FiltersAndTransformers",
	"packName": "",
	"premium": false,
	"previewOnly": false,
	"price": 0,
	"propagationLabels": [
		"all"
	],
	"rawKeywords": null,
	"rawTags": null,
	"rawUseCases": null,
	"searchRank": 10,
	"serverMaxVersion": "",
	"serverMinVersion": "5.0.0",
	"support": "xsoar",
	"supportDetails": {
		"email": "",
		"url": "https://www.paloaltonetworks.com/cortex"
	},
	"tags": [
		"Filter",
		"Trending",
		"Core",
		"Transformer"
	],
	"toServerVersion": "",
	"updated": "2024-01-01T10:18:02Z",
	"useCases": [],
	"version": -1,
	"versionInfo": "729445",
	"videos": []
}
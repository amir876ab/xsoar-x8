args:
- description: File entry ID
  name: entryID
  predefined:
  - ""
  required: true
- description: Incident ID to upload the file to
  name: incidentID
  required: true
- description: Request body
  name: body
- auto: PREDEFINED
  defaultValue: war room entry
  description: |-
    Where to upload the file
    - Available options are:
    - `war room entry`: the file will be uploaded as war room entry.
    - `incident attachment`: the file will be uploaded as incident attachment.
    - default are `war room entry`
  name: target
  predefined:
  - war room entry
  - incident attachment
comment: Deprecated. Use UploadFile instead.
commonfields:
  id: DemistoUploadFileV2
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.3.37
    packID: DemistoRESTAPI
    packName: Cortex REST API
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - demisto-api-multipart
deprecated: true
dockerimage: demisto/python3:3.10.6.33415
enabled: true
engineinfo: {}
mainengineinfo: {}
name: DemistoUploadFileV2
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('DemistoUploadFileV2', 'start', __line__())
  ### pack version: 1.3.37
  from typing import Tuple




  def upload_file(incident_id: str, entry_id: str, body: str = '', as_incident_attachment: bool = True):
      service_name = 'incident' if as_incident_attachment else 'entry'
      return demisto.executeCommand("demisto-api-multipart",
                                    {"uri": f'{service_name}/upload/{incident_id}', "entryID": entry_id, "body": body})


  def upload_file_command(args: dict) -> Tuple[str, str]:
      incident_id = args.get('incidentID', '')
      entry_id = args.get('entryID', '')
      body = args.get('body', '')
      target = args.get('target', 'war room entry')
      response = upload_file(incident_id, entry_id, body, target == 'incident attachment')
      if is_error(response[0]):
          raise Exception("There was an issue uploading the file. Check your API key and input arguments.")

      uploaded_entry_id = demisto.dt(response, 'Contents.response.entries.id')
      readable = 'File uploaded successfully.'
      # in case the file uploaded as war room entry
      if uploaded_entry_id:
          readable += f' Entry ID is {uploaded_entry_id}'
      if body:
          readable += f'. Comment is:{body}'

      return readable, response


  def main():
      try:
          readable, response = upload_file_command(demisto.args())
          return_outputs(readable, {}, response)
      except Exception as err:
          return_error(str(err))


  if __name__ in ['__main__', 'builtin', 'builtins']:
      main()

  register_module_line('DemistoUploadFileV2', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- DemistoAPI
type: python

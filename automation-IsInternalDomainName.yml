args:
- auto: PREDEFINED
  default: true
  description: A comma-separated list of main domains. The subdomains will be compared
    to this list of main domains. For example, google.com.
  isArray: true
  name: main_domains
  required: true
- auto: PREDEFINED
  default: true
  description: A comma-separated list of subdomains. These subdomains will be compared
    to the list of main domains.
  isArray: true
  name: possible_sub_domains_to_test
  required: true
comment: This script accepts multiple values for both arguments and will iterate through
  each of the domains to check if the specified subdomains are located in at least
  one of the specified main domains. If the tested subdomain is in one of the main
  domains, the result will be true. For example, if the domain_to_check values are
  apps.paloaltonetworks.com and apps.paloaltonetworks.bla and the domains_to_compare
  values are paloaltonetworks.com and demisto.com, the result for apps.paloaltonetworks.com
  will be true since it is a part of the paloaltonetworks.com domain. The result for
  apps.paloaltonetworks.bla will be false since it is not a part of the paloaltonetworks.com
  or demisto.com domain.
commonfields:
  id: IsInternalDomainName
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.12.39
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
engineinfo: {}
mainengineinfo: {}
name: IsInternalDomainName
outputs:
- contextPath: IsInternalDomain.DomainToTest
  description: The subdomain that was checked to see if it is part of the specified
    domains.
  type: String
- contextPath: IsInternalDomain.IsInternal
  description: True, if the subdomain is part of one of the specified domains. Otherwise,
    false.
  type: Boolean
- contextPath: IsInternalDomain.DomainToCompare
  description: The names of the main domains that were used to compare the subdomains
    to.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('IsInternalDomainName', 'start', __line__())
  ### pack version: 1.12.39
  """
  Script to check if a domain or a sub domain is part of a given domain
  """


  MAXIMUM_NUMBER_OF_RECORDS = 10


  def check_sub_domains_in_domain(domains_to_compare: list, sub_domains_to_check: list):
      """

      Args:
          domains_to_compare (list) : list of main domains that should be compared with sub domains
          sub_domains_to_check (list) : list of domains or sub domains that should be checked

      Returns:
          CommandResults included:
          1. outputs (dict of) :
               {
               IsInternalDomain: [{
              - DomainToTest : a subdomain (from the given list of subdomains)
              - DomainToCompare : list of given main domains
              - IsInternal : True / False if this subdomain is / is not in at least one of the given main domains. }]
              }
          2. readable_output (markdown table) : contains first 10 entries with the above headers:
             ["DomainToTest", "DomainToCompare", "IsInternal"]
      """
      context_entry = []
      markdown = []
      headers = ["DomainToTest", "DomainToCompare", "IsInternal"]
      for sub_domain in sub_domains_to_check:
          # in case sub domain is in at least one of the given main domains
          is_in_domain = any(main_domain in sub_domain for main_domain in domains_to_compare)
          context_entry.append({
              'DomainToTest': sub_domain,
              'DomainToCompare': domains_to_compare,
              'IsInternal': is_in_domain
          })
          markdown.append({"DomainToTest": sub_domain,
                           "DomainToCompare": domains_to_compare,
                           "IsInternal": is_in_domain})

      table = tableToMarkdown("", markdown[:MAXIMUM_NUMBER_OF_RECORDS], headers)
      return CommandResults(outputs={'IsInternalDomain': context_entry}, readable_output=table)


  def validate_args(domains_to_compare, sub_domains_to_check):
      if len(domains_to_compare) == 0:
          return_error("Error: please specify at least one possible main domain to compare with.")
      elif len(sub_domains_to_check) == 0:
          return_error("Error: please specify at least one possible sub domain to check.")


  def main():
      args = demisto.args()
      domains_to_compare = argToList(args.get('main_domains'))
      sub_domains_to_check = argToList(args.get('possible_sub_domains_to_test'))
      validate_args(domains_to_compare, sub_domains_to_check)
      return_results(check_sub_domains_in_domain(domains_to_compare, sub_domains_to_check))


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('IsInternalDomainName', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python

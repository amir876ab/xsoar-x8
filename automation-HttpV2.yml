args:
- description: Specify where the request should be sent. Include the URI scheme ('http'
    or 'https').
  name: url
  required: true
- auto: PREDEFINED
  description: Specify the HTTP method to use.
  name: method
  predefined:
  - GET
  - POST
  - PUT
  - PATCH
  - DELETE
  - HEAD
  required: true
- description: |-
    Specify a hash of headers to send with the request.
    Headers can be of string type but need to be formatted in the following ways:
    `{"key1": "value1", "key2": "value2"}` or `"key1": "value1", "key2": "value2"`
  name: headers
  type: keyValue
- description: Specify the body of the request.
  name: body
  type: textArea
- description: |-
    Specify the Content-Type header for the request.
    Shorthands are provided for the following common content types:
    json (application/json)
    xml (text/xml)
    form (application/x-www-form-urlencoded)
    data (multipart/form-data)
    If you choose to define a different type, please include the full type name, e.g: application/pdf
  name: request_content_type
- description: |-
    Specify the Accept header for the request - the response content type.
    Shorthands are provided for the following common content types:
    json (application/json)
    xml (text/xml)
    form (application/x-www-form-urlencoded)
    data (multipart/form-data)
    If you choose to define a different type, please include the full type name, e.g: application/pdf
  name: response_content_type
- auto: PREDEFINED
  defaultValue: raw_response
  description: Specify how you would like to parse the response.
  name: parse_response_as
  predefined:
  - text
  - json
  - xml
  - raw_response
- description: 'Basic authorization. Please set values in the format: username,password.
    For Bearer token please use the headers.'
  name: auth_credentials
  secret: true
- description: URL parameters to specify the query.
  name: params
  type: keyValue
- defaultValue: "10"
  description: Specify the timeout of the HTTP request in seconds. Defaults to 10
    seconds.
  name: timeout
- auto: PREDEFINED
  defaultValue: "True"
  description: The request will be called again with the new URL.
  name: enable_redirect
  predefined:
  - "True"
  - "False"
- description: ' Specify the array of status codes that should cause a retry. For
    example: 301-303,400,402.'
  name: retry_on_status
- defaultValue: "3"
  description: Specify the number or retries to be made in case of a failure. Defaults
    to 3.
  name: retry_count
- defaultValue: "5"
  description: Specify the timeout between each retry in seconds. Defaults to 5.
  name: timeout_between_retries
- auto: PREDEFINED
  defaultValue: "no"
  description: Save the response in a file.
  name: save_as_file
  predefined:
  - "yes"
  - "no"
- defaultValue: http-file
  description: filename
  name: filename
- auto: PREDEFINED
  defaultValue: "False"
  description: Trust any certificate (not secure)
  name: unsecure
  predefined:
  - "True"
  - "False"
- auto: PREDEFINED
  defaultValue: "False"
  description: Use system proxy settings
  name: proxy
  predefined:
  - "True"
  - "False"
comment: Sends a HTTP request with advanced capabilities
commonfields:
  id: HttpV2
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.5.0
    itemVersion: 1.12.39
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
engineinfo: {}
mainengineinfo: {}
name: HttpV2
outputs:
- contextPath: HttpRequest.Response.StatusCode
  description: The number that indicates the status of the request.
  type: String
- contextPath: HttpRequest.Response.StatusText
  description: The text corresponding to the status code
  type: String
- contextPath: HttpRequest.Response.URL
  description: The URL of the response
  type: String
- contextPath: HttpRequest.Response.ParsedBody
  description: The parsed response, according to `parse_response_as` argument.
  type: String
- contextPath: HttpRequest.Response.Headers
  description: The response headers.
  type: String
- contextPath: HttpRequest.Response.Body
  description: The response data.
  type: Unknown
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('HttpV2', 'start', __line__())
  ### pack version: 1.12.39




  from typing import Dict, List
  import json

  CONTENT_TYPE_MAPPER = {
      "json": "application/json",
      "xml": "text/xml",
      "form": "application/x-www-form-urlencoded",
      "data": "multipart/form-data"
  }

  RAW_RESPONSE = 'raw_response'


  class Client(BaseClient):
      def __init__(self, base_url: str, auth: tuple, verify: bool, proxy: bool):

          super().__init__(base_url=base_url, auth=auth, verify=verify, proxy=proxy)

      def http_request(self, method: str, full_url: str = '', headers: dict = None, resp_type: str = RAW_RESPONSE,
                       params: dict = None, data: str = None, timeout: int = 10, retries: int = 0,
                       status_list_to_retry: list = None, raise_on_status: bool = False, allow_redirects: bool = True,
                       backoff_factor: int = 5):
          try:
              res = self._http_request(
                  method=method,
                  full_url=full_url,
                  headers=headers,
                  params=params,
                  timeout=timeout,
                  resp_type=resp_type,
                  status_list_to_retry=status_list_to_retry,
                  raise_on_status=raise_on_status,
                  retries=retries,
                  data=data,
                  error_handler=self._generic_error_handler,
                  allow_redirects=allow_redirects,
                  backoff_factor=backoff_factor
              )
          except requests.exceptions.ConnectTimeout as exception:
              err_msg = 'Connection Timeout Error - potential reasons might be that the Server URL parameter' \
                        ' is incorrect or that the Server is not accessible from your host.'
              raise DemistoException(err_msg, exception)
          return res

      @staticmethod
      def _generic_error_handler(res: requests.Response):
          status_code = res.status_code
          if status_code == 400:
              raise DemistoException(f"Bad request. Status code: {status_code}. Origin response from server: {res.text}")

          if status_code == 401:
              raise DemistoException(f"Unauthorized. Status code: {status_code}. Origin response from server: {res.text}")

          if status_code == 403:
              raise DemistoException(f"Invalid permissions. Status code: {status_code}. "
                                     f"Origin response from server: {res.text}")

          if status_code == 404:
              raise DemistoException(f"The server has not found anything matching the request URI. Status code:"
                                     f" {status_code}. Origin response from server: {res.text}")
          if status_code == 500:
              raise DemistoException(f"Internal server error. Status code: {status_code}."
                                     f" Origin response from server: {res.text}")

          if status_code == 502:
              raise DemistoException(f"Bad gateway. Status code: {status_code}. Origin response from server: {res.text}")


  def create_headers(headers: Dict, request_content_type_header: str, response_content_type_header: str) \
          -> Dict[str, str]:
      """
      Create a dictionary of headers. It will map the header if it exists in the CONTENT_TYPE_MAPPER.
      Args:
          headers: The headers the user insert.
          request_content_type_header: The content type header.
          response_content_type_header: The response type header.

      Returns:
          A dictionary of headers to send in the request.
      """
      if request_content_type_header in CONTENT_TYPE_MAPPER.keys():
          request_content_type_header = CONTENT_TYPE_MAPPER[request_content_type_header]
      if response_content_type_header in CONTENT_TYPE_MAPPER.keys():
          response_content_type_header = CONTENT_TYPE_MAPPER[response_content_type_header]
      if request_content_type_header and not headers.get('Content-Type'):
          headers['Content-Type'] = request_content_type_header
      if response_content_type_header and not headers.get('Accept'):
          headers['Accept'] = response_content_type_header

      return headers


  def get_parsed_response(res, resp_type: str) -> Any:
      try:
          resp_type = resp_type.lower()
          if resp_type == 'json':
              res = res.json()
          elif resp_type == 'xml':
              res = json.loads(xml2json(res.content))
          else:
              res = res.text
          return res
      except ValueError as exception:
          raise DemistoException('Failed to parse json object from response: {}'
                                 .format(res.content), exception)


  def format_status_list(status_list: list) -> List[int]:
      """
      Get a status list and format it to a range of status numbers.
      Example:
          given: ['400-404',500,501]
          return: [400,401,402,403,500,501]
      Args:
          status_list: The given status list.
      Returns:
          A list of statuses to retry.
      """
      final_status_list = []
      for status in status_list:
          # Checks if the status is a range of statuses
          if '-' in status:
              range_numbers = status.split('-')
              status_range = list(range(int(range_numbers[0]), int(range_numbers[1]) + 1))
              final_status_list.extend(status_range)
          elif status.isdigit():
              final_status_list.append(int(status))
      return final_status_list


  def build_outputs(parsed_res, res: requests.Response) -> Dict:
      return {'ParsedBody': parsed_res,
              'Body': res.text,
              'StatusCode': res.status_code,
              'StatusText': res.reason,
              'URL': res.url,
              'Headers': dict(res.headers)}


  def parse_headers(headers: str) -> Dict:
      """
          Parsing headers from str type to dict.
          The allowed format are:
          1. {"key": "value"}
          2. "key": "value"
      """
      if not headers.startswith('{') and not headers.endswith('}'):
          headers = '{' + headers + '}'
      try:
          headers_dict = json.loads(headers)
      except json.decoder.JSONDecodeError:
          raise DemistoException("Make sure the headers are in one of the allowed formats.")
      return headers_dict


  ''' MAIN FUNCTION '''


  def main():
      try:
          args = demisto.args()
          method = args.get('method', '')
          full_url = args.get('url', '')
          body = args.get('body', '')
          request_content_type = args.get('request_content_type', '')
          response_content_type = args.get('response_content_type', '')
          parse_response_as = args.get('parse_response_as', RAW_RESPONSE)
          params = args.get('params', {})
          headers = args.get('headers', {})
          if isinstance(headers, str):
              headers = parse_headers(headers)
          headers = create_headers(headers, request_content_type, response_content_type)
          auth = tuple(argToList(args.get('auth_credentials', None)))
          save_as_file = args.get('save_as_file', 'no')
          file_name = args.get('filename', 'http-file')
          timeout = arg_to_number(args.get('timeout', 10))
          timeout_between_retries = args.get('timeout_between_retries', 5)
          retry_count = arg_to_number(args.get('retry_count', 3))
          proxy = argToBoolean(args.get('proxy', False))
          verify = argToBoolean(not args.get('unsecure', False))

          client = Client(base_url=full_url, auth=auth, verify=verify, proxy=proxy)
          kwargs = {
              'method': method,
              'full_url': full_url,
              'headers': headers,
              'data': body,
              'timeout': timeout,
              'params': params,
              'backoff_factor': timeout_between_retries
          }

          retry_on_status = args.get('retry_on_status', None)
          raise_on_status = True if retry_on_status else False
          retry_status_list = format_status_list(argToList(retry_on_status))

          if raise_on_status:
              kwargs.update({
                  'retries': retry_count,
                  'status_list_to_retry': retry_status_list,
                  'raise_on_status': raise_on_status
              })

          enable_redirect = argToBoolean(args.get('enable_redirect', True))

          if not enable_redirect:
              kwargs.update({
                  'allow_redirects': enable_redirect
              })

          res = client.http_request(**kwargs)
          parsed_res = get_parsed_response(res, parse_response_as)

          if save_as_file == 'yes':
              return fileResult(file_name, res.content)

          outputs = build_outputs(parsed_res, res)

          return CommandResults(
              readable_output=f"Sent a {method} request to {full_url}",
              outputs_prefix='HttpRequest.Response',
              outputs=outputs,
              raw_response={'data': parsed_res}
          )
      except Exception as e:
          return_error(f'Failed to execute HttpV2 script. Error: {str(e)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      return_results(main())

  register_module_line('HttpV2', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- basescript
type: python

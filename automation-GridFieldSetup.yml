args:
- description: columns for the grid field in comma separated format
  name: keys
  required: true
- description: A value for the 1st key. (Can be a string or context path or `TIMESTAMP`
    to get the current timestamp in ISO format.)
  name: val1
  required: true
- description: A value for the 2nd key. (Can be a string or context path or `TIMESTAMP`
    to get the current timestamp in ISO format.)
  name: val2
- description: A value for the 3rd key. (Can be a string or context path or `TIMESTAMP`
    to get the current timestamp in ISO format.)
  name: val3
- description: A value for the 4th key. (Can be a string or context path or `TIMESTAMP`
    to get the current timestamp in ISO format.)
  name: val4
- description: A value for the 5th key. (Can be a string or context path or `TIMESTAMP`
    to get the current timestamp in ISO format.)
  name: val5
- description: A value for the 6th key. (Can be a string or context path or `TIMESTAMP`
    to get the current timestamp in ISO format.)
  name: val6
- description: A value for the 7th key. (Can be a string or context path or `TIMESTAMP`
    to get the current timestamp in ISO format.)
  name: val7
- description: A value for the 8th key. (Can be a string or context path or `TIMESTAMP`
    to get the current timestamp in ISO format.)
  name: val8
- description: A value for the 9th key. (Can be a string or context path or `TIMESTAMP`
    to get the current timestamp in ISO format.)
  name: val9
- description: A value for the 10th key. (Can be a string or context path or `TIMESTAMP`
    to get the current timestamp in ISO format.)
  name: val10
- description: Grid field to populate
  name: gridfield
  required: true
- auto: PREDEFINED
  defaultValue: "false"
  description: whether to overwrite what is in the gridfield or not (default is to
    append)
  name: overwrite
  predefined:
  - "true"
  - "false"
comment: |-
  Automation used to more easily populate a grid field.  This is necessary when you want to assign certain values as static or if you have context paths that you will assign to different values as well.  Instead of a value you can enter `TIMESTAMP` to get the current timestamp in ISO format. For example:
  `!GridFieldSetup keys=ip,src,timestamp val1=${AWS.EC2.Instances.NetworkInterfaces.PrivateIpAddress} val2="AWS" val3="TIMESTAMP" gridfiled="gridfield"`
commonfields:
  id: GridFieldSetup
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.5.0
    itemVersion: 1.12.39
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GridFieldSetup
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GridFieldSetup', 'start', __line__())
  ### pack version: 1.12.39




  from typing import Dict, List


  def grid_field_setup(keys: List[str], vals: Dict, res_list: List) -> List[str]:
      """Returns a list of dictionaries based on the key/values provided.
      :type keys: ``str``
      :type vals: ``dict``
      :type res_list: ``list``
      :param keys: comma separated values used for keys (columns)
      :param vals: dictionary of the value assigned to keys
      :param res_list: list of current entries in gridfield (or blank list)
      :return: list of dictionaries
      """
      temp = {}
      for i, key in enumerate(keys, start=1):
          if vals[f'val{i}'] == "TIMESTAMP":
              temp[key] = datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%fZ")
          else:
              temp[key] = vals[f'val{i}']
      res_list.append(temp)

      return res_list


  ''' COMMAND FUNCTION '''


  def grid_field_setup_command(args: Dict[str, str]) -> CommandResults:
      keys = argToList(args.pop('keys', []))
      overwrite = args.pop('overwrite', False)
      gridfield = args.pop('gridfield', None)

      # logic here to check if empty result and set default list
      fields = demisto.incidents()[0].get('CustomFields')
      if not fields:
          raise ValueError('no Custom Fields present')
      orig = fields.get(gridfield)
      if not orig or argToBoolean(overwrite):
          orig = []

      # dictionary or all vals
      vals = {k: v for k, v in args.items() if k.startswith('val')}

      # error is keys and value numbers don't align
      if len(keys) != len(vals):
          raise ValueError('number of keys and values needs to be the same')

      # Call the standalone function and get the raw response
      result = grid_field_setup(keys, vals, orig)

      results = demisto.executeCommand("setIncident", {gridfield: result})

      return results


  ''' MAIN FUNCTION '''


  def main():
      try:
          return_results(grid_field_setup_command(demisto.args()))
      except Exception as ex:
          return_error(f'Failed to execute GridFieldSetup. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('GridFieldSetup', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python

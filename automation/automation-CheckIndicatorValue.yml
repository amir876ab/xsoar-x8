args:
- description: The indicator value to check.
  isArray: true
  name: indicator
  required: true
- auto: PREDEFINED
  defaultValue: none
  description: Decode indicators by the algorithm given.
  name: encoding
  predefined:
  - none
  - base64
  - url-encoding
comment: Check if indicators exist in the Threat Intel database.
commonfields:
  id: CheckIndicatorValue
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.5.0
    itemVersion: 1.12.39
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: CheckIndicatorValue
outputs:
- contextPath: CheckIndicatorValue.Indicator
  description: The indicator value.
  type: string
- contextPath: CheckIndicatorValue.EncodedIndicator
  description: The encoded indicator value given.
  type: string
- contextPath: CheckIndicatorValue.Exists
  description: Whether the indicator exists.
  type: boolean
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('CheckIndicatorValue', 'start', __line__())
  ### pack version: 1.12.39


  import base64
  import urllib.parse
  from typing import Any, Dict, Optional


  def exists_indicator(indicator: str) -> bool:
      if contents := execute_command('getIndicator', {'value': indicator}):
          if len(contents) > 0 and contents[0].get('value') in [indicator]:
              return True
      return False


  def decode_indicator(indicator: str, encoding: Optional[str]) -> str:
      if not encoding or encoding == 'none':
          return indicator
      elif encoding == 'base64':
          return base64.b64decode(indicator.encode()).decode()
      elif encoding == 'url-encoding':
          return urllib.parse.unquote(indicator)
      else:
          raise DemistoException(f'Unknown encoding mode: {encoding}')


  def check_indicators(indicators: List[str], encoding: str) -> List[Dict[str, Any]]:
      # Decode and dedup indicators
      pairs = {decode_indicator(encoded_indicator, encoding): encoded_indicator for encoded_indicator in indicators}

      # Check if each indicator exists
      return [{
          'Indicator': indicator,
          'EncodedIndicator': encoded_indicator,
          'Exists': exists_indicator(indicator)
      } for indicator, encoded_indicator in pairs.items()]


  def main():
      try:
          args = demisto.args()
          encoding = args.get('encoding') or 'none'
          indicators = argToList(args.get('indicator') or [])

          outputs = check_indicators(indicators, encoding)
          count = sum(1 for ent in outputs if ent.get('Exists'))

          return_results(CommandResults(
              outputs_key_field='Indicator',
              outputs_prefix='CheckIndicatorValue',
              outputs=outputs,
              readable_output=f'{count} indicators exist.',
              raw_response=outputs
          ))
      except Exception as e:
          return_error(f'Failed to execute CheckIndicatorValue. Error: {str(e)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('CheckIndicatorValue', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- evaluation
- polling
type: python

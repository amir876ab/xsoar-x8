args:
- description: The query for the Indicators that you want to export. (e.g. type:IP
    and reputation:Bad and expirationStatus:active). You can and should generate the
    query from the Indicators search screen.
  name: query
  required: true
- defaultValue: "7"
  description: Indicator last seen days  (default is 7).  Needs to be a number.
  name: seenDays
- description: 'Comma separated list of columns (fields) for the CSV.  (Default is:
    id,indicator_type,value,source,score,relatedIncCount,setBy,sourceBrands,modified)'
  name: columns
comment: This automation uses the Demisto REST API Integration to batch export Indicators
  to CSV and return the resulting CSV file to the war room.
commonfields:
  id: ExportIndicatorsToCSV
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.5.0
    itemVersion: 1.12.47
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - demisto-api-post
  - demisto-api-get
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ExportIndicatorsToCSV
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ExportIndicatorsToCSV', 'start', __line__())
  ### pack version: 1.12.47




  def main():
      indicator_query = demisto.args().get("query")
      indicator_seen_days = int(demisto.args().get("seenDays"))

      if demisto.args().get("columns"):
          indicator_columns = [x.strip() for x in demisto.args().get("columns").split(",")]
      else:
          indicator_columns = ["id", "indicator_type", "value", "score", "timestamp",
                               "relatedIncCount", "sourceBrands", "expirationStatus", "expiration", "modified"]

      # body for the indicator request
      indicator_body = {
          "all": True,
          "filter": {
              "query": indicator_query,
              "sort": [{
                  "field": "calculatedTime",
                  "asc": False
              }],
              "period": {
                  "by": "day",
                  "fromValue": indicator_seen_days
              }
          },
          "columns": indicator_columns
      }

      # generate the file
      res = demisto.executeCommand("demisto-api-post", {"uri": "/indicators/batch/exportToCsv",
                                                        "body": indicator_body})[0]["Contents"]["response"]

      # download the file and return to the war room
      file = demisto.executeCommand("demisto-api-get", {"uri": f"/indicators/csv/{res}"})[0]["Contents"]["response"]
      demisto.results(fileResult(res, file))


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('ExportIndicatorsToCSV', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python

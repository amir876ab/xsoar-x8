args:
- description: The value to check.
  name: value
  required: true
- description: The start time range in the format HH:MM:SS.
  name: begin_time
  required: true
- description: The end time range in the format HH:MM:SS.
  name: end_time
  required: true
comment: Checks whether the given value is within the specified time (hour) range.
commonfields:
  id: BetweenHours
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.2.37
    packID: FiltersAndTransformers
    packName: Filters And Transformers
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: BetweenHours
outputs:
- contextPath: BetweenHours.result
  description: Whether the input hour is between the given hours.
  type: boolean
- contextPath: BetweenHours.value
  description: The value to check.
  type: string
- contextPath: BetweenHours.begin_time
  description: The start time range in the format HH:MM:SS.
  type: string
- contextPath: BetweenHours.end_time
  description: The end time range in the format HH:MM:SS.
  type: string
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('BetweenHours', 'start', __line__())
  ### pack version: 1.2.37


  import dateparser


  def is_between_hours(value, begin_time, end_time):
      # https://stackoverflow.com/questions/71256416/pytzusagewarning-doesnt-seem-to-go-away
      input_time = dateparser.parse(value, settings={'TIMEZONE': 'UTC'}).time()  # type: ignore
      start_time = dateparser.parse(begin_time, settings={'TIMEZONE': 'UTC'}).time()  # type: ignore
      end_time = dateparser.parse(end_time, settings={'TIMEZONE': 'UTC'}).time()  # type: ignore

      return start_time <= input_time <= end_time


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      args = demisto.args()
      value, begin_time, end_time = args['value'], args['begin_time'], args['end_time']

      result = is_between_hours(value, begin_time, end_time)

      output = {"value": value, "begin_time": begin_time, "end_time": end_time, "result": result}
      human_readable = f'# BetweenHours\n' \
          f'The time *{value}* {"*IS*" if result else "*IS NOT*"} between *{begin_time}* and *{end_time}*'

      return_results(CommandResults(outputs_prefix="BetweenHours", readable_output=human_readable, outputs=result))

  register_module_line('BetweenHours', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- transformer
- date
type: python

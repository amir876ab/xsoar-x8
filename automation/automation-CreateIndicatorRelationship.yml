args:
- description: The source of the relationship, for example 1.1.1.1. Only a single
    value is acceptable.
  name: entity_a
  required: true
- auto: PREDEFINED
  description: The source type of the relationship, for example IP. The value must
    be an accepted indicator type. Only a single value is acceptable.
  name: entity_a_type
  predefined:
  - IP
  - Domain
  - URL
  - CVE
  - DomainGlob
  - Email
  - File
  - Host
  - CIDR
  - IPv6
  - IPv6CIDR
  - Registry Key
  - ssdeep
  - accountRep
  - CIDR
  - Attack Pattern
  - Malware
  - Report
  - Threat Actor
  - Tool
  - Campaign
  - Course of Action
  - Infrastructure
  - Intrusion Set
  required: true
- description: A comma-separated list of destinations or second entity values, for
    example 3.3.3.3,2.2.2.2. This argument must be used with the entity_b_type argument
    and cannot be used in conjunction with the entity_b_query argument.
  isArray: true
  name: entity_b
- auto: PREDEFINED
  description: The destination type of the relationship, for example IP. Only a single
    value is acceptable. This argument must be used with the entity_b argument and
    cannot be used in conjunction with the entity_b_query argument.
  name: entity_b_type
  predefined:
  - IP
  - Domain
  - URL
  - CVE
  - DomainGlob
  - Email
  - File
  - Host
  - CIDR
  - IPv6
  - IPv6CIDR
  - Registry Key
  - ssdeep
  - accountRep
  - CIDR
  - Attack Pattern
  - Malware
  - Report
  - Threat Actor
  - Tool
  - Campaign
  - Course of Action
  - Infrastructure
  - Intrusion Set
- description: The indicator query for all the entity_b results. The indicators that
    are the results of the query will be used as the destination of the relationship.
    For example type:ip AND tags:mytag. For more query examples, see https://docs-cortex.paloaltonetworks.com/r/Cortex-XSOAR/6.10/Cortex-XSOAR-Administrator-Guide/Indicators
    This argument cannot be used in conjunction with the entity_b argument or the
    entity_b_type argument.
  name: entity_b_query
- auto: PREDEFINED
  defaultValue: related-to
  description: The name of relationship to be created.
  name: relationship
  predefined:
  - applied
  - attachment-of
  - attaches
  - attribute-of
  - attributed-by
  - attributed-to
  - authored-by
  - beacons-to
  - bundled-in
  - bundles
  - communicated-with
  - communicated-by
  - communicates-with
  - compromises
  - contains
  - controls
  - created-by
  - creates
  - delivered-by
  - delivers
  - downloads
  - downloads-from
  - dropped-by
  - drops
  - duplicate-of
  - embedded-in
  - embeds
  - executed
  - executed-by
  - exfiltrates-to
  - exploits
  - has
  - hosted-on
  - hosts
  - impersonates
  - indicated-by
  - indicator-of
  - injected-from
  - injects-into
  - investigates
  - is-also
  - located-at
  - mitigated-by
  - mitigates
  - originated-from
  - owned-by
  - owns
  - part-of
  - related-to
  - remediates
  - resolved-by
  - resolved-from
  - resolves-to
  - seen-on
  - sent
  - sent-by
  - sent-from
  - sent-to
  - similar-to
  - sub-domain-of
  - supra-domain-of
  - subtechnique-of
  - parent-technique-of
  - targeted-by
  - targets
  - Types
  - uploaded-to
  - used-by
  - used-on
  - uses
  - variant-of
  - detects
  - detected-by
  required: true
- auto: PREDEFINED
  description: The reverse name of relationship to be created. If the argument isn't
    provided by the user, the default reverse relation will be created.
  name: reverse_relationship
  predefined:
  - applied
  - attachment-of
  - attaches
  - attribute-of
  - attributed-by
  - attributed-to
  - authored-by
  - beacons-to
  - bundled-in
  - bundles
  - communicated-with
  - communicated-by
  - communicates-with
  - compromises
  - contains
  - controls
  - created-by
  - creates
  - delivered-by
  - delivers
  - downloads
  - downloads-from
  - dropped-by
  - drops
  - duplicate-of
  - embedded-in
  - embeds
  - executed
  - executed-by
  - exfiltrates-to
  - exploits
  - has
  - hosted-on
  - hosts
  - impersonates
  - indicated-by
  - indicator-of
  - injected-from
  - injects-into
  - investigates
  - is-also
  - mitigated-by
  - mitigates
  - originated-from
  - owned-by
  - owns
  - part-of
  - related-to
  - remediates
  - resolved-by
  - resolved-from
  - resolves-to
  - seen-on
  - sent
  - sent-by
  - sent-from
  - sent-to
  - similar-to
  - sub-domain-of
  - supra-domain-of
  - subtechnique-of
  - parent-technique-of
  - targeted-by
  - targets
  - Types
  - uploaded-to
  - used-by
  - used-on
  - uses
  - variant-of
  - detects
  - detected-by
- auto: PREDEFINED
  defaultValue: A - Completely reliable
  description: Reliability of the source providing the intelligence data.
  name: source_reliability
  predefined:
  - A - Completely reliable
  - B - Usually reliable
  - C - Fairly reliable
  - D - Not usually reliable
  - E - Unreliable
  - F - Reliability cannot be judged
- description: Free text description to add to the relationship.
  name: description
- description: 'The time the relationship was seen. If left empty, the default value
    will be the time the relationship was created. Format (YYYY-MM-DDTHH:MM:SSZ).
    For example: 2020-02-02T19:00:00Z'
  name: first_seen
- auto: PREDEFINED
  defaultValue: "false"
  description: True, if the non-existing indicators will be created according to the
    specified entities and their types. Default is false.
  name: create_indicator
  predefined:
  - "true"
  - "false"
comment: This automation creates a relationship between indicator objects.
commonfields:
  id: CreateIndicatorRelationship
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.2.0
    itemVersion: 1.32.41
    packID: Base
    packName: Base
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
engineinfo: {}
mainengineinfo: {}
name: CreateIndicatorRelationship
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('CreateIndicatorRelationship', 'start', __line__())
  ### pack version: 1.32.41


  from typing import Tuple



  BRAND = "XSOAR"
  PAGE_SIZE = 2000


  # --------------------------------------------------- Helper functions---------------------------------------------


  def find_indicators_by_query(query: str) -> List[dict]:
      """
      Search indicators in the system using a query.

      :type query: ``str``
      :param query: A query for the searchIndicators command.

      :return: A list of indicators that exist in the system.
      :rtype: ``list``
      """
      indicators: List[dict] = []
      search_indicators = IndicatorsSearcher(query=query, size=PAGE_SIZE)
      for ioc_res in search_indicators:
          fetched_indicators = ioc_res.get('iocs') or []
          indicators.extend({'entity_b': ioc.get('value'), 'entity_b_type': ioc.get('indicator_type')}
                            for ioc in fetched_indicators)

      return indicators


  def remove_existing_entity_b_indicators(entity_b_list: list, entity_b_query: str = '') -> list:
      """
      We would like to send to the createNewIndicator command only unexisting indicators, as a result this function
      checks for existing indicator in the system and removed from entity_b the existing indicators.

      :type entity_b_list: ``list``
      :param entity_b_list: A list of entity_b's arguments to the command.

      :type entity_b_query: ``str``
      :param entity_b_query: A query that has been given to the command.

      :return: A list of entity_b's that do not exist in the system that we will need to add.
      :rtype: ``list``
      """
      entity_b_list_to_remove = entity_b_list[:]
      if entity_b_query:
          return []
      else:
          query = f'value:"{entity_b_list_to_remove[0]}"'
          for entity_b in entity_b_list_to_remove[1:]:
              query += f' or value:"{entity_b}"'
      result_indicators_by_query = find_indicators_by_query(query)
      for indicator in result_indicators_by_query:
          if indicator.get('entity_b') in entity_b_list_to_remove:
              entity_b_list_to_remove.remove(indicator.get('entity_b'))
      return entity_b_list_to_remove


  def create_relation_command_using_query(args: dict) -> List[EntityRelationship]:
      relationships = []
      indicators = find_indicators_by_query(args.get('entity_b_query', ''))
      for indicator in indicators:
          relationships.append(create_relationship(name=args.get('relationship', ''), entity_a=args.get('entity_a', ''),
                                                   entity_a_type=args.get('entity_a_type', ''),
                                                   entity_b=indicator.get('entity_b', ''),
                                                   entity_b_type=indicator.get('entity_b_type', ''),
                                                   source_reliability=args.get('source_reliability', ''),
                                                   reverse_name=args.get('reverse_relationship', ''),
                                                   first_seen=args.get('first_seen', ''),
                                                   description=args.get('description', '')
                                                   ))
      return relationships


  def create_relationships_with_args(args: dict) -> List[EntityRelationship]:
      relationships = []
      entity_b_list = argToList(args.get('entity_b'))
      for entity_b in entity_b_list:
          relationships.append(create_relationship(name=args.get('relationship', ''), entity_a=args.get('entity_a', ''),
                                                   entity_a_type=args.get('entity_a_type', ''),
                                                   entity_b=entity_b,
                                                   entity_b_type=args.get('entity_b_type', ''),
                                                   source_reliability=args.get('source_reliability', ''),
                                                   reverse_name=args.get('reverse_relationship', ''),
                                                   first_seen=args.get('first_seen', ''),
                                                   description=args.get('description', '')))
      return relationships


  def create_relationship(name: str, entity_a: str, entity_a_type: str, entity_b: str, entity_b_type: str,
                          source_reliability: str = '', reverse_name: str = '', first_seen: str = '',
                          description: str = '') -> EntityRelationship:
      return EntityRelationship(
          name=name,
          reverse_name=reverse_name,
          entity_a=entity_a,
          entity_a_type=entity_a_type,
          entity_b=entity_b,
          entity_b_type=entity_b_type,
          source_reliability=source_reliability,
          brand=BRAND,
          fields={
              "firstSeenBySource": first_seen or datetime.now().isoformat('T'),
              "lastSeenBySource": datetime.now().isoformat('T'),
              "description": description
          }
      )


  # --------------------------------------------------- Main functions---------------------------------------------


  def validate_arguments(args: dict) -> Dict[str, str]:
      """Get the args of the command and validate the arguments.

      :return: raise an error if one of the validations fail.
      :rtype: ``None``
      """
      if len(argToList(args.get('entity_a'))) > 1:
          raise Exception("entity_a is a list, Please insert a single entity_a to create the relationship")
      if len(argToList(args.get('entity_b_type'))) > 1:
          raise Exception("entity_b_type is a list, Please insert a single type to create the relationship")
      if len(argToList(args.get('entity_a_type'))) > 1:
          raise Exception("entity_a_type is a list, Please insert a single type to create the relationship")
      if args.get('entity_b') and args.get('entity_b_type') and args.get('entity_b_query'):
          raise Exception("entity_b_query can not be used with entity_b and/or entity_b_type")
      if not args.get('entity_b_query') and not args.get('entity_b'):
          raise Exception("Missing entity_b in the create relationships")
      if args.get('entity_b') and not args.get('entity_b_type'):
          raise Exception("Missing entity_b_type in the create relationships")

      args['entity_a_type'] = FeedIndicatorType.indicator_type_by_server_version(args.get('entity_a_type'))
      if entity_b_type := args.get('entity_b_type'):
          args['entity_b_type'] = FeedIndicatorType.indicator_type_by_server_version(entity_b_type)
      return args


  def create_indicators(args: dict):
      """
      When the create_indicator argument is set to True, create the new indicator first.

      :type args: ``dict``
      :param args: dict of arguments of the command.

      :return: return a list of errors, empty if no errors.
      :rtype: ``None``
      """
      entity_b_to_create = remove_existing_entity_b_indicators(argToList(args.get('entity_b')),
                                                               args.get('entity_b_query', ''))
      indicators = []
      for entity_b in entity_b_to_create:
          indicator = {
              'value': entity_b,
              'type': args.get('entity_b_type'),
          }
          indicators.append(indicator)
      errors = list()
      for indicator in indicators:
          res = demisto.executeCommand("createNewIndicator", indicator)
          if is_error(res[0]):
              errors.append("Error creating indicator - {}".format(res[0]["Contents"]))
      demisto.debug(
          f"Create Indicators From CreateIndicatorRelationship automation: {len(indicators) - len(errors)}"
          f" indicators were created with values {str(indicators)}"
      )
      if errors:
          demisto.debug(f'Errors were found while creating indicators from CreateIndicatorRelationships automation:'
                        f' {json.dumps(errors, indent=4)}')


  def create_relationships(args: dict) -> Tuple[List[EntityRelationship], str]:
      """
      Create relationships from given arguments.

      :type args: ``dict``
      :param args: dict of arguments of the command.

      :return: relationships object with human readable output.
      :rtype: ``tuple``
      """
      if args.get('entity_b_query'):
          relationships = create_relation_command_using_query(args)
      else:
          relationships = create_relationships_with_args(args)

      if len(relationships) == 1:
          human_readable = f"Relationship for {args.get('entity_a')} was created successfully."
      elif len(relationships) > 1:
          human_readable = f"{str(len(relationships))} Relationships for {args.get('entity_a')} were created successfully."
      else:
          human_readable = f"Relationships were not created for {args.get('entity_a')}."
      return relationships, human_readable


  ''' MAIN FUNCTION '''


  def main():
      try:
          args = validate_arguments(demisto.args())
          if argToBoolean(args.get('create_indicator')):
              create_indicators(args)
          relationships, human_readable = create_relationships(args)
          return_results(CommandResults(readable_output=human_readable, relationships=relationships))
      except Exception as e:
          return_error(f'Failed to execute CreateIndicatorRelationships automation. Error: {str(e)}')


  ''' ENTRY POINT '''

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('CreateIndicatorRelationship', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- basescript
type: python

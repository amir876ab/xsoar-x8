args:
- defaultValue: "0"
  description: Minimum number of lower case characters to include in password.
  name: min_lcase
- defaultValue: "10"
  description: Maximum number of lower case characters to include in password.
  name: max_lcase
- defaultValue: "0"
  description: Minimum number of upper case characters to include in password.
  name: min_ucase
- defaultValue: "10"
  description: Maximum number of upper case characters to include in password.
  name: max_ucase
- defaultValue: "0"
  description: Minimum number of digits to include in password.
  name: min_digits
- defaultValue: "10"
  description: Maximum number of digits to include in password.
  name: max_digits
- defaultValue: "0"
  description: Minimum number of symbols to include in password.
  name: min_symbols
- defaultValue: "10"
  description: Maximum number of symbols to include in password.
  name: max_symbols
- auto: PREDEFINED
  defaultValue: "false"
  description: Enable to see various values as they pass through the function.
  name: debug
  predefined:
  - "true"
  - "false"
comment: "This function generates a password and allows various parameters to customize
  the properties of the password depending on the use case (e.g. password complexity
  requirements).  The default behavior is to generate a password of  *random length*
  including all four character classes (upper, lower, digits, symbols) with at least
  five and at most ten characters per class. \n\nThe min_* values all default to 0.
  This means that if the command is executed in this way:\n!GeneratePassword max_lcase=10\nIt
  is possible that a password of length zero could be generated. It is therefore recommended
  to always include a min_* parameter that matches. \n\nThe debug parameter will print
  certain properties of the command into the WarRoom for easy diagnostics."
commonfields:
  id: GeneratePassword
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.68714
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GeneratePassword
outputs:
- contextPath: NEW_PASSWORD
  description: The new password generated for the user.
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GeneratePassword', 'start', __line__())
  ### pack version: 1.13.16




  import random
  import secrets
  import string

  DEFAULT_MIN = 0
  DEFAULT_MAX = 10

  LOWERCASE_CHARS = string.ascii_lowercase
  UPPERCASE_CHARS = string.ascii_uppercase
  DIGITS = string.digits
  SYMBOLS = "!@#$%^&*()[]+:\"?_><=';/-.,\\|"


  def randomize_number_in_range(min_val: int, max_val: int) -> int:
      n = max(max_val - min_val, 0)
      return secrets.randbelow(n + 1) + min_val


  def print_char_values(pw):
      ascii_values = [ord(char) for char in pw]
      ascii_string = ', '.join(str(value) for value in ascii_values)
      demisto.debug(f"ASCII for password = {ascii_string}")


  def generate_password(args: Dict[str, Any]) -> CommandResults:
      is_debug = argToBoolean(args.get('debug'))
      min_lowercase = arg_to_number(args.get('min_lcase', DEFAULT_MIN))
      max_lowercase = arg_to_number(args.get('max_lcase', DEFAULT_MAX))
      min_uppercase = arg_to_number(args.get('min_ucase', DEFAULT_MIN))
      max_uppercase = arg_to_number(args.get('max_ucase', DEFAULT_MAX))
      min_digits = arg_to_number(args.get('min_digits', DEFAULT_MIN))
      max_digits = arg_to_number(args.get('max_digits', DEFAULT_MAX))
      min_symbols = arg_to_number(args.get('min_symbols', DEFAULT_MIN))
      max_symbols = arg_to_number(args.get('max_symbols', DEFAULT_MAX))

      if min(min_uppercase, min_lowercase, min_digits, min_symbols) < 0:  # type:ignore[type-var,operator]
          raise DemistoException("All numeral arguments must be positive.")

      if sum((min_uppercase, min_lowercase, min_digits, min_symbols)) == 0:  # type:ignore[arg-type]
          raise DemistoException("error: At least one of the following arguments should be above 0: "
                                 "min_uppercase, min_lowercase, min_digits, min_symbols")

      # randomize the amount of characters we get as per parameters
      num_upper = randomize_number_in_range(min_uppercase, max_uppercase)  # type:ignore[arg-type]
      num_lower = randomize_number_in_range(min_lowercase, max_lowercase)  # type:ignore[arg-type]
      num_digits = randomize_number_in_range(min_digits, max_digits)  # type:ignore[arg-type]
      num_symbols = randomize_number_in_range(min_symbols, max_symbols)  # type:ignore[arg-type]

      if num_upper + num_lower + num_digits + num_symbols == 0:
          raise DemistoException("error: insane password. No character length.")

      # start with a blank password
      pw = []

      # iterate through each character class and add
      for _ in range(num_upper):
          pw.append(secrets.choice(UPPERCASE_CHARS))
      for _ in range(num_lower):
          pw.append(secrets.choice(LOWERCASE_CHARS))
      for _ in range(num_digits):
          pw.append(secrets.choice(DIGITS))
      for _ in range(num_symbols):
          pw.append(secrets.choice(SYMBOLS))

      # randomize our new password string
      rpw = ''.join(random.sample(pw, len(pw)))

      if is_debug:
          print_char_values(rpw)

      return CommandResults(
          outputs_prefix="NEW_PASSWORD",
          outputs=rpw,
          readable_output=tableToMarkdown('Newly Generated Password', {'password': rpw})
      )


  def main():  # pragma: no cover
      try:
          args = demisto.args()
          return_results(generate_password(args))
      except Exception as e:
          return_error(str(e))


  if __name__ in ('__builtin__', 'builtins'):  # pragma: no cover
      main()

  register_module_line('GeneratePassword', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python

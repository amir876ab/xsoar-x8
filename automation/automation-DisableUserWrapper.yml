args:
- description: The username of the user to disable.
  name: username
  required: true
- defaultValue: "No"
  description: Whether to run the command. This is used to prevent unwanted calls
    to the command.
  name: approve_action
  predefined:
  - "Yes"
  - "No"
comment: 'This script allows disabling a specified user using one or more of the following
  integrations: SailPointIdentityIQ, ActiveDirectoryQuery, Okta, MicrosoftGraphUser,
  and IAM.'
commonfields:
  id: DisableUserWrapper
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
engineinfo: {}
mainengineinfo: {}
name: DisableUserWrapper
outputs:
- contextPath: IdentityIQ.AccountDisable.active
  description: Indicates the status of account (should be false after request is successfully
    completed).
  type: Boolean
- contextPath: IAM.UserProfile
  description: The user profile.
  type: Unknown
- contextPath: IAM.Vendor.active
  description: Gives the active status of user. Can be true or false.
  type: Boolean
- contextPath: IAM.Vendor.brand
  description: The integration name.
  type: String
- contextPath: IAM.Vendor.details
  description: Tells the user if the API was successful, otherwise provides error
    information.
  type: Unknown
- contextPath: IAM.Vendor.email
  description: The employee email address.
  type: String
- contextPath: IAM.Vendor.errorCode
  description: The HTTP error response code.
  type: Number
- contextPath: IAM.Vendor.errorMessage
  description: The reason the API failed.
  type: String
- contextPath: IAM.Vendor.id
  description: The employee user ID in the app.
  type: String
- contextPath: IAM.Vendor.instanceName
  description: The integration instance name.
  type: Unknown
- contextPath: IAM.Vendor.success
  description: If true, the command was executed successfully.
  type: Boolean
- contextPath: IAM.Vendor.username
  description: The employee username in the app.
  type: String
- contextPath: IAM.Vendor.action
  description: The command name.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('DisableUserWrapper', 'start', __line__())
  ### pack version: 1.13.16



  import traceback


  def create_commands(username: str) -> List[CommandRunner.Command]:
      """Create commands to disable user.

      Args:
          username (str): The username to create disable-user commands with.

      Returns:
          list of CommandRunner.Commands to disable the user.
      """

      commands: list = [
          CommandRunner.Command(
              commands='ad-disable-account',
              args_lst={'username': username}),
          CommandRunner.Command(
              commands='iam-disable-user',
              args_lst={'user-profile': {'user_name': username, 'sAMAccountName': username}}),
          CommandRunner.Command(
              commands='okta-deactivate-user',
              args_lst={'username': username}),
          CommandRunner.Command(
              commands='msgraph-user-account-disable',
              args_lst={'user': username}),
          CommandRunner.Command(
              commands='identityiq-disable-account',
              args_lst={'id': username})]

      return commands


  def disable_user(args: dict):
      """Disable user from supported integrations.

      Will not return errors on un-supported commands unless there is no supported ones.

      args (dict):
          args[approve_action]: Must be yes in order for the command to work.
          args[username]: The username to disable.

      Returns:
          The CommandResults of all the supported commands.
      """
      if not argToBoolean(args.get('approve_action', False)):
          return 'approve_action must be `yes`'
      username = args.get('username')
      if not username:
          raise ValueError('username is not specified')

      command_executors = create_commands(username)
      return CommandRunner.run_commands_with_summary(command_executors)


  ''' MAIN FUNCTION '''


  def main():  # pragma: no cover
      try:
          return_results(disable_user(demisto.args()))
      except Exception as e:
          error_msg = f'Failed to execute DisableUserWrapper. Error: {str(e)}\n {traceback.format_exc()}'
          if 'The commands that run are not supported in this Instance' in str(e):
              error_msg = 'No disable-user supported integrations were found in this instance.'

          return_error(error_msg)


  ''' ENTRY POINT '''

  if __name__ in ('__main__', '__builtin__', 'builtins'):   # pragma: no cover
      main()

  register_module_line('DisableUserWrapper', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- basescript
type: python

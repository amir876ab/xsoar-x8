args:
- description: IP addresses to exclude (separated by commas)
  name: excludedIps
comment: Gets all IP addresses in context, excluding ones given.
commonfields:
  id: ContextGetIps
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ContextGetIps
pswd: ""
runas: DBotWeakRole
runonce: false
script: |+
  // pack version: 1.13.16
  var excludedIps;
  if (args.excludedIps) {
      excludedIps = args.excludedIps.split(',');
  }
  var flat = {};
  var res = [];
  var currentValue;
  flattenFields(invContext,undefined,flat);
  keysArr = Object.keys(flat);
  for (var i = 0; i < keysArr.length; i++) {
      currentValue=flat[keysArr[i]];
      if (ipRegex.test(currentValue) && res.indexOf(currentValue) === -1) {
          if (excludedIps) {
              if (excludedIps.indexOf(currentValue) === -1) {
                  res.push(currentValue);
              }
          } else {
              res.push(currentValue);
          }
      }
  }

  var md = '### IP addresses in context\n';
  for (var i = 0; i<res.length; i++) {
      md += '- ' + res[i] + '\n';
  }
  return {
          Type: entryTypes.note,
          Contents: res,
          ContentsFormat: formats.json,
          HumanReadable: md
          };

scripttarget: 0
system: true
tags: []
type: javascript

args:
- description: The data collection task ID.
  name: task_id
  required: true
- description: The array of users the data collection task was sent to, or that you
    want to send to (If using by task only).
  isArray: true
  name: users
  required: true
comment: |-
  Generates the URL for a Data Collection Task into Context.  Can be used to get the url for tasks send via Email, Slack, or even if you select "By Task Only".

  To generate links for specific users, add an array of users in the users argument.
commonfields:
  id: GetDataCollectionLink
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.5.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.83255
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetDataCollectionLink
outputs:
- contextPath: DataCollectionURL.url
  description: The data collection URL.
  type: String
- contextPath: DataCollectionURL.task
  description: The task ID for the generated URL.
- contextPath: DataCollectionURL.user
  description: The user for which the data collection link was generated.
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GetDataCollectionLink', 'start', __line__())
  ### pack version: 1.13.16


  from base64 import b64encode
  from typing import Any, Dict
  from distutils.version import LooseVersion


  def is_machine_saas() -> bool:
      """
      Checks if the instance is SaaS by checking the demistoVersion.
      """
      demisto_version = demisto.demistoVersion()
      if demisto_version["platform"] == "x2":
          return True
      else:
          return LooseVersion(demisto_version["version"]) >= LooseVersion("8.0.0")


  def generate_url(server_url: str, encoded_task: str, encoded_user: str) -> str:
      """Generates a data collection URL.

      Args:
          server_url: The Demisto server URL.
          encoded_task: The encoded task ID.
          encoded_user: The encoded user ID.

      Returns:
          The data collection URL.
      """
      if is_machine_saas():
          try:
              otp = execute_command("generateOTP", {})
          except Exception as err:
              if "Unsupported Command" in str(err):
                  return f"{server_url}/#/external/form/{encoded_task}/{encoded_user}"
              raise err
          return f"{server_url}/external/form/{encoded_task}/{encoded_user}?otp={otp}"
      return f"{server_url}/#/external/form/{encoded_task}/{encoded_user}"


  def encode_string(value: str) -> str:
      b64 = b64encode(value.encode('ascii'))
      return b64.hex()


  def get_data_collection_url(task_id: str, users: List[str]) -> List[Dict[str, str]]:
      demisto_urls = demisto.demistoUrls()
      server_url = demisto_urls.get('server', '')
      incident_id = demisto.incident().get('id')
      task = f'{incident_id}@{task_id}'
      encoded_task = encode_string(task)
      urls = []

      for user in users:
          encoded_user = encode_string(user)
          urls.append(
              {
                  "user": user,
                  "task": task,
                  "url": generate_url(server_url, encoded_task, encoded_user),
              }
          )
      return urls


  def get_data_collection_url_command(args: Dict[str, Any]) -> CommandResults:  # pragma: no cover
      task_id = args.get('task_id', None)
      if not task_id:
          raise ValueError('task_id not specified')

      users = argToList(args.get('users', []))
      if not users:
          raise ValueError('users not specified')

      result = get_data_collection_url(task_id, users)

      return CommandResults(
          outputs_prefix='DataCollectionURL',
          outputs_key_field='user',
          outputs=result,
          ignore_auto_extract=True
      )


  def main():  # pragma: no cover
      try:
          return_results(get_data_collection_url_command(demisto.args()))
      except Exception as ex:
          return_error(f'Failed to execute GetDataCollectionLink. Error: {str(ex)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('GetDataCollectionLink', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python

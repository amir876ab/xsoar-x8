args:
- default: true
  description: The first list (or CSV string).
  isArray: true
  name: value
  required: true
- description: The second list (or CSV string).
  isArray: true
  name: list2
  required: true
- defaultValue: =
  description: Separator.
  name: join
  required: true
comment: Returns the product of two lists, joined by a separator, as a list of strings.
commonfields:
  id: ProductJoin
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.2.51
    packID: FiltersAndTransformers
    packName: Filters And Transformers
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.83255
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ProductJoin
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ProductJoin', 'start', __line__())
  ### pack version: 1.2.51


  from itertools import product


  def parse_list(lst):
      if isinstance(lst, list):  # handle list
          if len(lst) == 1:
              lst = str(lst[0]).split(',')
      else:
          lst = str(lst).split(',')

      return map(lambda _: str(_).strip(), lst)  # clean and convert to str for join


  def product_join(args):
      sep = args.get('join')
      list1 = parse_list(args.get('value'))
      list2 = parse_list(args.get('list2'))

      ret = []
      for item in product(list1, list2):
          ret.append(sep.join(item))

      return ret


  def main(args):
      demisto.results(product_join(args))


  if __name__ in ('builtins', '__builtin__'):
      main(demisto.args())

  register_module_line('ProductJoin', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- transformer
- general
- entirelist
type: python

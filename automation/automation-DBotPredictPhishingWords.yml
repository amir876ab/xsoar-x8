args:
- description: The model name (or list name) in Demisto.
  name: modelName
  required: true
- description: Seed for the hash function, at the pre-process stage.
  name: hashSeed
- description: Subject of the email.
  isArray: true
  name: emailSubject
- description: Body of the email.
  isArray: true
  name: emailBody
- description: HTML body of the email. Only use this field if the emailBody argument
    is empty.
  isArray: true
  name: emailBodyHTML
- defaultValue: "20"
  description: Maximum number of positive/negative words to return for the model decision.
    Default is 20.
  name: topWordsLimit
- defaultValue: "0.05"
  description: Threshold to determine word importance (range 0-1). Default is 0.05.
  name: wordThreshold
- auto: PREDEFINED
  defaultValue: list
  description: How the model is stored in Demisto. Can be "list" or "mlModel". Default
    is "list".
  name: modelStoreType
  predefined:
  - list
  - mlModel
- defaultValue: "5"
  description: Minimum number of characters for the prediction.
  name: minTextLength
- defaultValue: "0.8"
  description: The label probability threshold. Default is 0.8.
  name: labelProbabilityThreshold
- description: The confidence threshold. The model will provide predictions only if
    their confidence is above this threshold.
  name: confidenceThreshold
- auto: PREDEFINED
  defaultValue: "false"
  description: Whether to return an error when there is no prediction. Default is
    "true".
  name: returnError
  predefined:
  - "true"
  - "false"
- auto: PREDEFINED
  defaultValue: "false"
  description: Whether to set Demisto out-of-the-box DBot fields.
  name: setIncidentFields
  predefined:
  - "true"
  - "false"
- auto: PREDEFINED
  defaultValue: Any
  description: The language of the input text. Default is "Any". Can be "Any", "English",
    "German", "French", "Spanish", "Portuguese", "Italian", "Dutch", or "Other". If
    "Any"  or "Other" is selected, the script preprocess the entire input, no matter
    what its acutual language is. If a specific language is selected, the script filters
    out any other language from the output text.
  name: language
  predefined:
  - Any
  - English
  - German
  - French
  - Spanish
  - Portuguese
  - Italian
  - Dutch
  - Other
- auto: PREDEFINED
  defaultValue: tokenizer
  description: Tokenization method for text. Only required when the language argument
    is set to "Other". Can be "tokenizer", "byWords", or "byLetters".
  name: tokenizationMethod
  predefined:
  - tokenizer
  - byWords
  - byLetters
comment: Predict text label using a pre-trained machine learning phishing model, and
  get the most important words used in the classification decision.
commonfields:
  id: DBotPredictPhishingWords
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.32.47
    packID: Base
    packName: Base
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/ml:1.0.0.32340
engineinfo: {}
mainengineinfo: {}
name: DBotPredictPhishingWords
outputs:
- contextPath: DBotPredictPhishingWords.Label
  description: The predicted label.
  type: String
- contextPath: DBotPredictPhishingWords.Probability
  description: The predicted probability (range 0-1).
  type: Number
- contextPath: DBotPredictPhishingWords.PositiveWords
  description: A list of words in the input text that supports the model decision.
  type: Unknown
- contextPath: DBotPredictPhishingWords.NegativeWords
  description: A list of words in the input text that do not support the model decision.
    These words better support a different classification class.
  type: Unknown
- contextPath: DBotPredictPhishingWords.TextTokensHighlighted
  description: The input text (after pre-processing) with the positive words that
    support the model decision.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: true
script: |
  register_module_line('DBotPredictPhishingWords', 'start', __line__())
  ### pack version: 1.32.47
  # pylint: disable=no-member


  from string import punctuation
  import demisto_ml
  import numpy as np

  FASTTEXT_MODEL_TYPE = 'FASTTEXT_MODEL_TYPE'
  TORCH_TYPE = 'torch'
  UNKNOWN_MODEL_TYPE = 'UNKNOWN_MODEL_TYPE'


  def OrderedSet(iterable):
      return list(dict.fromkeys(iterable))


  def get_model_data(model_name, store_type, is_return_error):
      res_model_list = demisto.executeCommand("getList", {"listName": model_name})[0]
      res_model = demisto.executeCommand("getMLModel", {"modelName": model_name})[0]
      if is_error(res_model_list) and not is_error(res_model):
          model_data = res_model['Contents']['modelData']
          try:
              model_type = res_model['Contents']['model']["type"]["type"]
              return model_data, model_type
          except Exception:
              return model_data, UNKNOWN_MODEL_TYPE
      elif not is_error(res_model_list) and is_error(res_model):
          return res_model_list["Contents"], UNKNOWN_MODEL_TYPE
      elif not is_error(res_model_list) and not is_error(res_model):
          if store_type == "list":
              return res_model_list["Contents"], UNKNOWN_MODEL_TYPE
          elif store_type == "mlModel":
              model_data = res_model['Contents']['modelData']
              model_type = res_model['Contents']['model']["type"]["type"]
              return model_data, model_type
      else:
          handle_error("error reading model %s from Demisto" % model_name, is_return_error)


  def handle_error(message, is_return_error):
      if is_return_error:
          return_error(message)
      else:
          demisto.results(message)
          sys.exit(0)


  def preprocess_text(text, model_type, is_return_error):
      if model_type in [FASTTEXT_MODEL_TYPE, UNKNOWN_MODEL_TYPE]:
          preprocess_type = 'nlp'
          hash_seed = demisto.args().get('hashSeed')
          clean_html = 'true'
      elif model_type == TORCH_TYPE:
          preprocess_type = 'none'
          hash_seed = None
          clean_html = 'false'
      if isinstance(text, str):
          input_type = 'string'
          input_ = text
      elif isinstance(text, list):
          input_type = 'json_string'
          input_ = json.dumps(text)
      language = demisto.args().get('language', 'English')
      tokenization = demisto.args().get('tokenizationMethod', 'tokenizer')
      args = {'input': input_,
              'hashSeed': hash_seed,
              'language': language,
              'tokenizationMethod': tokenization,
              'inputType': input_type,
              'preProcessType': preprocess_type,
              'dedupThreshold': '-1',
              'outputFormat': 'json',
              'textFields': 'text',
              'removeShortTextThreshold': '-1',
              'cleanHTML': clean_html}
      res = demisto.executeCommand('DBotPreProcessTextData', args)
      if is_error(res):
          handle_error(res[0]['Contents'], is_return_error)
      if isinstance(text, list):
          return [x['dbot_processed_text'] for x in json.loads(res[0]['Contents'])]
      elif isinstance(text, str):
          tokenized_text_result = res[0]['Contents']
          input_text = tokenized_text_result['hashedTokenizedText'] if tokenized_text_result.get(
              'hashedTokenizedText') else \
              tokenized_text_result['tokenizedText']
          if tokenized_text_result.get('hashedTokenizedText'):
              words_to_token_maps = tokenized_text_result['wordsToHashedTokens']
          else:
              words_to_token_maps = tokenized_text_result['originalWordsToTokens']
          return input_text, words_to_token_maps


  def predict_phishing_words(model_name, model_store_type, email_subject, email_body, min_text_length, label_threshold,
                             word_threshold, top_word_limit, is_return_error, set_incidents_fields=False):
      model_data, model_type = get_model_data(model_name, model_store_type, is_return_error)
      if model_type.strip() == '' or model_type.strip() == 'Phishing':
          model_type = FASTTEXT_MODEL_TYPE
      if model_type not in [FASTTEXT_MODEL_TYPE, TORCH_TYPE, UNKNOWN_MODEL_TYPE]:
          model_type = UNKNOWN_MODEL_TYPE
      phishing_model = demisto_ml.phishing_model_loads_handler(model_data, model_type)
      is_model_applied_on_a_single_incidents = isinstance(email_subject, str) and isinstance(email_body, str)
      if is_model_applied_on_a_single_incidents:
          return predict_single_incident_full_output(email_subject, email_body, is_return_error, label_threshold,
                                                     min_text_length,
                                                     model_type, phishing_model, set_incidents_fields, top_word_limit,
                                                     word_threshold)
      else:
          return predict_batch_incidents_light_output(email_subject, email_body, phishing_model, model_type,
                                                      min_text_length)


  def predict_batch_incidents_light_output(email_subject, email_body, phishing_model, model_type, min_text_length):
      text_list = [{'text': "%s \n%s" % (subject, body)} for subject, body in zip(email_subject, email_body)]
      preprocessed_text_list = preprocess_text(text_list, model_type, is_return_error=False)
      batch_predictions = []
      for input_text in preprocessed_text_list:
          incident_res = {'Label': -1, 'Probability': -1, 'Error': ''}
          filtered_text, filtered_text_number_of_words = phishing_model.filter_model_words(input_text)
          if filtered_text_number_of_words == 0:
              incident_res['Error'] = "The model does not contain any of the input text words"
          elif filtered_text_number_of_words < min_text_length:
              incident_res['Error'] = "The model contains fewer than %d words" % min_text_length
          else:
              pred = phishing_model.predict(input_text)
              incident_res['Label'] = pred[0]
              prob = pred[1]
              if isinstance(prob, np.floating):
                  prob = prob.item()
              incident_res['Probability'] = prob
          batch_predictions.append(incident_res)
      return {
          'Type': entryTypes['note'],
          'Contents': batch_predictions,
          'ContentsFormat': formats['json'],
          'HumanReadable': 'Applied predictions on {} incidents.'.format(len(batch_predictions)),
      }


  def predict_single_incident_full_output(email_subject, email_body, is_return_error, label_threshold, min_text_length,
                                          model_type, phishing_model, set_incidents_fields, top_word_limit,
                                          word_threshold):
      text = "%s \n%s" % (email_subject, email_body)
      input_text, words_to_token_maps = preprocess_text(text, model_type, is_return_error)
      filtered_text, filtered_text_number_of_words = phishing_model.filter_model_words(input_text)
      if filtered_text_number_of_words == 0:
          handle_error("The model does not contain any of the input text words", is_return_error)
      if filtered_text_number_of_words < min_text_length:
          handle_error("The model contains fewer than %d words" % min_text_length, is_return_error)

      explain_result = phishing_model.explain_model_words(
          input_text,
          0,
          word_threshold,
          top_word_limit
      )
      explain_result['Probability'] = float(explain_result["Probability"])
      predicted_prob = explain_result["Probability"]
      if predicted_prob < label_threshold:
          handle_error("Label probability is {:.2f} and it's below the input confidence threshold".format(
              predicted_prob), is_return_error)

      positive_tokens = OrderedSet(explain_result['PositiveWords'])
      negative_tokens = OrderedSet(explain_result['NegativeWords'])
      positive_words = find_words_contain_tokens(positive_tokens, words_to_token_maps)
      negative_words = find_words_contain_tokens(negative_tokens, words_to_token_maps)
      positive_words = list(OrderedSet([s.strip(punctuation) for s in positive_words]))
      negative_words = list(OrderedSet([s.strip(punctuation) for s in negative_words]))
      positive_words = [w for w in positive_words if w.isalnum()]
      negative_words = [w for w in negative_words if w.isalnum()]
      highlighted_text_markdown = text.strip()
      for word in positive_words:
          for cased_word in [word.lower(), word.title(), word.upper()]:
              highlighted_text_markdown = re.sub(r'(?<!\w)({})(?!\w)'.format(cased_word), '**{}**'.format(cased_word),
                                                 highlighted_text_markdown)
      highlighted_text_markdown = re.sub(r'\n+', '\n', highlighted_text_markdown)
      explain_result['PositiveWords'] = [w.lower() for w in positive_words]
      explain_result['NegativeWords'] = [w.lower() for w in negative_words]
      explain_result['OriginalText'] = text.strip()
      explain_result['TextTokensHighlighted'] = highlighted_text_markdown
      predicted_label = explain_result["Label"]
      explain_result_hr = dict()
      explain_result_hr['TextTokensHighlighted'] = highlighted_text_markdown
      explain_result_hr['Label'] = predicted_label
      explain_result_hr['Probability'] = "%.2f" % predicted_prob
      explain_result_hr['Confidence'] = "%.2f" % predicted_prob
      explain_result_hr['PositiveWords'] = ", ".join([w.lower() for w in positive_words])
      explain_result_hr['NegativeWords'] = ", ".join([w.lower() for w in negative_words])
      incident_context = demisto.incidents()[0]
      if not incident_context['isPlayground'] and set_incidents_fields:
          demisto.executeCommand("setIncident", {'dbotprediction': predicted_label,
                                                 'dbotpredictionprobability': predicted_prob,
                                                 'dbottextsuggestionhighlighted': highlighted_text_markdown})
      return {
          'Type': entryTypes['note'],
          'Contents': explain_result,
          'ContentsFormat': formats['json'],
          'HumanReadable': tableToMarkdown('DBot Predict Phishing Words', explain_result_hr,
                                           headers=['TextTokensHighlighted', 'Label', 'Confidence',
                                                    'PositiveWords', 'NegativeWords'],
                                           removeNull=True),
          'HumanReadableFormat': formats['markdown'],
          'EntryContext': {
              'DBotPredictPhishingWords': explain_result
          }
      }


  def find_words_contain_tokens(positive_tokens, words_to_token_maps):
      positive_words = []
      for word, word_in_tokens_list in words_to_token_maps.items():
          if any(token in positive_tokens for token in word_in_tokens_list):
              positive_words.append(word)
      return positive_words


  def try_get_incident_field(field):
      value = ''
      incident = demisto.incident()
      if 'CustomFields' in incident and incident['CustomFields'] is not None and field in incident['CustomFields']:
          value = incident['CustomFields'][field]
      return value


  def main():
      confidence_threshold = 0
      confidence_threshold = float(demisto.args().get("labelProbabilityThreshold", confidence_threshold))
      confidence_threshold = float(demisto.args().get("confidenceThreshold", confidence_threshold))
      email_subject = demisto.args().get('emailSubject', '')
      email_body = demisto.args().get('emailBody', '') or demisto.args().get('emailBodyHTML', '')
      if email_subject == '':
          email_subject = try_get_incident_field(field='emailsubject')
      if email_body == '':
          email_body = try_get_incident_field(field='emailbody')
      result = predict_phishing_words(demisto.args()['modelName'],
                                      demisto.args()['modelStoreType'],
                                      email_subject,
                                      email_body,
                                      int(demisto.args()['minTextLength']),
                                      confidence_threshold,
                                      float(demisto.args().get('wordThreshold', 0)),
                                      int(demisto.args()['topWordsLimit']),
                                      demisto.args()['returnError'] == 'true',
                                      demisto.args().get('setIncidentFields', 'false') == 'true'
                                      )

      return result


  if __name__ in ['__main__', '__builtin__', 'builtins']:
      demisto.results(main())

  register_module_line('DBotPredictPhishingWords', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- ml
- phishing
timeout: 16h40m0s
type: python

comment: After running DeleteContext, this script can repopulate all the file entries
  in the ${File} context key
commonfields:
  id: RepopulateFiles
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: RepopulateFiles
outputs:
- contextPath: File.Name
  description: Filename
- contextPath: File.Type
  description: File type
- contextPath: File.Size
  description: File size
- contextPath: File.MD5
  description: MD5 hash of the file
- contextPath: File.SHA1
  description: SHA1 hash of the file
- contextPath: File.SHA256
  description: SHA256 hash of the file
- contextPath: File.SHA512
  description: SHA512 hash of the file
- contextPath: File.EntryID
  description: EntryID of the file
- contextPath: File.Info
  description: File information
- contextPath: File.Extension
  description: File extension
- contextPath: File.SSDeep
  description: SSDeep hash of the file
- contextPath: AttachmentFile.Name
  description: Filename of incident attachments
- contextPath: AttachmentFile.Type
  description: File type of incident attachments
- contextPath: AttachmentFile.Size
  description: File size of incident attachments
- contextPath: AttachmentFile.MD5
  description: MD5 hash of the file of incident attachments
- contextPath: AttachmentFile.SHA1
  description: SHA1 hash of the file of incident attachments
- contextPath: AttachmentFile.SHA256
  description: SHA256 hash of the file of incident attachments
- contextPath: AttachmentFile.SHA512
  description: SHA512 hash of the file of incident attachments
- contextPath: AttachmentFile.EntryID
  description: EntryID of the file of incident attachments
- contextPath: AttachmentFile.Info
  description: File information of incident attachments
- contextPath: AttachmentFile.Extension
  description: File extension of incident attachments
- contextPath: AttachmentFile.SSDeep
  description: SSDeep hash of the file of incident attachments
- contextPath: AttachmentFile.Attachment.description
  description: File description
- contextPath: AttachmentFile.Attachment.name
  description: File name
- contextPath: AttachmentFile.Attachment.path
  description: File path
- contextPath: AttachmentFile.Attachment.showMediaFile
  description: showMediaFile
- contextPath: AttachmentFile.Attachment.type
  description: File content type
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('RepopulateFiles', 'start', __line__())
  ### pack version: 1.13.16


  import os
  import hashlib
  from typing import List, Dict, Optional, Any


  def parse_attachment_entries(entries):
      # list -> list
      """Parse the attachments entries.

      Args:
          entries: entries of attachments.

      Returns:
          List of entry context dict containing the attachments metadata.
      """
      entry_context = []
      for entry in entries:
          if entry.get('File') and entry.get('FileMetadata'):
              name, ext = os.path.splitext(entry['File'])
              entry_context.append(assign_params(
                  Name=entry['File'],
                  MD5=entry['FileMetadata'].get('md5'),
                  SHA1=entry['FileMetadata'].get('sha1'),
                  SHA256=entry['FileMetadata'].get('sha256'),
                  SHA512=entry['FileMetadata'].get('sha512'),
                  SSDeep=entry['FileMetadata'].get('ssdeep'),
                  Size=entry['FileMetadata'].get('size'),
                  Info=entry['FileMetadata'].get('info'),
                  Type=entry['FileMetadata'].get('type'),
                  Extension=ext[1:] if ext else '',
                  EntryID=entry['ID']
              ))
      return entry_context


  def find_attachment_entry(file_ents: List[Dict[str, Any]], attachment_ent: Dict[str, Any]) -> Optional[Dict[str, Any]]:
      """
      Find an incident attachment entry

      :param file_ents: A list of file entries
      :param attachment_ent: An entry of an incident attachment file
      :return: An file entry to which the attachment is correspond.
      """
      # Extract the File ID
      path = attachment_ent.get('path')
      if not path:
          demisto.debug('Key not found: path')
          return None

      m = re.search(r'[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}', path)
      if not m:
          demisto.debug(f'Failed to get file ID for {path}')
          return None

      # Compute hash values
      try:
          hash_table = {}
          file = demisto.getFilePath(m.group())
          for alg in ['SHA512', 'SHA256', 'SHA1', 'MD5']:
              with open(file['path'], 'rb') as f:
                  hobj = hashlib.new(alg)
                  for chunk in iter(lambda: f.read(hobj.block_size * 4096), b''):
                      hobj.update(chunk)
                  hash_table[alg] = hobj.hexdigest().lower()
      except Exception as e:
          demisto.debug(str(e))
          return None

      # Find the attachment entry
      for file_ent in file_ents:
          for alg, hval in hash_table.items():
              if file_ent.get(alg, '').lower() == hval:
                  # Update hash entries
                  file_ent.update(hash_table)
                  return file_ent
      return None


  def main():
      """Repopulate the incident context with the attachments metadata.

      Returns:
          Demisto entry.
      """
      entries = demisto.executeCommand(
          'getEntries',
          {
              'filter': {
                  'categories': ['attachments']
              }
          }
      )
      if is_error(entries):
          return_error(get_error(entries))
      if isinstance(entries, list):
          war_attachment_ents = parse_attachment_entries(entries)
          inc_attachment_ents = []
          for ent in demisto.incident().get('attachment') or []:
              inc_attachment_ent = find_attachment_entry(war_attachment_ents, ent)
              if inc_attachment_ent:
                  inc_attachment_ents.append(dict(inc_attachment_ent, Attachment=ent))

          entry_context = {outputPaths['file']: war_attachment_ents}
          if inc_attachment_ents:
              entry_context['AttachmentFile(val.MD5 && val.MD5 == obj.MD5 || val.SHA1 && val.SHA1 == obj.SHA1 || '
                            'val.SHA256 && val.SHA256 == obj.SHA256 || val.SHA512 && val.SHA512 == obj.SHA512 || '
                            'val.SSDeep && val.SSDeep == obj.SSDeep)'] = inc_attachment_ents

          return_outputs('Done', entry_context, war_attachment_ents)
      else:
          return_outputs('No attachments were found.')


  if __name__ in ["__builtin__", "builtins"]:
      main()

  register_module_line('RepopulateFiles', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python

args:
- default: true
  description: The HTML to strip tags from.
  name: html
  required: true
- default: true
  defaultValue: body
  description: Specify HTML tag to extract the text from within.
  name: html_tag
- auto: PREDEFINED
  default: true
  defaultValue: "false"
  description: Allow using the input HTML as a fallback for the body, if no body tag
    is found. This only applies, if html_tag is set to body.
  name: allow_body_fallback
  predefined:
  - "true"
  - "false"
- auto: PREDEFINED
  default: true
  defaultValue: "false"
  description: Replace `br` in `html` with linebreaks in the output.
  name: replace_line_breaks
  predefined:
  - "true"
  - "false"
- auto: PREDEFINED
  default: true
  defaultValue: "false"
  description: Trim the extracted result. When set to true, leading and trailing whitespaces
    are removed and blocks of more than 3 consecutive whitespaces are collapsed to
    two.
  name: trim_result
  predefined:
  - "true"
  - "false"
- auto: PREDEFINED
  default: true
  defaultValue: "false"
  description: Store the extracted text in context.
  name: output_to_context
  predefined:
  - "true"
  - "false"
comment: Extract regular text from the given HTML.
commonfields:
  id: TextFromHTML
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.75921
enabled: true
engineinfo: {}
mainengineinfo: {}
name: TextFromHTML
outputs:
- contextPath: TextFromHTML
  description: The Text extracted from the given HTML.
  type: string
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('TextFromHTML', 'start', __line__())
  ### pack version: 1.13.16




  import re


  def get_plain_text(html: str, replace_line_breaks: bool, trim_result: bool):
      data = ''
      if html:
          data = re.sub(r'<\/?br\s?\/?>', '\n', html, flags=re.I) if replace_line_breaks else html

          data = re.sub(r'<.*?>', '', data)
          entities = {'quot': '"', 'amp': '&', 'apos': "'", 'lt': '<', 'gt': '>', 'nbsp': ' ',
                      'copy': '(C)', 'reg': '(R)', 'tilde': '~', 'ldquo': '"', 'rdquo': '"', 'hellip': '...'}
          for e in entities:
              data = data.replace(f'&{e};', entities[e])

          if trim_result:
              data = re.sub(r'[ \t]{2,}', ' ', data)
              data = re.sub(r'(\s*\r?\n){3,}', '\n\n', data)
              data = data.strip()
      return data


  def get_body(html: str, html_tag: str, allow_fallback: bool = False):
      if html and html_tag:
          body = re.search(fr'<{html_tag}.*/{html_tag}>', html, re.M + re.S + re.I + re.U)

          if body and body.group(0):
              return body.group(0)
          elif allow_fallback and html_tag.lower() == 'body':
              return html
      return ''


  def main():  # pragma: no cover
      try:
          args = demisto.args()
          html = args['html']
          html_tag = args.get('html_tag', 'body')
          allow_fallback = argToBoolean(args.get('allow_body_fallback', 'false'))
          replace_line_breaks = argToBoolean(args.get('replace_line_breaks', 'false'))
          trim_result = argToBoolean(args.get('trim_result', 'false'))
          context_path = argToBoolean(demisto.args().get('output_to_context', 'false'))

          body = get_body(html, html_tag, allow_fallback)
          text = get_plain_text(body, replace_line_breaks, trim_result)
          text = text if text != '' else 'Could not extract text'

          result = CommandResults(
              outputs_prefix='TextFromHTML',
              outputs=text if context_path else None,
              raw_response=text,
              readable_output=text,
          )

          return_results(result)
      except Exception as ex:
          return_error(message="Failed to extract text", error=ex)


  if __name__ in ["__builtin__", "builtins"]:
      main()

  register_module_line('TextFromHTML', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python

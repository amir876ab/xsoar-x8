args:
- description: An array of email addresses to be filtered by domain.
  isArray: true
  name: value
  required: true
- description: An array of domains to block list.
  isArray: true
  name: domain_list
  required: true
comment: Accepts an array of domains as a block list, and a list of email addresses.
  The script then filters out any email address whose domain is in the block list.  The
  filtered list will be returned as an array.
commonfields:
  id: EmailDomainBlacklist
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.2.51
    packID: FiltersAndTransformers
    packName: Filters And Transformers
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.83255
enabled: true
engineinfo: {}
mainengineinfo: {}
name: EmailDomainBlacklist
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('EmailDomainBlacklist', 'start', __line__())
  ### pack version: 1.2.51



  def csv_string_to_list(v):
      if type(v) == str:  # requires python3
          return v.lower().replace(' ', '').replace('\n', '').split(',')
      v = [val.lower() for val in v]
      return v


  def main():
      DOMAIN_LIST = csv_string_to_list(demisto.args()['domain_list'])
      EMAIL_ADDRESSES = csv_string_to_list(demisto.args()['value'])

      filtered_addresses = []

      for address in EMAIL_ADDRESSES:
          [user, domain] = address.split('@')

          if domain not in DOMAIN_LIST:
              filtered_addresses.append(address)

      if len(filtered_addresses) != 0:
          demisto.results(filtered_addresses)
      else:
          demisto.results(None)


  if __name__ == "__builtin__" or __name__ == "builtins":
      main()

  register_module_line('EmailDomainBlacklist', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- transformer
- general
- entirelist
type: python

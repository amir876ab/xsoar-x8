args:
- description: The War-Room entryID of the file to read.
  name: entryID
  required: true
- description: Maximal file size to load, in bytes. Default is 1000000 (1MB).
  name: maxFileSize
comment: |-
  Extract indicators from a text-based file.
  Indicators that can be extracted:
  * IP
  * Domain
  * URL
  * File Hash
  * Email Address

  This automation runs using the default Limited User role, unless you explicitly change the permissions.
  For more information, see the section about permissions here:
  https://docs-cortex.paloaltonetworks.com/r/Cortex-XSOAR/6.10/Cortex-XSOAR-Administrator-Guide/Automations
commonfields:
  id: ExtractIndicatorsFromTextFile
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.12.47
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ExtractIndicatorsFromTextFile
outputs:
- contextPath: Domain.Name
  description: Extracted domains
  type: string
- contextPath: Account.Email.Address
  description: Extracted emails
  type: string
- contextPath: File.MD5
  description: Extracted MD5
  type: string
- contextPath: File.SHA1
  description: Extracted SHA1
  type: string
- contextPath: File.SHA256
  description: Extracted SHA256
  type: string
- contextPath: IP.Address
  description: Extracted IPs
  type: string
- contextPath: URL.Data
  description: Extracted URLs
  type: string
pswd: ""
runas: DBotRole
runonce: false
script: |
  register_module_line('ExtractIndicatorsFromTextFile', 'start', __line__())
  ### pack version: 1.12.47



  import json


  def string_to_markdown(indicators: str) -> str:
      """
      Converts the JSON to a human-readable markdown structure

      Args:
          indicators (str): JSON of the indicators extracted by the server as a string.

      Returns:
          str: Markdown list of the indicators extracted
      """
      try:
          indicators_dict = json.loads(indicators)

          md = ''

          for key, values in indicators_dict.items():
              md += f"### {key}\n"

              for value in values:
                  md += f"- {value}\n"

      except json.JSONDecodeError:
          demisto.error(f'JSON Decode failed on "{indicators}"')
          md = f'JSON Decode failed on "{indicators}"'

      return md


  def read_file_with_encoding_detection(filePath, maxFileSize):
      encoding_types = ['utf-8', 'ISO-8859-9']
      for encoding in encoding_types:
          try:
              with open(filePath, encoding=encoding) as file:
                  return file.read(maxFileSize)
          except Exception:
              continue

      raise ValueError(f'Can\'t read file with {filePath}')


  def extract_indicators_from_file(args):
      try:
          maxFileSize = int(args.get('maxFileSize'))
      except Exception:
          maxFileSize = 1024 ** 2

      res = demisto.executeCommand('getFilePath', {
          'id': args.get('entryID')
      })

      try:
          filePath = res[0]['Contents']['path']
      except Exception:
          raise FileNotFoundError

      data = read_file_with_encoding_detection(filePath, maxFileSize)

      # Extract indicators (omitting context output, letting auto-extract work)
      indicators_hr = demisto.executeCommand("extractIndicators", {
          'text': data})[0][u'Contents']
      return {
          'Type': entryTypes['note'],
          'ContentsFormat': formats['text'],
          'Contents': indicators_hr,
          'HumanReadable': string_to_markdown(indicators_hr)
      }


  def main():
      try:
          args = demisto.args()
          demisto.results(extract_indicators_from_file(args))
      except FileNotFoundError:
          return_error("File was not found")


  if __name__ in ['__main__', 'builtin', 'builtins']:
      main()

  register_module_line('ExtractIndicatorsFromTextFile', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python

args:
- default: true
  description: The data for which to calculate entropy.
  name: data
  required: true
- defaultValue: "0"
  description: The minimum entropy value. Default is 0.
  name: minimum_entropy
comment: Calculates the entropy for the given data.
commonfields:
  id: CalculateEntropy
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
engineinfo: {}
mainengineinfo: {}
name: CalculateEntropy
outputs:
- contextPath: EntropyResult.checked_value
  description: The given value (data).
  type: String
- contextPath: EntropyResult.entropy
  description: The entropy score.
  type: Number
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('CalculateEntropy', 'start', __line__())
  ### pack version: 1.13.16



  import math
  import string


  def calculate_shannon_entropy(data, minimum_entropy):
      """Algorithm to determine the randomness of a given data.
      Higher is more random/complex, most English words will yield in average result of 3
      Args:
          data (str): The data to calculate entropy on.
          minimum_entropy (float): The minimum entropy.
      Returns:
          (str, dict, dict). Human readable, context, raw response
      """
      entropy = 0.0
      # each unicode code representation of all characters which are considered printable
      for char in (ord(c) for c in string.printable):
          # probability of event X
          p_x = float(data.count(chr(char))) / len(data)
          if p_x > 0:
              entropy += - p_x * math.log(p_x, 2)
      if entropy >= minimum_entropy:
          human_readable = tableToMarkdown("Entropy results", {'Checked Value': data, 'Entropy': entropy},
                                           headers=['Checked Value', 'Entropy'])

          return human_readable, {'EntropyResult': {'checked_value': data, 'entropy': entropy}}, {}

      return f'Entropy for {data} is {entropy} - lower than {minimum_entropy}', {}, {}


  def main():
      try:
          data = demisto.args().get('data', '')
          minimum_entropy = float(demisto.args().get('minimum_entropy', 0))

          return_outputs(*calculate_shannon_entropy(data, minimum_entropy))
      except Exception as ex:
          return_error(f'Failed to execute calculate entropy script. Error: {str(ex)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('CalculateEntropy', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- entropy
type: python

args:
- description: Timestamp to compare to the list of timestamps.
  name: tested_time
  required: true
- description: Values to compare the tested_time against. The script checks each value
    and determines whether it's before/after/equal to the tested_time.
  isArray: true
  name: values_to_compare
  required: true
- description: 'Time format of the times you entered. By default, the script uses
    automatic parsing. This should be used for cases like DD/MM/YYYY. Automatic parsing
    will detect formats such as: February 15th 2009, 02-15-2020, 02-15-2020T14:30:00Z'
  name: time_format
comment: Compares a single timestamp to a list of timestamps.
commonfields:
  id: TimeStampCompare
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.12.47
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
engineinfo: {}
mainengineinfo: {}
name: TimeStampCompare
outputs:
- contextPath: TimeStampCompare.TestedTime
  description: The tested time
  type: Date
- contextPath: TimeStampCompare.ComapredTime
  description: The compared time
  type: Date
- contextPath: TimeStampCompare.Result
  description: Whether the tested time was before, after, or equal to the comapred
    time.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('TimeStampCompare', 'start', __line__())
  ### pack version: 1.12.47




  import dateparser


  EQUAL = 'equal'
  BEFORE = 'before'
  AFTER = 'after'

  TIMESTAMP_FORMAT = '%Y-%m-%dT%H:%M:%S%Z'
  DT_STRING = "TimeStampCompare(val.TestedTime && val.TestedTime == obj.TestedTime && " \
              "val.ComparedTime && val.ComparedTime == obj.ComparedTime)"


  def time_stamp_compare_command(args):
      tested_time = args.get('tested_time')
      values_to_compare = argToList(args.get('values_to_compare'))
      time_format = args.get('time_format', None)
      if time_format == '':
          time_format = None
      elif time_format is not None:
          time_format = [time_format]

      results = []
      parsed_tested_time = dateparser.parse(tested_time, date_formats=time_format, settings={
          'TIMEZONE': 'UTC',
          'RELATIVE_BASE': datetime(datetime.now().year, 1, 1)
      })
      for compared_time in values_to_compare:
          parsed_compared_time = dateparser.parse(compared_time, date_formats=time_format, settings={
              'TIMEZONE': 'UTC',
              'RELATIVE_BASE': datetime(datetime.now().year, 1, 1)
          })
          assert parsed_compared_time is not None and parsed_tested_time is not None
          result = compare_times(parsed_compared_time.timestamp(), parsed_tested_time.timestamp())

          results.append({
              "TestedTime": tested_time,
              "ComparedTime": compared_time,
              "Result": result
          })

      human_readable = tableToMarkdown("Timestamp compare", results, ['TestedTime', 'ComparedTime', 'Result'])

      return (
          human_readable,
          {
              DT_STRING: results
          },
          results
      )


  def compare_times(parsed_compared_time, parsed_tested_time):
      if parsed_compared_time < parsed_tested_time:
          result = BEFORE
      elif parsed_compared_time > parsed_tested_time:
          result = AFTER
      else:
          result = EQUAL

      return result


  def main():
      try:
          return_outputs(*time_stamp_compare_command(demisto.args()))
      except Exception as exc:
          return_error(f'Failed to execute TimeStampCompare. Error: {str(exc)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('TimeStampCompare', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python

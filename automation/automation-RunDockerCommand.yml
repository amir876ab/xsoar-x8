args:
- default: true
  description: Enter Command
  name: cmd
- description: enter sysargs
  name: sysargs
comment: "This command will allow you to run commands against a local Docker Container.
  You can run commands like wc for instance with word count, or other types of commands
  that you want on the docker container. \n\nWe recommend for tools that you want
  to use that are not part of the default Docker container, to cope this Automation
  script and then create a customer docker container with /docker_image_create with
  a custom docker container to add any command level tool to Demisto and output the
  results directly to the context."
commonfields:
  id: RunDockerCommand
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.12.47
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: RunDockerCommand
outputs:
- contextPath: CommandResults.Command
  description: This will contain the command line tool name and arguments that were
    ran.
- contextPath: CommandResults.Results
  description: This will have the full results as a single string of the results.
    You will need to parse the results of the command into the format you want. Try
    looking at commands like ExtractRegex or create your own follow on automation
    script that will parse the results into the format you would like.
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('RunDockerCommand', 'start', __line__())
  ### pack version: 1.12.47


  import subprocess


  def main():
      ret = []
      sysargs = None

      cmdarg = demisto.args()['cmd']
      if 'sysargs' in demisto.args():
          sysargs = demisto.args()['sysargs']

      if sysargs is None:
          output = None
          try:
              cmd_list = cmdarg.split()
              output = subprocess.check_output(cmd_list, shell=False)
          except subprocess.CalledProcessError as e:
              output = e.output
          ret.append(output)
      else:
          ret.append(subprocess.check_output([cmdarg, sysargs]))

      ret = [r.decode('utf-8') for r in ret]     # type:ignore[union-attr]
      ec = {'Command': cmdarg, 'Results': ret[0]}

      demisto.results({
          'Type': entryTypes['note'],
          'ContentsFormat': formats['json'],
          'Contents': ret,
          'HumanReadable': ret[0],
          'EntryContext': {'CommandResults': ec}
      })


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()
      sys.exit(0)

  register_module_line('RunDockerCommand', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utilities
type: python

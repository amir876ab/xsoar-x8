args:
- default: true
  description: The email address to check
  name: email
  required: true
- description: List of internal domains to check, comma separated
  isArray: true
  name: domain
- auto: PREDEFINED
  defaultValue: "no"
  description: Include subdomains of the domain list?
  name: include_subdomains
  predefined:
  - "yes"
  - "no"
comment: Checks if the email address is part of the internal domains
commonfields:
  id: IsEmailAddressInternal
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.12.39
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: IsEmailAddressInternal
outputs:
- contextPath: Account.Email.Address
  description: The Email account full address
  type: string
- contextPath: Account.Email.Username
  description: The Email account username
  type: string
- contextPath: Account.Email.Domain
  description: The Email account domain
  type: string
- contextPath: Account.Email.NetworkType
  description: The Email account NetworkType (could be Internal/External)
  type: string
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('IsEmailAddressInternal', 'start', __line__())
  ### pack version: 1.12.39


  import re
  from distutils.util import strtobool


  def main():
      email = demisto.args()['email']
      domains = [x.lower() for x in argToList(demisto.get(demisto.args(), 'domain'))]
      include_subdomains = strtobool(demisto.getArg('include_subdomains') or 'no')

      parts = email.split('@', 1)

      network_type = "Unknown"
      in_domain = "no"

      if len(parts) > 1:
          if parts[1].lower() in domains or include_subdomains and \
                  re.match("^(.*\\.)?({})".format('|'.join([re.escape(d) for d in domains])), parts[1].lower()):
              in_domain = "yes"
              network_type = "Internal"
          else:
              network_type = "External"

          email_dict = {
              "Address": email,
              "Domain": parts[1],
              "Username": parts[0],
              "NetworkType": network_type
          }

          email_obj = {
              "Account.Email(val.Address && val.Address == obj.Address)": email_dict
          }
          demisto.results({
              "Type": entryTypes["note"],
              "ContentsFormat": formats["json"],
              "Contents": in_domain,
              "HumanReadable": in_domain,
              "EntryContext": email_obj
          })

      else:
          demisto.results({"Type": entryTypes["error"], "ContentsFormat": formats["text"],
                          "Contents": 'Email address "{0}" is not valid'})


  if __name__ == "__builtin__" or __name__ == "builtins":
      main()

  register_module_line('IsEmailAddressInternal', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- email
type: python

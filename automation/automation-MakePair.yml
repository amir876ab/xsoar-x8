args:
- description: The array1
  isArray: true
  name: value
- description: The key or path to get values from the array1 (value)
  name: array1_key
- description: The array2
  isArray: true
  name: array2
- description: The key or path to get values from the array2
  name: array2_key
- description: The key name in the output dictionary to which each of element of the
    array1 are given
  name: output_name1
  required: true
- description: The key name in the output dictionary to which each of element of the
    array2 are given
  name: output_name2
  required: true
- auto: PREDEFINED
  defaultValue: shorter
  description: How to deal with different size lists. (Choose from shorter, longer,
    array1, or array2)
  name: determine_output_length_by
  predefined:
  - shorter
  - longer
  - array1
  - array2
- auto: PREDEFINED
  description: When each element is given in a dictionary, specify the array it will
    be merged into (Choose from array1, array2, array1<array2, or array2<array1).
  name: merge_dict
  predefined:
  - array1
  - array2
  - array1<array2
  - array2<array1
comment: |-
  This transformer will create a list of dictionary by aggregating elements from two arrays.
  The one is given by `value` (with `array1_key`), another is given by `array2` (with `array2_key`).
commonfields:
  id: MakePair
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.8.0
    itemVersion: 1.2.37
    packID: FiltersAndTransformers
    packName: Filters And Transformers
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: MakePair
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('MakePair', 'start', __line__())
  ### pack version: 1.2.37


  from itertools import zip_longest
  from typing import Any, List, Dict, Optional


  def demisto_get(obj: Any, path: Any) -> Any:
      """
      This is an extended function of demisto.get().
      The `path` argument parameter supports a syntax of path escaped with backslash
      in order to support a key including period characters.

      e.g.
         xxx
          + x.y.z
           + zzz

         -> path: xxx.x\.y\.z.zzz

      :param obj: The root node.
      :param path: The path to get values in the node.
      :return: The value(s) specified with `path` in the node.
      """
      def split_context_path(path: str) -> List[str]:
          """
          Get keys in order from the path which supports a syntax of path escaped with backslash.

          :param path: The path.
          :return: The keys whose escape characters are removed.
          """
          nodes = []
          node = []
          itr = iter(path)
          for c in itr:
              if c == '\\':
                  try:
                      node.append(next(itr))
                  except StopIteration:
                      node.append('\\')
              elif c == '.':
                  nodes.append(''.join(node))
                  node = []
              else:
                  node.append(c)
          nodes.append(''.join(node))
          return nodes

      if not isinstance(obj, dict):
          return None

      for part in split_context_path(path):
          if obj and part in obj:
              obj = obj[part]
          else:
              return None
      return obj


  def make_dict(element1: Any,
                element2: Any,
                output_name1: str,
                output_name2: str,
                method: Optional[str]) -> Dict[str, Any]:
      if method == 'array1':
          if isinstance(element1, dict):
              return dict(element1, **{output_name2: element2})
      elif method == 'array2':
          if isinstance(element2, dict):
              return dict(element2, **{output_name1: element1})
      elif method == 'array1<array2':
          if isinstance(element1, dict):
              if isinstance(element2, dict):
                  return dict(element1, **element2)
              else:
                  return dict(element1, **{output_name2: element2})
      elif method == 'array2<array1':
          if isinstance(element1, dict):
              if isinstance(element2, dict):
                  return dict(element2, **element1)
              else:
                  return dict(element2, **{output_name1: element1})
      elif method is not None:
          raise DemistoException(f'Invalid parameter was given to "merge_dict" - {method}')

      return {output_name1: element1, output_name2: element2}


  def main():
      try:
          args = assign_params(**demisto.args())
          array1 = args.get('value', [])
          if array1_key := args.get('array1_key'):
              array1 = [demisto_get(x, array1_key) for x in array1]

          if not isinstance(array1, list):
              array1 = [array1]

          array2 = args.get('array2', [])
          if array2_key := args.get('array2_key'):
              array2 = [demisto_get(x, array2_key) for x in array2]

          if not isinstance(array2, list):
              array2 = [array2]

          determine_output_length_by = args.get('determine_output_length_by', 'shorter')
          if determine_output_length_by == 'array1':
              diff = len(array1) - len(array2)
              if diff > 0:
                  array2 += [None] * diff
              determine_output_length_by = 'shorter'
          elif determine_output_length_by == 'array2':
              diff = len(array2) - len(array1)
              if diff > 0:
                  array1 += [None] * diff
              determine_output_length_by = 'shorter'

          output_name1 = args.get('output_name1')
          output_name2 = args.get('output_name2')
          merge_dict = args.get('merge_dict')
          if determine_output_length_by == 'shorter':
              value = [make_dict(e1, e2, output_name1, output_name2, merge_dict) for e1, e2 in zip(array1, array2)]
          elif determine_output_length_by == 'longer':
              value = [make_dict(e1, e2, output_name1, output_name2, merge_dict) for e1, e2 in zip_longest(array1, array2)]
          else:
              raise DemistoException(f'Invalid parameter was given to "determine_output_length_by" - {determine_output_length_by}')

          return_results(value)
      except Exception as err:
          # Don't return an error by return_error() as this is transformer.
          raise DemistoException(str(err))


  if __name__ in ('__builtin__', 'builtins', '__main__'):
      main()

  register_module_line('MakePair', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- transformer
- general
type: python

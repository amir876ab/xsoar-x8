args:
- auto: PREDEFINED
  description: The action to make. If update is chosen and the key does not exist,
    a new key will be added.
  name: action
  predefined:
  - update
  - remove
  required: true
- description: The key to set.
  name: key
  required: true
- description: The value to set.
  name: value
comment: Edit the server configuration (under *settings/troubleshooting*). You can
  either add a new configuration or update and remove an existing one.
commonfields:
  id: EditServerConfig
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.83255
engineinfo: {}
mainengineinfo: {}
name: EditServerConfig
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('EditServerConfig', 'start', __line__())
  ### pack version: 1.13.16


  from typing import Any
  import traceback

  SERVER_SYSTEM_CONFIG_PATH = '/system/config'
  ''' STANDALONE FUNCTION '''


  def get_current_server_config() -> dict:
      res = execute_command("core-api-get", {"uri": SERVER_SYSTEM_CONFIG_PATH})
      config_json = res['response']
      return config_json.get('sysConf', {})


  def set_system_config(server_config: dict):
      execute_command(
          "core-api-post",
          {
              "uri": SERVER_SYSTEM_CONFIG_PATH,
              "body": {"data": server_config,
                       "version": -1},
          })


  def remove_key_from_server_config(key: str, server_config: dict):
      if key in server_config:
          server_config.pop(key)
          set_system_config(server_config)


  def update_server_config(key: str, value: str, server_config: dict):
      if not value:
          raise DemistoException(
              "EditServerConfig Error: You must give a value when you want to update a server configuration.")
      server_config[key] = value
      set_system_config(server_config)


  def edit_server_config(args: dict[str, Any]) -> CommandResults:
      action = args.get('action', "")
      key = args.get('key', "")
      value = args.get('value', "")

      sys_conf = get_current_server_config()

      if action == "update":
          update_server_config(key, value, sys_conf)
      elif action == "remove":
          remove_key_from_server_config(key, sys_conf)
      else:
          raise DemistoException("EditServerConfig Error: action must be update or remove.")

      return CommandResults(readable_output=f"Server configuration with {key} was {action}d successfully.")


  def main():
      try:
          return_results(edit_server_config(demisto.args()))
      except Exception as ex:
          demisto.error(traceback.format_exc())
          return_error(f'Failed to execute EditServerConfig. Error: {str(ex)}')


  ''' ENTRY POINT '''

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('EditServerConfig', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python

args:
- auto: PREDEFINED
  default: true
  defaultValue: "3.1"
  description: The CVSS version to use for scoring. Can be "3.1" or "3.0". Default
    is "3.1".
  name: version
  predefined:
  - "3.1"
  - "3.0"
  required: true
- auto: PREDEFINED
  description: Attack Vector. Can be "N", "A", "L", or "P".
  name: AV
  predefined:
  - "N"
  - A
  - L
  - P
  required: true
- auto: PREDEFINED
  description: Attack Complexity. Can be "L" or "H".
  name: AC
  predefined:
  - L
  - H
  required: true
- auto: PREDEFINED
  description: Privileges Required. Can be "N", "L", or "H".
  name: PR
  predefined:
  - "N"
  - L
  - H
  required: true
- auto: PREDEFINED
  description: User Interaction. Can be "N" or "R".
  name: UI
  predefined:
  - "N"
  - R
  required: true
- auto: PREDEFINED
  description: Scope. Can be "U" or "C".
  name: S
  predefined:
  - U
  - C
  required: true
- auto: PREDEFINED
  description: Confidentiality. Can be "H", "L", or "N".
  name: C
  predefined:
  - H
  - L
  - "N"
  required: true
- auto: PREDEFINED
  description: Integrity. Can be "H", "L", or "N".
  name: I
  predefined:
  - H
  - L
  - "N"
  required: true
- auto: PREDEFINED
  description: Availability. Can be "H", "L", or "N".
  name: A
  predefined:
  - H
  - L
  - "N"
  required: true
- auto: PREDEFINED
  defaultValue: X
  description: Exploit Code Maturity. Can be "X", "H", "F", "P", or "U". Default is
    "X".
  name: E
  predefined:
  - X
  - H
  - F
  - P
  - U
- auto: PREDEFINED
  defaultValue: X
  description: Remediation Level. Can be "X", "U", "W", "T", or "O". Default is "X".
  name: RL
  predefined:
  - X
  - U
  - W
  - T
  - O
- auto: PREDEFINED
  defaultValue: X
  description: Report Confidence. Can be "X", "C", "R", or "U". Default is "X".
  name: RC
  predefined:
  - X
  - C
  - R
  - U
- auto: PREDEFINED
  defaultValue: X
  description: Confidentiality Requirement. Can be "X", "H", "M", or "L". Default
    is "X".
  name: CR
  predefined:
  - X
  - H
  - M
  - L
- auto: PREDEFINED
  defaultValue: X
  description: Integrity Requirement. Can be "X", "H", "M", or "L". Default is "X".
  name: IR
  predefined:
  - X
  - H
  - M
  - L
- auto: PREDEFINED
  defaultValue: X
  description: Availability Requirement. Can be "X", "H", "M", or "L". Default is
    "X".
  name: AR
  predefined:
  - X
  - H
  - M
  - L
- auto: PREDEFINED
  defaultValue: X
  description: Modified Attack Vector. Can be "X", "N", "A", "L", or "P". Default
    is "X".
  name: MAV
  predefined:
  - X
  - "N"
  - A
  - L
  - P
- auto: PREDEFINED
  defaultValue: X
  description: Modified Attack Complexity. Can be "X", "L", or "N". Default is "X".
  name: MAC
  predefined:
  - X
  - L
  - H
- auto: PREDEFINED
  defaultValue: X
  description: Modified Privileges Required. Can be "X", "N", "L", or "H". Default
    is "X".
  name: MPR
  predefined:
  - X
  - "N"
  - L
  - H
- auto: PREDEFINED
  defaultValue: X
  description: Modified User Interaction. Can be "X", "N", or "R". Default is "X".
  name: MUI
  predefined:
  - X
  - "N"
  - R
- auto: PREDEFINED
  defaultValue: X
  description: Modified Scope. Can be "X", "U", or "C". Default is "X".
  name: MS
  predefined:
  - X
  - U
  - C
- auto: PREDEFINED
  defaultValue: X
  description: Modified Confidentiality. Can be "X", "N", "L", or "H". Default is
    "X".
  name: MC
  predefined:
  - X
  - "N"
  - L
  - H
- auto: PREDEFINED
  defaultValue: X
  description: Modified Integrity. Can be "X", "N", "L", or "H". Default is "X".
  name: MI
  predefined:
  - X
  - "N"
  - L
  - H
- auto: PREDEFINED
  defaultValue: X
  description: Modified Availability. Can be "X", "N", "L", or "H". Default is "X".
  name: MA
  predefined:
  - X
  - "N"
  - L
  - H
comment: This script calculates the CVSS Base Score, Temporal Score, and Environmental
  Score using either the CVSS 3.0 or CVSS 3.1 calculator according to https://www.first.org/cvss/
  calculation documentation.
commonfields:
  id: CVSSCalculator
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: CVSSCalculator
outputs:
- contextPath: CVSS.VectorString
  description: Text notation of the score.
  type: string
- contextPath: CVSS.ImpactSubScore
  description: Impact sub-score.
  type: number
- contextPath: CVSS.Impact
  description: Impact Score.
  type: number
- contextPath: CVSS.Exploitability
  description: Exploitability score.
  type: number
- contextPath: CVSS.BaseScore
  description: Base score.
  type: number
- contextPath: CVSS.TemporalScore
  description: Temporal score.
  type: number
- contextPath: CVSS.ModifiedImpactSubScore
  description: Modified impact sub-score.
  type: number
- contextPath: CVSS.ModifiedImpact
  description: Modified impact.
  type: number
- contextPath: CVSS.ModifiedExploitability
  description: Modified exploitability score.
  type: number
- contextPath: CVSS.EnvironmentalScore
  description: Environmental score.
  type: number
- contextPath: CVSS.Version
  description: Version of CVSS used in the calculation.
  type: number
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('CVSSCalculator', 'start', __line__())
  ### pack version: 1.13.16



  import math
  from typing import Dict, Any


  def round_up(n):
      if n is None:
          return None
      int_input = int(n * 100000)
      if (int_input % 10000) == 00:
          return int_input / 100000.0
      else:
          return math.floor((int_input / 10000) + 1) / 10.0


  def main():
      args = demisto.args()
      version = args.get('version', '3.1')
      vector_string = f"CVSS:{version}/"

      values_map_options: Dict[str, Dict[str, Dict[str, Any]]] = {
          "3.0": {
              "AV": {
                  "X": None,
                  "N": 0.85,
                  "A": 0.62,
                  "L": 0.55,
                  "P": 0.2,
              },
              "AC": {
                  "X": None,
                  "L": 0.77,
                  "H": 0.44
              },
              "PR": {
                  "X": None,
                  "N": 0.85,
                  "L": {
                      "C": 0.68,
                      "U": 0.62
                  },
                  "H": {
                      "C": 0.5,
                      "U": 0.27
                  }
              },
              "UI": {
                  "X": None,
                  "N": 0.85,
                  "R": 0.62
              },
              "CIA": {
                  "X": None,
                  "N": 0,
                  "H": 0.56,
                  "L": 0.22,
              },
              "E": {
                  "X": 1,
                  "H": 1,
                  "F": 0.97,
                  "P": 0.94,
                  "U": 0.91
              },
              "RL": {
                  "X": 1,
                  "U": 1,
                  "W": 0.97,
                  "T": 0.96,
                  "O": 0.95
              },
              "RC": {
                  "X": 1,
                  "C": 1,
                  "R": 0.96,
                  "U": 0.92
              },
              "CIAR": {
                  "X": 1,
                  "H": 1.5,
                  "M": 1,
                  "L": 0.5
              }
          },
          "3.1": {
              "AV": {
                  "X": None,
                  "N": 0.85,
                  "A": 0.62,
                  "L": 0.55,
                  "P": 0.2,
              },
              "AC": {
                  "X": None,
                  "L": 0.77,
                  "H": 0.44
              },
              "PR": {
                  "X": None,
                  "N": 0.85,
                  "L": {
                      "C": 0.68,
                      "U": 0.62
                  },
                  "H": {
                      "C": 0.5,
                      "U": 0.27
                  }
              },
              "UI": {
                  "X": None,
                  "N": 0.85,
                  "R": 0.56
              },
              "CIA": {
                  "X": None,
                  "N": 0,
                  "H": 0.56,
                  "L": 0.22,
              },
              "E": {
                  "X": 1,
                  "H": 1,
                  "F": 0.97,
                  "P": 0.94,
                  "U": 0.91
              },
              "RL": {
                  "X": 1,
                  "U": 1,
                  "W": 0.97,
                  "T": 0.96,
                  "O": 0.95
              },
              "RC": {
                  "X": 1,
                  "C": 1,
                  "R": 0.96,
                  "U": 0.92
              },
              "CIAR": {
                  "X": 1,
                  "H": 1.5,
                  "M": 1,
                  "L": 0.5
              }
          }
      }
      version = args.get('version')
      values_map = values_map_options[version]

      value_list = list()
      for k, v in args.items():
          if v != "X" and k != "version":
              value_list.append(f"{k}:{v}")
      vector_string += "/".join(value_list)

      ###########################################
      # Get all required values for calculations
      ###########################################
      confidentiality = values_map['CIA'][args.get('C')]
      modified_confidentiality = args.get('MC', "X")
      modified_confidentiality = confidentiality if\
          modified_confidentiality == "X" else values_map['CIA'][modified_confidentiality]
      integrity = values_map['CIA'][args.get('I')]
      modified_integrity = args.get('MI', "X")
      modified_integrity = integrity if modified_integrity == "X" else values_map['CIA'][modified_integrity]
      availability = values_map['CIA'][args.get('A')]
      modified_availability = args.get('MA', "X")
      modified_availability = availability if modified_availability == "X"\
          else values_map['CIA'][modified_availability]
      exploit_code_maturity = values_map["E"].get(args.get('E'), "X")
      scope_changed = True if args.get('S') == "C" else False
      modified_scope_changed = True if args.get('MS') == "C" else False
      atack_vector = values_map['AV'].get(args.get('AV'), 0)

      modified_attack_vector = args.get('MAV', "X")
      modified_attack_vector = atack_vector if modified_attack_vector == "X"\
          else values_map['AV'].get(modified_attack_vector, 0)
      attack_complexity = values_map['AC'][args.get('AC')]
      modified_attack_complexity = args.get('MAC', "X")
      modified_attack_complexity = attack_complexity if modified_attack_complexity == "X"\
          else values_map['AC'][modified_attack_complexity]

      privileges_required = values_map['PR'][args.get('PR')]
      if type(privileges_required) == dict:
          privileges_required = privileges_required.get("C") if scope_changed or modified_scope_changed\
              else privileges_required["U"]
      modified_privileges_required = args.get('MPR', "X")
      if modified_privileges_required == "X":
          modified_privileges_required = privileges_required
      elif type(modified_privileges_required) == dict:
          modified_privileges_required = modified_privileges_required["C"] if scope_changed or\
              modified_scope_changed else modified_privileges_required["U"]
      else:
          modified_privileges_required = values_map['PR'][modified_privileges_required]
      user_interaction = values_map['UI'][args.get('UI')]
      modified_user_interaction = args.get('MUI', "X")
      modified_user_interaction = user_interaction if modified_user_interaction == "X"\
          else values_map['UI'][modified_user_interaction]
      remediation_level = values_map['RL'][args.get('RL', "X")]
      report_confidence = values_map['RC'][args.get('RC', "X")]
      confidentiality_requirement = values_map['CIAR'][args.get('CR', "X")]
      integrity_requirement = values_map['CIAR'][args.get('IR', "X")]
      availability_requirement = values_map['CIAR'][args.get('AR', "X")]

      ###########################################
      # Base Metric Equation calculations
      ###########################################

      # Impact Sub-Score
      iss = 0
      if version in ['3.0', '3.1']:
          iss = 1 - ((1 - confidentiality) * (1 - integrity) * (1 - availability))

      # Impact
      impact = 0.0
      if version in ['3.0', '3.1']:
          if not scope_changed:
              impact = 6.42 * iss
          else:
              impact = 7.52 * (iss - 0.029) - 3.25 * (iss - 0.02) ** 15

      # Exploitability
      exploitability = 0.0
      if version in ['3.0', '3.1']:
          exploitability = 8.22 * atack_vector * attack_complexity * privileges_required * user_interaction

      # Base Score
      base_score = 0.0
      if version in ['3.0', '3.1']:
          base_score = 0
          if impact > 0:
              multiplier = 1.0
              if scope_changed:
                  multiplier = 1.08
              calculated_value = multiplier * (impact + exploitability)
              base_score = calculated_value if calculated_value < 10.0 else 10.0
              base_score = round_up(base_score)

      ###########################################
      # Temporal Metric calculations
      ###########################################
      temporal_score_roundup = 0.0
      if version in ['3.0', '3.1']:
          temporal_score_roundup = base_score * exploit_code_maturity * remediation_level * report_confidence

      # Environmental Metrics
      modified_impact_sub_score = 0.0
      modified_impact = 0.0
      modified_exploitability = 0.0
      if version in ['3.0', '3.1']:
          calculatedmodified_impact_sub_score = (
              1 - (
                  (1 - confidentiality_requirement * modified_confidentiality)
                  * (1 - integrity_requirement * modified_integrity)
                  * (1 - availability_requirement * modified_availability)
              )
          )
          modified_impact_sub_score = calculatedmodified_impact_sub_score if calculatedmodified_impact_sub_score < 0.915\
              else 0.915

      if version in ['3.0', '3.1']:
          if modified_scope_changed:
              if version == '3.0':
                  modified_impact = 7.52 * (modified_impact_sub_score - 0.029) - 3.25 *\
                      (modified_impact_sub_score * 0.9731 - 0.02) ** 15
              elif version == '3.1':
                  modified_impact = 7.52 * (modified_impact_sub_score - 0.029) - 3.25 *\
                      (modified_impact_sub_score * 0.9731 - 0.02) ** 13
          else:
              modified_impact = 6.42 * modified_impact_sub_score
          modified_exploitability = 8.22 * modified_attack_vector *\
              modified_attack_complexity * modified_privileges_required * modified_user_interaction

      # Environmental Score
      environmental_score = 0.0
      if version in ['3.0', '3.1']:
          environmental_score = 0
          if modified_impact > 0:
              exponential = 1.0
              if modified_scope_changed:
                  exponential = 1.08
              calculated_value = exponential * (modified_impact + modified_exploitability)
              calculated_value = calculated_value if calculated_value < 10 else 10
              calculated_value = round_up(calculated_value)
              environmental_score = calculated_value * exploit_code_maturity * remediation_level * report_confidence
              environmental_score = round_up(environmental_score)

      # Round values
      iss = round_up(iss)
      impact = round_up(impact)
      exploitability = round_up(exploitability)
      base_score = round_up(base_score)
      temporal_score_roundup = round_up(temporal_score_roundup)
      modified_impact_sub_score = round_up(modified_impact_sub_score)
      modified_impact = round_up(modified_impact)
      modified_exploitability = round_up(modified_exploitability)
      environmental_score = round_up(environmental_score)

      entry = {
          "VectorString": vector_string,
          "Version": version,
          "ImpactSubScore": iss,
          "Impact": impact,
          "Exploitability": exploitability,
          "BaseScore": base_score,
          "TemporalScore": temporal_score_roundup,
          "ModifiedImpactSubScore": modified_impact_sub_score,
          "ModifiedImpact": modified_impact,
          "ModifiedExploitability": modified_exploitability,
          "EnvironmentalScore": environmental_score
      }

      hrentry = {k: v for k, v in entry.items() if v}
      markdown = tableToMarkdown('CVSS Score:', hrentry)

      results = CommandResults(
          readable_output=markdown,
          outputs_prefix='',
          outputs_key_field='',
          outputs={
              'CVSS(val.VectorString === obj.VectorString && val.Version === obj.Version)': entry
          }
      )
      return results


  if __name__ in ['__main__', 'builtin', 'builtins']:
      res = main()
      return_results(res)

  register_module_line('CVSSCalculator', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python

args:
- default: true
  description: Comma separated list of URLs to verify.
  isArray: true
  name: url
  required: true
- auto: PREDEFINED
  defaultValue: "false"
  description: Set the URL as suspicious in case it starts with HTTP and not HTTPS.
  name: set_http_as_suspicious
  predefined:
  - "false"
  - "true"
comment: Verify URL SSL certificate
commonfields:
  id: URLSSLVerification
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.12.47
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
engineinfo: {}
mainengineinfo: {}
name: URLSSLVerification
outputs:
- contextPath: URL
  description: The URL object
- contextPath: URL.Data
  description: The URL address
  type: string
- contextPath: URL.Malicious
  description: The malicious description
- contextPath: DBotScore
  description: The DBotScore object
- contextPath: DBotScore.Indicator
  description: The indicator
  type: string
- contextPath: DBotScore.Type
  description: The indicator's type
  type: string
- contextPath: DBotScore.Vendor
  description: The reputation vendor
  type: string
- contextPath: DBotScore.Score
  description: The reputation score
  type: number
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('URLSSLVerification', 'start', __line__())
  ### pack version: 1.12.47


  import requests


  NON_SSL_PREFIX = "http"
  SSL_PREFIX = "https"
  VENDOR = "URL SSL Verification"
  SUSPICIOUS_SCORE = 2
  URL_REGEX_PATTERN = r',(?=https?://)'


  def arg_to_list_with_regex(arg):
      """
             Converts a string representation of args to a python list

             :type arg: ``str`` or ``list``
             :param arg: Args to be converted (required)

             :return: A python list of args
             :rtype: ``list``
          """
      if not arg:
          return []
      if isinstance(arg, list):
          return arg
      if isinstance(arg, STRING_TYPES):
          if arg[0] == '[' and arg[-1] == ']':
              return json.loads(arg)
          return re.split(URL_REGEX_PATTERN, arg)   # type: ignore[arg-type]
      return arg


  def mark_http_as_suspicious(set_http_as_suspicious):
      # Could be None in previous playbooks that using this automation.
      return set_http_as_suspicious != 'false'


  def main():     # pragma: no cover
      url_arg = demisto.get(demisto.args(), "url")
      urls = arg_to_list_with_regex(url_arg)

      set_http_as_suspicious = demisto.args().get('set_http_as_suspicious')

      url_list = []

      ec = {
          'URL': [],
          'DBotScore': []
      }  # type: dict

      for url in urls:
          url_obj = {
              "Data": url
          }
          malicious = None

          # Check if url is non SSL
          if SSL_PREFIX not in url.lower() and mark_http_as_suspicious(set_http_as_suspicious):
              malicious = {
                  "Vendor": VENDOR,
                  "Description": "The URL is not secure under SSL"
              }
          # Check SSL signature
          else:
              try:
                  requests.get(url)
              except requests.exceptions.SSLError:
                  malicious = {
                      "Vendor": VENDOR,
                      "Description": "SSL Certificate verification failed"
                  }
              except requests.exceptions.RequestException:
                  malicious = {
                      "Vendor": VENDOR,
                      "Description": "Failed to establish a new connection with the URL"
                  }

          if malicious:
              ec["DBotScore"].append({
                  "Indicator": url,
                  "Type": "url",
                  "Vendor": VENDOR,
                  "Score": SUSPICIOUS_SCORE
              })

              url_obj["Verified"] = False
              url_obj["Malicious"] = malicious
          else:
              url_obj["Verified"] = True

          url_list.append(url_obj)

      ec["URL(val.Data && val.Data === obj.Data)"] = url_list

      preview_list = [{"URL": url["Data"], "Verified": url["Verified"], "Description": demisto.get(
          url, "Malicious.Description") or "SSL certificate is verified"} for url in url_list]

      md = tableToMarkdown("URL SSL Verification", preview_list, ["URL", "Verified", "Description"])

      demisto.results({
          "Type": entryTypes["note"],
          "Contents": url_list,
          "ContentsFormat": formats["json"],
          "HumanReadable": md,
          "EntryContext": ec
      })


  if __name__ in ['__main__', '__builtin__', 'builtins']:
      main()

  register_module_line('URLSSLVerification', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- url
- Enrichment
type: python

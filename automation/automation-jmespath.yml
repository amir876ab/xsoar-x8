args:
- description: Jmespath expression.
  name: expression
  required: true
- description: Original input value.
  name: value
  required: true
comment: Performs a JMESPath search on an input JSON format, when using a transformer.
commonfields:
  id: jmespath
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.2.51
    packID: FiltersAndTransformers
    packName: Filters And Transformers
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/py3-tools:1.0.0.84025
enabled: true
engineinfo: {}
mainengineinfo: {}
name: jmespath
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('jmespath', 'start', __line__())
  ### pack version: 1.2.51


  from typing import Union
  import jmespath


  def jmespath_search(expression: str, value: Union[dict, list]) -> dict:
      try:
          expression_compiled = jmespath.compile(expression)
      except Exception as err:
          raise Exception(f"Invalid expression - {err}")
      result = expression_compiled.search(value)
      return result


  def main():
      args = demisto.args()
      value = args.get("value")
      if isinstance(value, str):
          try:
              value = json.loads(value)
          except Exception as err:
              return_error(f"The input is not valid JSON: {err}")
      expression = args.get("expression")
      result = jmespath_search(expression, value)
      return_results(result)


  if __name__ in ['__builtin__', 'builtins']:
      main()

  register_module_line('jmespath', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- transformer
- general
type: python

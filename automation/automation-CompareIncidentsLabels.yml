args:
- description: Incident ID of the first incident.
  name: incident_id_1
  required: true
- description: Incident ID of the second incident.
  name: incident_id_2
  required: true
comment: |-
  Compares the labels of two incidents. Returns the labels that are unique to each incident.

  This automation runs using the default Limited User role, unless you explicitly change the permissions.
  For more information, see the section about permissions here:
  https://docs-cortex.paloaltonetworks.com/r/Cortex-XSOAR/6.10/Cortex-XSOAR-Administrator-Guide/Automations
commonfields:
  id: CompareIncidentsLabels
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: CompareIncidentsLabels
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('CompareIncidentsLabels', 'start', __line__())
  ### pack version: 1.13.16



  try:
      inc1 = demisto.args().get('incident_id_1')
      inc2 = demisto.args().get('incident_id_2')
      res = demisto.executeCommand("getIncidents", {'id': inc1})

      if any(is_error(entry) for entry in res):
          return_error("Unable to fetch incident {}".format(inc1))

      inc1_data = res[0].get('Contents').get('data')

      res = demisto.executeCommand("getIncidents", {'id': inc2})
      if any(is_error(entry) for entry in res):
          return_error("Unable to fetch incident {}".format(inc2))

      inc2_data = res[0].get('Contents').get('data')

      if inc1_data is None or inc2_data is None:
          return_error("One of the incidents does not exist.")

      inc1_labels = inc1_data[0].get('labels', [])
      inc2_labels = inc2_data[0].get('labels', [])
      in1not2 = []
      in2not1 = []
      for label in inc1_labels:
          if label not in inc2_labels:
              in1not2.append(label)
      for label in inc2_labels:
          if label not in inc1_labels:
              in2not1.append(label)

      md = tableToMarkdown("Labels of incident {} but not of incident {}".format(inc1, inc2), in1not2)
      md += "\n" + tableToMarkdown("Labels of incident  {1} but not of incident {0}".format(inc1, inc2), in2not1)

      if not in2not1 and not in1not2:
          md = "No different labels."
      return_outputs(md, {}, {})
  except Exception as ex:
      return_error(f'An Error occured: {ex}', error=ex)

  register_module_line('CompareIncidentsLabels', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- incidents
type: python

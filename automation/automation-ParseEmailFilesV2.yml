args:
- default: true
  description: Entry ID with the Email as a file in msg or eml format.
  name: entryid
  required: true
- auto: PREDEFINED
  defaultValue: "false"
  description: Will parse only the headers and return headers table.
  name: parse_only_headers
  predefined:
  - "true"
  - "false"
- defaultValue: "3"
  description: How many levels deep we should parse the attached emails (e.g. email
    contains an emails contains an email). Default depth level is 3. Minimum level
    is 1, if set to 1 the script will parse only the first level email.
  name: max_depth
- defaultValue: All files
  description: In case of nested email files (for instance, an EML file inside an
    EML file), determines which of the email files to return as an output. "All files"
    - will return all nested email files as output, "Outer file" - will return only
    the "outer" email file as output, "Inner file" - will return only the most "inner"
    email file as output. In case "Inner file" was chosen together with the 'max_depth'
    argument, the inner email will be considered as the email in the depth of the
    `max_size` argument.
  name: nesting_level_to_return
  predefined:
  - All files
  - Outer file
  - Inner file
- description: Use only the force encoding when parsing the message, e.g 'iso-2022-jp'.
    Relevant to msg files only.
  name: forced_encoding
- description: Use only the default encoding when parsing the message with the detected
    encoding fails, e.g 'utf-8'. Relevant to msg files only.
  name: default_encoding
comment: Parse an email from an eml or msg file and populate all relevant context
  data to investigate the email. Also extracts inner attachments and returns them
  to the war room. The incident labels themselves are preserved and not modified -
  only the "Label/x" context items that originated from the labels, and the best practice
  is to rely on these for the remainder of the playbook. This script is based on the
  parse-emails XSOAR python package, check the script documentation for more info.
commonfields:
  id: ParseEmailFilesV2
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.12.47
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/parse-emails:1.0.0.78248
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ParseEmailFilesV2
outputs:
- contextPath: Email.To
  description: This shows to whom the message was addressed, but may not contain the
    recipient's address.
  type: string
- contextPath: Email.CC
  description: Email 'cc' addresses.
  type: string
- contextPath: Email.From
  description: This displays who the message is from, however, this can be easily
    forged and can be the least reliable.
  type: string
- contextPath: Email.Subject
  description: Email subject.
  type: string
- contextPath: Email.HTML
  description: Email 'html' body if exists.
  type: string
- contextPath: Email.Text
  description: Email 'text' body if exists.
  type: string
- contextPath: Email.Depth
  description: The depth of the email. Depth=0 for the first level email. If email1
    contains email2 contains email3. Then email1 depth is 0, email2 depth is 1, email3
    depth is 2.
  type: number
- contextPath: Email.Headers
  description: Deprecated - use Email.HeadersMap output instead. The full email headers
    as a single string.
  type: string
- contextPath: Email.HeadersMap
  description: The full email headers json.
  type: Unknown
- contextPath: Email.HeadersMap.From
  description: This displays who the message is from, however, this can be easily
    forged and can be the least reliable.
  type: Unknown
- contextPath: Email.HeadersMap.To
  description: This shows to whom the message was addressed, but may not contain the
    recipient's address.
  type: Unknown
- contextPath: Email.HeadersMap.Subject
  description: Email subject.
  type: String
- contextPath: Email.HeadersMap.Date
  description: The date and time the email message was composed.
  type: Unknown
- contextPath: Email.HeadersMap.CC
  description: Email 'cc' addresses.
  type: Unknown
- contextPath: Email.HeadersMap.Reply-To
  description: The email address for return mail.
  type: String
- contextPath: Email.HeadersMap.Received
  description: List of all the servers/computers through which the message traveled.
  type: String
- contextPath: Email.HeadersMap.Message-ID
  description: A unique string assigned by the mail system when the message is first
    created. These can easily be forged. (e.g. 5c530c1b.1c69fb81.bd826.0eff@mx.google.com).
  type: String
- contextPath: Email.AttachmentsData.Name
  description: The name of the attachment.
  type: String
- contextPath: Email.AttachmentsData.Content-ID
  description: The content-id of the attachment.
  type: String
- contextPath: Email.AttachmentsData.Content-Disposition
  description: The content-disposition of the attachment.
  type: String
- contextPath: Email.AttachmentsData.FilePath
  description: The location of the attachment, on the XSOAR server.
  type: String
- contextPath: Email.AttachmentNames
  description: The list of attachment names in the email.
  type: string
- contextPath: Email.Format
  description: The format of the email if available.
  type: string
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ParseEmailFilesV2', 'start', __line__())
  ### pack version: 1.12.47


  from parse_emails.parse_emails import EmailParser


  def data_to_md(email_data, email_file_name=None, parent_email_file=None, print_only_headers=False) -> str:
      """
      create Markdown with the data.

      Args:
        email_data (dict): all the email data.
        email_file_name (str): the email file name.
        parent_email_file (str): the parent email file name (for attachment mail).
        print_only_headers (bool): Whether to only the headers.

      Returns:
        str: the parsed Markdown

      """
      if email_data is None:
          return 'No data extracted from email'

      md = "### Results:\n"
      if email_file_name:
          md = f"### {email_file_name}\n"

      if print_only_headers:
          return tableToMarkdown(f"Email Headers: {email_file_name}", email_data.get('HeadersMap'))

      if parent_email_file:
          md += f"### Containing email: {parent_email_file}\n"

      md += f"""* From:\t{email_data.get('From') or ""}\n"""
      md += f"""* To:\t{email_data.get('To') or ""}\n"""
      md += f"""* CC:\t{email_data.get('CC') or ""}\n"""
      md += f"""* Subject:\t{email_data.get('Subject') or ""}\n"""
      if email_data.get('Text'):
          text = email_data['Text'].replace('<', '[').replace('>', ']')
          md += f'* Body/Text:\t{text or ""}\n'
      if email_data.get('HTML'):
          md += f"""* Body/HTML:\t{email_data['HTML'] or ""}\n"""

      md += f"""* Attachments:\t{email_data.get('Attachments') or ""}\n"""
      md += "\n\n" + tableToMarkdown('HeadersMap', email_data.get('HeadersMap'))
      return md


  def save_file(file_name, file_content) -> str:
      """
      save attachment to the war room and return the file internal path.

      Args:
        file_name (str): The name of the file to be created.
        file_content (str/bytes): the file data.

      Returns:
        str: the file internal path

      """
      created_file = fileResult(file_name, file_content)
      file_id = created_file.get('FileID')
      attachment_internal_path = demisto.investigation().get('id') + '_' + file_id
      return_results(created_file)

      return attachment_internal_path


  def extract_file_info(entry_id: str) -> tuple:
      """
      extract from the entry id the file_type, file_path and file_name.

      Args:
        entry_id (str): The entry id.

      Returns:
          file_type(str): the file mime type.
          file_path(str): the file path.
          file_name(str):the file name.
      """
      file_type = ''
      file_path = ''
      file_name = ''
      try:
          result = demisto.executeCommand('getFilePath', {'id': entry_id})
          if is_error(result):
              return_error(get_error(result))

          file_path = result[0]['Contents']['path']
          file_name = result[0]['Contents']['name']

          dt_file_type = demisto.dt(demisto.context(), f"File(val.EntryID=='{entry_id}').Type")
          file_type = dt_file_type[0] if isinstance(dt_file_type, list) else dt_file_type

      except Exception as ex:
          return_error(
              "Failed to load file entry with entry id: {}. Error: {}".format(
                  entry_id, str(ex) + "\n\nTrace:\n" + traceback.format_exc()))

      return file_type, file_path, file_name


  def parse_nesting_level(nesting_level_to_return, output):
      if nesting_level_to_return == 'Outer file':
          # return only the outer email info
          return [output[0]]

      elif nesting_level_to_return == 'Inner file':
          # the last file in list it is the inner attached file
          return [output[-1]]
      return output


  def main():
      args = demisto.args()
      entry_id = args.get('entryid')
      max_depth = arg_to_number(args.get('max_depth', '3'))
      if not max_depth or max_depth < 1:
          return_error('Minimum max_depth is 1, the script will parse just the top email')
      parse_only_headers = argToBoolean(args.get('parse_only_headers', 'false'))
      forced_encoding = args.get('forced_encoding')
      default_encoding = args.get('default_encoding')
      nesting_level_to_return = args.get('nesting_level_to_return', 'All files')

      file_type, file_path, file_name = extract_file_info(entry_id)
      demisto.debug(f'{file_type=}, {file_path=}, {file_name=}')

      try:
          email_parser = EmailParser(file_path=file_path, max_depth=max_depth, parse_only_headers=parse_only_headers,
                                     file_info=file_type, forced_encoding=forced_encoding,
                                     default_encoding=default_encoding, file_name=file_name)
          output = email_parser.parse()
          demisto.debug(f'{output=}')

          results = []
          if isinstance(output, dict):
              output = [output]

          elif output and nesting_level_to_return != 'All files':
              output = parse_nesting_level(nesting_level_to_return, output)

          for email in output:
              if email.get('AttachmentsData'):
                  for attachment in email.get('AttachmentsData'):
                      if name := attachment.get('Name'):
                          if content := attachment.get('FileData'):
                              attachment['FilePath'] = save_file(name, content)
                              del attachment['FileData']
                          else:
                              attachment['FileData'] = None

              # probably a wrapper and we can ignore the outer "email"
              if email.get('Format') == 'multipart/signed' and all(not email.get(field) for field in ['To', 'From', 'Subject']):
                  continue

              if isinstance(email.get("HTML"), bytes):
                  email['HTML'] = email.get("HTML").decode('utf-8')

              results.append(CommandResults(
                  outputs_prefix='Email',
                  outputs=email,
                  readable_output=data_to_md(email, file_name, email.get('ParentFileName', None),
                                             print_only_headers=parse_only_headers),
                  raw_response=email))

          return_results(results)

      except Exception as e:
          return_error(str(e) + "\n\nTrace:\n" + traceback.format_exc())


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('ParseEmailFilesV2', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- email
- phishing
- enhancement
- file
type: python

comment: |-
  This script is used to display the indicators of an incident in an incident field of type Array. It can be used to select indicators from the incident in order to later perform some actions, like tagging the indicators for blocking via EDL.
  This script is a field-display script, so it needs to be configured as such, when editing the incident field that will be used to display the indicators.
commonfields:
  id: ShowIncidentIndicators
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.8.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.83255
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ShowIncidentIndicators
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ShowIncidentIndicators', 'start', __line__())
  ### pack version: 1.13.16




  def group_by_type(indicators):
      """
      Gets the indicators of the current incident.

      Returns:
          A list of the indicator types followed by the corresponding indicator values.
      """

      grouped = {}
      for indicator in indicators:
          if indicator['indicator_type'] not in grouped:
              grouped[indicator['indicator_type']] = [indicator['value']]
          else:
              grouped[indicator['indicator_type']].append(indicator['value'])
      result = []
      for indicator_header, indicator_values in grouped.items():
          result.append("--- " + indicator_header + " ---")
          result.extend(indicator_values)
          result.append('')
      return result


  def get_indicators_from_incident():
      """
      Returns:
          List of the indicators from the incident.
      """
      incident_id = demisto.incident()['id']
      indicators_query = {
          "investigationIDs": incident_id
      }

      find_indicators_args = {'query': indicators_query}
      all_indicator_data = execute_command('findIndicators', args=find_indicators_args)
      return {"hidden": False, "options": group_by_type(all_indicator_data)}


  def main():
      return_results(get_indicators_from_incident())


  if __name__ in ("__main__", "__builtin__", "builtins"):
      main()

  register_module_line('ShowIncidentIndicators', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- field-display
type: python

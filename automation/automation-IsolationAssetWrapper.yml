args:
- description: Device IDs to isolate or unisolate.
  isArray: true
  name: device_ids
  required: true
- auto: PREDEFINED
  description: The action to apply to device IDs - isolate or unisolate.
  name: action
  predefined:
  - isolate
  - unisolate
  required: true
comment: This is a wrapper to isolate or unisolate hash lists from Cortex XDR, MSDE
  or CrowdStrike (Available from Cortex XSOAR 6.0.0).
commonfields:
  id: IsolationAssetWrapper
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.12.47
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
engineinfo: {}
mainengineinfo: {}
name: IsolationAssetWrapper
outputs:
- contextPath: MicrosoftATP.MachineAction.ID
  description: The machine action ID.
  type: String
- contextPath: MicrosoftATP.MachineAction.Type
  description: The type of the machine action.
  type: String
- contextPath: MicrosoftATP.MachineAction.Scope
  description: The scope of the action.
  type: Unknown
- contextPath: MicrosoftATP.MachineAction.Requestor
  description: The ID of the user that executed the action.
  type: String
- contextPath: MicrosoftATP.MachineAction.RequestorComment
  description: The comment that was written when issuing the action.
  type: String
- contextPath: MicrosoftATP.MachineAction.Status
  description: The current status of the command.
  type: String
- contextPath: MicrosoftATP.MachineAction.MachineID
  description: The machine ID on which the action was executed.
  type: String
- contextPath: MicrosoftATP.MachineAction.ComputerDNSName
  description: The machine DNS name on which the action was executed.
  type: String
- contextPath: MicrosoftATP.MachineAction.CreationDateTimeUtc
  description: The date and time the action was created.
  type: Date
- contextPath: MicrosoftATP.MachineAction.LastUpdateTimeUtc
  description: The last date and time the action status was updated.
  type: Date
- contextPath: MicrosoftATP.MachineAction.RelatedFileInfo.FileIdentifier
  description: The file identifier.
  type: String
- contextPath: MicrosoftATP.MachineAction.RelatedFileInfo.FileIdentifierType
  description: 'The type of the file identifier. Possible values: "SHA1" ,"SHA256",
    and "MD5".'
  type: String
- contextPath: PaloAltoNetworksXDR.Isolation.endpoint_id
  description: The endpoint ID.
  type: String
- contextPath: PaloAltoNetworksXDR.UnIsolation.endpoint_id
  description: Isolates the specified endpoint.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('IsolationAssetWrapper', 'start', __line__())
  ### pack version: 1.12.47
  from typing import Tuple



  ''' STANDALONE FUNCTION '''

  INCIDENT_ID = demisto.incident().get('id')

  XDR_ACTIONS = {
      'isolate': 'xdr-isolate-endpoint',
      'unisolate': 'xdr-unisolate-endpoint'
  }

  MSDE_ACTIONS: Dict[str, Tuple[str, Dict[str, str]]] = {
      'isolate': ('microsoft-atp-isolate-machine', {'isolation_type': 'Full'}),
      'unisolate': ('microsoft-atp-unisolate-machine', {})
  }

  CROWDSTRIKE_ACTIONS = {
      'isolate': 'cs-falcon-contain-host',
      'unisolate': 'cs-falcon-lift-host-containment'
  }

  CROWDSTRIKE_HASH_ACTIONS = {
      'allow': {'action': 'allow',
                'description': f'Whitelisted based on XSOAR inc {INCIDENT_ID}',
                'severity': 'low'},
      'block': {'action': 'prevent',
                'description': f'Blacklisted based on XSOAR inc {INCIDENT_ID}',
                'severity': 'high'}
  }


  def create_commands(device_ids: List[str], action: str) -> List[CommandRunner.Command]:
      """
      Create a list of `Command` of the isolate/unisolate command to `Cortex XDR`, `CrowdstrikeFalcon`,
       `Microsoft Defender Advanced Threat Protection`

      :param device_ids: The device id's to run
      :param action: The action to have (one of {'isolate', 'unisolate'})
      :return: A list of `Command`
      """
      msde_command, msde_args = MSDE_ACTIONS[action]
      msde_args.update({'machine_id': ','.join(device_ids),
                        'comment': f'XSOAR - related incident {INCIDENT_ID}'})
      return [CommandRunner.Command(commands=XDR_ACTIONS.get(action),
                                    args_lst=[{'endpoint_id': device_id} for device_id in device_ids]),
              CommandRunner.Command(commands=msde_command,
                                    args_lst=msde_args),
              CommandRunner.Command(commands=CROWDSTRIKE_ACTIONS.get(action),
                                    args_lst={'ids': ','.join(device_ids)})]


  def run_isolation_action(device_ids: List[str], action: str) -> list:
      """
      Given arguments to the command, returns a list of results to return

      :param device_ids: List of device ids
      :param action: The action to perform (isolate or unisolate)

      :return: list of results to return
      :rtype: ``list``
      """

      commands = create_commands(device_ids, action)
      return CommandRunner.run_commands_with_summary(commands)


  ''' MAIN FUNCTION '''


  def main():  # pragma: no cover
      args = demisto.args()
      device_ids = argToList(args.get('device_ids'))
      if not device_ids:
          raise ValueError('hash not specified')
      action = args.get('action')
      if not action or action not in {'isolate', 'unisolate'}:
          raise ValueError('Action not specified or not in allowed actions')

      try:
          return_results(run_isolation_action(device_ids, action))
      except Exception as ex:
          return_error(f'Failed to execute IsolationAssetWrapper. Error: {str(ex)}')


  ''' ENTRY POINT '''

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('IsolationAssetWrapper', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- basescript
- incident-action-button
type: python

args:
- description: The context to change (i.e., ${Context.Key}).
  name: input
- auto: PREDEFINED
  defaultValue: "True"
  description: If "True" replaces the existing key. The default is "True".
  name: inplace
  predefined:
  - "True"
  - "False"
- description: 'A list of key-values to replace key for value in the following format:
    {"old_key1":"new_key1", "old_key2":"new_key2"}'
  name: replace_dict
- auto: PREDEFINED
  defaultValue: "False"
  description: If "True" capitalizes the first letter of the context key.
  name: capitalize
  predefined:
  - "True"
  - "False"
- description: The context path in which to output the results. Should be in the format
    of Context.Key.
  name: output_key
  required: true
comment: 'Enables changing context in two ways. The first is to capitalize the first
  letter of each key in following level of the context key entered. The second is
  to change context keys to new values. '
commonfields:
  id: ChangeContext
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.12.39
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ChangeContext
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ChangeContext', 'start', __line__())
  ### pack version: 1.12.39


  import json


  def replace_context(args: dict) -> tuple:
      context = args.get('input', '')
      output_key = args.get('output_key', '')
      inplace = args.get('inplace', 'True') == 'True'
      capitalize = args.get('capitalize') == 'True'
      replace_dict = json.loads(args.get('replace_dict', "{}"))

      if not context:
          return "The context key you've entered is empty. Nothing has happened.", {}, {}

      if not isinstance(context, (list, dict)):
          return "The context key you've entered is at the lowest level and cannot be changed.", {}, {}

      def replace_func(key):
          if key in replace_dict.keys():
              return replace_dict.get(key)
          else:
              if capitalize:
                  return key.title()
              return key

      new_context = createContext(context, keyTransform=replace_func)

      if inplace:
          demisto.executeCommand("Set", {'key': output_key, 'value': new_context})
          return f"Changed {output_key} successfully", {}, {}
      else:
          return f"Appended {output_key} successfully", {output_key: new_context}, {}


  def main():
      hr, ec, raw = replace_context(demisto.args())
      return_outputs(hr, ec, raw)


  if __name__ in ['__main__', 'builtin', 'builtins']:
      main()

  register_module_line('ChangeContext', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python

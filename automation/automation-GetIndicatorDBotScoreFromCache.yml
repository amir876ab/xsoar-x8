args:
- description: A comma-separated list of indicator values to check.
  isArray: true
  name: value
  required: true
comment: Get the overall score for the indicator as calculated by DBot.
commonfields:
  id: GetIndicatorDBotScoreFromCache
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.12.47
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.80014
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetIndicatorDBotScoreFromCache
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GetIndicatorDBotScoreFromCache', 'start', __line__())
  ### pack version: 1.12.47
  import contextlib




  def main():
      values: list[str] = argToList(demisto.args().get("value", None))
      unique_values: set[str] = {v.lower() for v in values}  # search query is case insensitive

      res = demisto.searchIndicators(
          query=f'value:({" ".join(unique_values)})',
          populateFields='name,score,aggregatedReliability,type,expirationStatus',
      )

      return_entries = []

      if 'iocs' in res and len(res['iocs']) > 0:
          for data in res['iocs']:
              score = data["score"]
              vendor = "XSOAR"
              reliability = data.get("aggregatedReliability")
              indicatorType = data["indicator_type"]
              expirationStatus = data.get("expirationStatus") != "active"
              value: str = data["value"]

              dbotscore = {
                  "Indicator": value,
                  "Type": indicatorType,
                  "Vendor": vendor,
                  "Score": score,
                  "Reliability": reliability,
                  "Expired": expirationStatus
              }

              return_entries.append(dbotscore)
              with contextlib.suppress(KeyError):  # for multiple IOCs with same value but different casing
                  unique_values.remove(value.lower())

      values_not_found = list({v for v in values if v.lower() in unique_values})  # return the values with the original casing

      if len(return_entries) > 0:
          md = tableToMarkdown("Indicator", return_entries)

          entry = {
              "Type": entryTypes["note"],
              "ReadableContentsFormat": formats['markdown'],
              "ContentsFormat": formats["json"],
              "Contents": return_entries,
              "EntryContext": {"DBotScoreCache": return_entries},
              "HumanReadable": md
          }

          return_results(entry)

      if len(values_not_found) == 1:
          return_results(f"Could not find {values_not_found[0]} in cache")

      elif len(values_not_found) > 1:
          md = tableToMarkdown("Could not find in cache", values_not_found, headers=['Values'])
          not_found_values_entry = {
              "Type": entryTypes["note"],
              "ContentsFormat": formats["json"],
              "ReadableContentsFormat": formats['markdown'],
              "Contents": md,
              "HumanReadable": md
          }
          return_results(not_found_values_entry)


  if __name__ == "__builtin__" or __name__ == "builtins":  # pragma: no cover
      main()

  register_module_line('GetIndicatorDBotScoreFromCache', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python

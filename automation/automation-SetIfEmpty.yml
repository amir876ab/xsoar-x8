args:
- description: The object value to check, if empty.
  isArray: true
  name: value
- description: The new value to return if the original value was empty.
  name: defaultValue
- auto: PREDEFINED
  default: true
  defaultValue: "true"
  description: If set to true, empty strings, arrays and dictionaries and the strings
    "None" and "Null" are considered empty entities and the default value is returned.
  name: applyIfEmpty
  predefined:
  - "true"
  - "false"
comment: Checks an object for an empty value and returns a pre-set default value.
commonfields:
  id: SetIfEmpty
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.2.51
    packID: FiltersAndTransformers
    packName: Filters And Transformers
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
enabled: true
engineinfo: {}
mainengineinfo: {}
name: SetIfEmpty
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  // pack version: 1.2.51
  function toBoolean(value) {
      if (typeof (value) === 'string') {
          if (['yes', 'true'].indexOf(value.toLowerCase()) != -1) {
              return true;
          } else if (['no', 'false'].indexOf(value.toLowerCase()) != -1) {
              return false;
          }
          throw 'Argument does not contain a valid boolean-like value';
      }
      return value ? true : false;
  }

  function isValueEmpty(value) {
      if (Array.isArray(value) && value.length === 1) {
          value = value[0];
      }

      const valueIsStringNull = typeof value === 'string' && (value.toLowerCase() === 'none' || value.toLowerCase() === 'null' || value === '');

      return value === null || (Array.isArray(value) && value.length === 0) || (value.constructor == Object && Object.keys(value).length === 0) || valueIsStringNull;
  }


  function getValueToSet(value) {
      const applyIfEmpty = toBoolean(args.applyIfEmpty);

      if (value === null || (applyIfEmpty && isValueEmpty(value))) {
          value = args.defaultValue;
      }

      if (value === null) {
          return [];
      } else
          return value;
  }


  function main() {
      let values = args.value;
      if (!values || (Array.isArray(values) && values.length === 0) || (values.constructor == Object && Object.keys(values).length === 0)) {
          values = [null];
      }
      values = argToList(values);

      for (let i = 0; i < values.length; i++) {
          values[i] = getValueToSet(values[i]);
      }
      return values;
  }


  try {
      return main();
  } catch (error) {
      throw 'Error occurred while running the script:\n' + error;
  }
scripttarget: 0
system: true
tags:
- transformer
- general
- entirelist
type: javascript

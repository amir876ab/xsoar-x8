args:
- default: true
  description: Integration's brand name to query
  name: brandname
  required: true
comment: Returns 'yes' if integration brand is available. Otherwise returns 'no'
commonfields:
  id: IsIntegrationAvailable
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.12.39
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
engineinfo: {}
mainengineinfo: {}
name: IsIntegrationAvailable
outputs:
- contextPath: "yes"
  description: if integration is available
- contextPath: "no"
  description: if there is no instance for the given brand
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('IsIntegrationAvailable', 'start', __line__())
  ### pack version: 1.12.39




  def is_integration_available(brandName, allInstances):
      brandInstances = [instanceName for instanceName in allInstances
                        if allInstances[instanceName]['brand'].lower() == brandName.lower()
                        and demisto.get(allInstances[instanceName], 'state')
                        and allInstances[instanceName]['state'] == 'active']
      if brandInstances:
          demisto.setContext('brandInstances', brandInstances)
          demisto.results('yes')
      else:
          demisto.results('no')


  def main():
      brandName = demisto.get(demisto.args(), 'brandname')
      allInstances = demisto.getModules()
      is_integration_available(brandName, allInstances)


  if __name__ in ('__main__', '__builtin__', 'builtins'):  # pragma: no cover
      main()

  register_module_line('IsIntegrationAvailable', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- infra
- Condition
type: python

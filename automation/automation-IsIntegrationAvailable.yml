args:
- default: true
  description: Integration's brand name to query.
  isArray: true
  name: brandname
  required: true
comment: Returns 'yes' if integration brand is available. Otherwise returns 'no'.
commonfields:
  id: IsIntegrationAvailable
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
engineinfo: {}
mainengineinfo: {}
name: IsIntegrationAvailable
outputs:
- contextPath: "yes"
  description: if integration is available.
- contextPath: "no"
  description: if there is no instance for the given brand.
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  // pack version: 1.13.16
  function isIntegrationAvailable(brandName, allInstances) {
      const brandInstances = Object.keys(allInstances).filter(
          instanceName =>
          allInstances[instanceName].brand.toLowerCase() === brandName.toLowerCase() &&
          allInstances[instanceName].state === 'active'
      );

      const readableOutput = brandInstances.length > 0 ? 'yes' : 'no';

      return {
          'Type': entryTypes['note'],
          'ContentsFormat': formats['json'],
          'Contents': readableOutput,
          'HumanReadable': readableOutput,
          'EntryContext': {'brandInstances': brandInstances}
      };
  }


  function main() {
      const brandNames = argToList(args.brandname);
      const allInstances = getModules();

      const results = [];
      for (let brandName of brandNames) {
          const result = isIntegrationAvailable(brandName, allInstances);
          results.push(result);
      }

      return results;
  }


  try {
      return main();
  } catch (error) {
      throw `Failed to execute automation. Error:\n${error}`;
  }
scripttarget: 0
system: true
tags:
- infra
- Condition
type: javascript

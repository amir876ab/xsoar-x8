args:
- description: Comma-separated values to map from.
  name: input_values
  required: true
- description: Comma-separated values to map to.
  name: mapped_values
  required: true
comment: "This script converts the input value into another value using two lists.
  The input value is searched in the first list (input_values). \nIf it exists, the
  value from the second list (mapped_values) at the same index is retutrned. If there
  is no match, the original value is returned.\nIf the original input is a dictionary,
  then the script will look for a \"stringified\" version of the key/:/value pair
  in the input_values and then map the result in the output_values into the original
  \"value\".\n\nExample 1:\n\ninput_values = \"1,2,3,4\"\nmapper_values = \"4,3,2,1\"\nvalue
  = 3\n\nOutput would be \"2\"\n\nExample 2:\n\ninput_values =\"firstkey: datahere,secondkey:
  datathere\"\nmapper_values = \"datathere,datahere\"\nvalue(dict)= {\n                                \"firstkey\":
  \"datahere\"\n                          }\n\nOutput would be:\n                          {\n
  \                               \"firstkey\": \"datathere\"\n                           }\n\nThe
  reason for matching the key AND value pair in a dictionary is to allow the mappig
  of values that have a specific key name. In most cases, dictionaries will continan
  key-value pairs in which the values are the same. You might want to change the value
  of KeyA, but not the value of KeyB. This method gives control over which key is
  changed.\n\nWhen the input is a dict, str , int, or list, the output is ALWAYS returned
  as a string."
commonfields:
  id: MapValuesTransformer
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.2.37
    packID: FiltersAndTransformers
    packName: Filters And Transformers
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: MapValuesTransformer
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('MapValuesTransformer', 'start', __line__())
  ### pack version: 1.2.37



  import json


  def mapvalues(value, input_values, mapped_values):
      input_values = input_values.split(",")
      mapped_values = mapped_values.split(",")
      try:
          value = json.loads(value)
      except Exception:
          pass

      # Convert all to string
      value = str(value) if type(value) not in [dict, list] else value
      input_values[:] = [str(x) for x in input_values]
      mapped_values[:] = [str(x) for x in mapped_values]

      # If the provided input_value and mapper_values are not equal in length
      # then return an error

      if len(input_values) != len(mapped_values):
          return_error('Length of input_values and mapped_values are not the same')

      # Create a dictionary to look up values against
      mapper = dict()
      for index in range(0, len(input_values)):
          mapper[input_values[index]] = mapped_values[index]

      # If the input is a dictionary then attempt to convert each
      # "key: value" as a string into the value in the mapper
      if type(value) == dict:
          new_dict = dict()
          for k, v in value.items():
              key_value = f"{k}:{v}"
              key_value_space = f"{k}: {v}"
              if key_value in mapper:
                  new_dict[k] = mapper[key_value]
              elif key_value_space in mapper:
                  new_dict[k] = mapper[key_value_space]
              else:
                  new_dict[k] = v
          value = json.dumps(new_dict)

      elif type(value) == list:
          for val in value:
              val = mapper[val] if val in mapper else val

      elif value in mapper:
          value = mapper[value]

      return value


  def main():
      args = demisto.args()
      value = args.get('value')
      input_values = args.get('input_values')
      mapped_values = args.get('mapped_values')

      value = mapvalues(value, input_values, mapped_values)
      demisto.results(value)


  if __name__ in ('__main__', 'builtin', 'builtins'):
      main()

  register_module_line('MapValuesTransformer', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- transformer
- string
type: python

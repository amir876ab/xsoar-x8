args:
- description: 'Query to use to find the Indicators, same as you''d use on the Threat
    Intel page. '
  name: query
  required: true
- defaultValue: "25"
  description: The number of indicators to return, defaults to a max of 25.
  name: size
- description: 'A comma seperated list of fields to return to the context, (default:
    id,indicator_type,value,score,verdict))'
  name: add_fields_to_context
comment: |-
  Searches Cortex XSOAR Indicators.

  Search for XSOAR Indicators and returns the id, indicator_type, value, and score/verdict.

  You can add additional fields from the indicators using the add_field_to_context argument.
commonfields:
  id: SearchIndicator
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.5.0
    itemVersion: 1.13.16
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: SearchIndicator
outputs:
- contextPath: foundIndicators.id
  description: The id of the indicator in the XSOAR database.
- contextPath: foundIndicators.indicator_type
  description: The type of Indicator (i.e. IP, Domain, URL, etc)
- contextPath: foundIndicators.value
  description: The value of the Indicator
- contextPath: foundIndicators.score
  description: The numeric score of the indicator (0 = Unknown, 1 = Good, 2 = Suspicious,
    3 = Malicious)
- contextPath: foundIndicators.verdict
  description: The human readable score/verdict of the Indicator.
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('SearchIndicator', 'start', __line__())
  ### pack version: 1.13.16




  def search_indicators(args):
      # search for indicators
      indicators = demisto.executeCommand("findIndicators", {"query": args.get("query"), "size": args.get("size")})[0][
          "Contents"]

      # return specific information for found indicators
      filtered_indicators = []
      fields = ['id', 'indicator_type', 'value', 'score']
      if args.get("add_fields_to_context"):
          fields = fields + args.get("add_fields_to_context").split(",")
          fields = [x.strip() for x in fields]  # clear out whitespace
      for indicator in indicators:
          style_indicator = {}
          for field in fields:
              style_indicator[field] = indicator.get(field, indicator.get("CustomFields", {}).get(field, "n/a"))
          style_indicator["verdict"] = scoreToReputation(style_indicator['score'])
          filtered_indicators.append(style_indicator)

      headers = fields + ["verdict"]
      markdown = tableToMarkdown("Indicators Found", filtered_indicators, headers)
      return markdown, filtered_indicators


  def main():
      args = demisto.args()
      try:
          readable_output, outputs = search_indicators(args)
          results = CommandResults(
              outputs_prefix='foundIndicators',
              outputs_key_field='id',
              readable_output=readable_output,
              outputs=outputs,
              ignore_auto_extract=True
          )
          return_results(results)
      except DemistoException as error:
          return_error(str(error), error)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('SearchIndicator', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python

args:
- description: The IPv4 address (or comma-delimited addresses) to check.
  isArray: true
  name: left
  required: true
- description: A comma-delimited list of IPv4 ranges in CIDR notation against which
    to match.
  isArray: true
  name: right
  required: true
comment: Determines whether an IPv4 address is contained in at least one of the comma-delimited
  CIDR ranges. Multiple IPv4 addresses can be passed comma-delimited and each will
  be tested.
commonfields:
  id: IsInCidrRanges
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.2.35
    packID: FiltersAndTransformers
    packName: Filters And Transformers
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: IsInCidrRanges
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('IsInCidrRanges', 'start', __line__())
  ### pack version: 1.2.35


  import ipaddress


  def validate_cidr(cidr: str):
      """
      Validates CIDR format.
      """
      try:
          ipaddress.ip_network(cidr)

      except ValueError as e:
          demisto.debug(f'Skipping "{cidr}": {e}')
          return False

      return True


  def main():
      """ Check if given IP (or IPs) address is part of a given CIDR (or a list of CIDRs).

      Args:
          ip_addresses (str): A list of IPs/IPv6s
          cidr_range_list (str): A list of CIDRs to be checked against.

      Returns:
          bool: True if given IP is part of given CIDR range.
      """

      ip_addresses = argToList(demisto.args()['left'])
      cidr_range_list = argToList(demisto.args()['right'])

      try:

          for ip in ip_addresses:

              try:
                  ip = ipaddress.ip_address(ip)

              except ValueError as e:
                  demisto.debug(f'Skipping "{ip}": {e}')
                  demisto.results(False)
                  continue

              in_range = any(ip in ipaddress.ip_network(cidr) for cidr in cidr_range_list if validate_cidr(cidr))
              demisto.results(in_range)

      except Exception as e:
          return_error(f'Failed to execute IsCIDRInRange. Error: {str(e)}')


  if __name__ == "__builtin__" or __name__ == "builtins":
      main()

  register_module_line('IsInCidrRanges', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- filter
type: python

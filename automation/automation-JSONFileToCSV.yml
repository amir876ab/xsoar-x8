args:
- description: Entry ID of json
  name: entryid
  required: true
- description: Output CSV filename
  name: filename
  required: true
- default: true
  defaultValue: ','
  description: CSV delimiter.
  name: delimiter
comment: Script to convert a War Room output JSON File to a CSV file.
commonfields:
  id: JSONFileToCSV
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.12.39
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: JSONFileToCSV
outputs:
- contextPath: File.Name
  description: Filename (only in case of report type=json)
  type: Unknown
- contextPath: File.Type
  description: File type e.g. "PE" (only in case of report type=json)
  type: Unknown
- contextPath: File.Size
  description: File size (only in case of report type=json)
  type: Unknown
- contextPath: File.MD5
  description: MD5 hash of the file (only in case of report type=json)
  type: Unknown
- contextPath: File.SHA1
  description: SHA1 hash of the file (only in case of report type=json)
  type: Unknown
- contextPath: File.SHA256
  description: SHA256 hash of the file (only in case of report type=json)
  type: Unknown
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('JSONFileToCSV', 'start', __line__())
  ### pack version: 1.12.39



  import json
  import io
  import csv


  def json_to_csv(data, delimiter):
      result = io.StringIO()
      csv_data = csv.writer(result, delimiter=delimiter)
      csv_headers = list(data[0].keys())
      csv_headers.sort()
      csv_data.writerow(csv_headers)

      for d in data:
          val_lst = [d[key] for key in csv_headers]
          csv_data.writerow(val_lst)

      return result.getvalue().strip()


  def main(entry_id, out_filename, delimiter):
      if isinstance(entry_id, list):
          entry_id = entry_id[0]

      file_info = {}

      try:
          file_info = demisto.getFilePath(entry_id)

      except Exception as e:
          return_error(f"Failed to get the file path for entry: {entry_id} the error message was {str(e)}")

      file_path = file_info.get("path")

      # Open file and read data
      with open(file_path, "r") as f:  # type: ignore
          dict_list = json.load(f)

      csv_string = json_to_csv(dict_list, delimiter)

      # Output CSV as a file to war-room
      demisto.results(fileResult(out_filename, csv_string))


  if __name__ in ["__builtin__", "builtins", "__main__"]:
      args = demisto.args()
      main(args.get("entryid"), args.get("filename"), args.get("delimiter", ","))

  register_module_line('JSONFileToCSV', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
timeout: 10m0s
type: python

args:
- default: true
  description: The list to apply the transformer to.
  isArray: true
  name: value
  required: true
- description: The attribute in the collection items to check equality against `equalTo`.
  name: field
  required: true
- description: The value to filter all items by in the collection.
  name: equalTo
  required: true
- description: The field to extract from each item (Optional).
  name: getField
  predefined:
  - ""
- auto: PREDEFINED
  defaultValue: "true"
  description: Whether the argument should be saved as a string (Optional).
  name: stringify
  predefined:
  - "true"
  - "false"
comment: "Return all items from the list where their given 'field' attribute is equal
  to 'equalTo' argument\n\nE.g. !WhereFieldEquals with the following arguments:\n
  - value=[{ \"name\": \"192.1,0.82\", \"type\": \"IP\" }, { \"name\": \"myFile.txt\",
  \"type\": \"File\" }, { \"name\": \"172.0.0.2\", \"type\": \"IP\" }]\n - field='type'\n
  - equalTo='IP'\n - getField='name' \n\nWill return all items names where field 'type'
  equals 'IP' - ['192.1,0.82', '172.0.0.2']."
commonfields:
  id: WhereFieldEquals
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.5.0
    itemVersion: 1.2.51
    packID: FiltersAndTransformers
    packName: Filters And Transformers
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
enabled: true
engineinfo: {}
mainengineinfo: {}
name: WhereFieldEquals
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  // pack version: 1.2.51
  function toBoolean(value) {
      if (typeof(value) === 'string') {
          if (['yes', 'true'].indexOf(value.toLowerCase()) != -1) {
              return true;
          } else if (['no', 'false'].indexOf(value.toLowerCase()) != -1) {
              return false;
          }
          throw 'Argument does not contain a valid boolean-like value';
      }
      return value ? true : false;
  }


  function whereFieldEquals() {
      // Handles the operation of finding a list of objects where the given field is present under the specified location.

      const valuesToSearch = argToList(args.value);
      const field = args.field;
      const equalTo = args.equalTo;
      const getField = args.getField;

      const foundMatches = [];
      for (const dictItem of valuesToSearch) {
          if (typeof dictItem === 'object' && dictItem[field] === equalTo) {
              if (getField) {
                  const value = dictItem[getField];
                  if (value) {
                      foundMatches.push(value);
                  }
              } else {
                  foundMatches.push(dictItem);
              }
          }
      }

      if (foundMatches.length === 1) {
          return foundMatches[0];
      }

      if (toBoolean(args.stringify || 'true')) {
          return JSON.stringify(foundMatches);
      } else {
          return foundMatches;
      }
  }

  try {
      return whereFieldEquals();
  } catch (error) {
      throw 'Error occurred while running the script:\n' + error;
  }
scripttarget: 0
system: true
tags:
- transformer
- general
- entirelist
type: javascript

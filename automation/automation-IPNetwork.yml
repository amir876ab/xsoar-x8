args:
- description: IP/CIDR, e.g. 192.168.0.0/24
  name: cidr
  required: true
comment: |
  Gather information regarding CIDR -
      1. Broadcast_address
      2. CIDR
      3. First_address
      4. Last address
      5. Max prefix len
      6. Num addresses
      7. Private
      8. Version
commonfields:
  id: IPNetwork
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.12.47
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.66339
engineinfo: {}
mainengineinfo: {}
name: IPNetwork
outputs:
- contextPath: Network.CIDR
  description: Network CIDR.
  type: String
- contextPath: Network.Num_addresses
  description: Number of availble addresses in the CIDR.
  type: Number
- contextPath: Network.First_address
  description: First address in the network CIDR.
  type: String
- contextPath: Network.Last_address
  description: Last address in the network CIDR.
  type: String
- contextPath: Network.Version
  description: Version of IP.
  type: Number
- contextPath: Network.Private
  description: True if IP is private.
  type: Boolean
- contextPath: Network.Max_prefix_len
  description: Max prefix length of CIDR.
  type: Number
- contextPath: Network.Broadcast_address
  description: Broadcast address of CIDR.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('IPNetwork', 'start', __line__())
  ### pack version: 1.12.47


  # STD imports
  import ipaddress
  from typing import Dict


  # Local imports


  def ip_cidr(cidr: str) -> Dict[str, str]:
      """ Gather info regarding the supplied network

      Args:
          cidr(str): IPv4/CIDR or IPv6/CIDR

      Returns:
          dict: Entry context of single network
      """
      try:
          ip_network = ipaddress.ip_network(cidr, strict=False)
          internal_ec = {
              'CIDR': cidr,
              'Version': ip_network.version,
              'Private': ip_network.is_private,
              'Max_prefix_len': ip_network.max_prefixlen,
              'Num_addresses': ip_network.num_addresses,
              'Broadcast_address': str(ip_network.broadcast_address),
              'First_address': str(ip_network[0]),
              'Last_address': str(ip_network[-1])
          }
          return internal_ec  # type: ignore
      except ValueError:
          return {}


  def cidr_command(args: Dict[str, str]) -> CommandResults:
      """ Perform command on given IP/CIDR

      Args:
          args: argument from command runnning in demisto

      Returns:

      """
      cidr_list = argToList(args.get('cidr'))
      ec = [ip_cidr(cidr) for cidr in cidr_list]
      markdown = tableToMarkdown(name=f'CIDR - {args.get("cidr")}',
                                 t=ec,
                                 removeNull=True)
      return CommandResults(
          outputs_prefix='Network',
          outputs=ec,
          readable_output=markdown
      )


  def main():
      try:
          return_results(cidr_command(demisto.args()))
      except Exception as ex:
          return_error(f'Failed to execute IPNetwork script. Error: {str(ex)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('IPNetwork', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- ip
type: python

contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.9.0
    itemVersion: 2.1.11
    packID: PAN-OS
    packName: PAN-OS by Palo Alto Networks
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
description: |-
  This playbook creates a DNS sinkhole in a PAN-OS firewall. It does the following:
  1. Finds a security rule that allows DNS traffic from the internal network to the internet using the "Security Policy Match" feature against traffic from the internal DNS server/s to the public DNS server.
  2. Creates or adds an existing anti-spyware security profile to the security rule/s that were found.
  3. Sets the DNS Signature Source under the DNS Policies configuration of the security profile with the "sinkhole" action.
  4. Creates an address object for the sinkhole address so that it can be referenced later in a deny rule (the sinkhole IP constantly rotates).
  5. Creates a new security rule to deny traffic to the sinkhole address object, in order to generate traffic logs for the compromised systems. The IPs of the compromised systems can then be retrieved using the "PAN-OS - Extract IPs From Traffic Logs To Sinkhole" playbook.

  Once the configuration is completed, the playbook will create a Tag object and tag the relevant security rules to indicate that sinkholing is configured. That tag will be checked in consecutive playbook runs in order to minimize the actions done on the firewall and time time spent in the playbook execution.

  How it works:
  A DNS sinkhole can be used to identify infected hosts on a network where there is an internal DNS Server in-route to the firewall that causes the reference of the original source IP address of the host that first originated the query to be lost (the query is received by the internal DNS server, and the internal DNS server sources a new query if the name-to-IP resolution is not locally cached).

  This causes the firewall to report observations of malicious DNS queries in the Threat logs where the source IP of the malicious DNS query is the Internal DNS server, which would force the administrator to look into the DNS Server logs to try to trace down what was the infected host that originally sourced the malicious DNS query.

  After a security profile with a "sinkhole" action for domains that are listed in the DNS signature source is applied to a rule that allows DNS traffic from the internal server/s to the external one, the threat logs will show that requests from the internal DNS server/s were sinkholed. However, the compromised systems will not appear in those logs.

  In order to find the IP addresses of those systems, a new rule denying all requests to our sinkhole address needs to be created. Since the infected systems received a forged DNS response (due to the security profile involved in our previous step), they will now try to connect to the sinkhole address, assuming it is their C&C server. The new rule will deny the subsequent attempts of those systems when they try to access the sinkhole address, and log them.


  Assumptions:
  - The domains that should be sinkholed are already in a DNS signature source. It can be one of the following sources available in PAN-OS:
  1. An existing External Dynamic List (EDL) of type Domain configured in the PAN-OS firewall. Note: XSOAR simplifies the process of creating an EDL, with the Export Generic Indicators Service integration.
  2. Palo Alto Networks Content-delivered malicious domains
  3. DNS Security Categories available with a DNS Security subscription.
  - There is at least one internal DNS server that is sending the DNS requests out through the firewall to a specific public DNS server.
id: PAN-OS - Configure DNS Sinkhole
inputs:
- description: |-
    The name of the signature source that contains the domains to sinkhole. It is used by the security profile to check if DNS requests for these domains are being sent through the firewall. Supported signature sources are: Custom EDLs of type Domain, Palo Alto Networks Content-delivered malicious domains, and DNS Security Categories.

    To find your available DNS signature sources in PAN-OS, navigate to Objects > Security Profiles > Anti-Spyware.
    Click on the name of an existing profile or click Add, then open the DNS Policies tab.

    Note: using External Dynamic Lists (EDLs) or DNS Security as signature sources requires a "DNS Security" subscription. If you don't have one, you can keep the default value of "default-paloalto-dns", which is part of the Palo Alto Networks Content.
  key: DNSSignatureSource
  playbookInputQuery: null
  required: true
  value:
    simple: default-paloalto-dns
- description: |-
    The name of the Anti-Spyware Security Profile that will be applied to the DNS related rule, in order to filter the malicious domains and facilitate the sinkhole action. The profile has to be an anti-spyware profile that the user wants the playbook to modify. The playbook will apply this profile to a security rule currently allowing DNS traffic.
    If a security profile with the specified name does not exist, it will be created automatically.
    Afterwards, the playbook will modify the profile to sinkhole any traffic to the domains found in the DNS signature source defined in the playbook input.

    If you're not sure, leave the default value of this input.
  key: SecurityProfileName
  playbookInputQuery: null
  required: false
  value:
    simple: Sinkhole Anti Spyware Profile
- description: The IP of the primary internal DNS server. Used to find a policy that
    matches the malicious DNS queries that go out from the internal DNS server to
    the firewall. The idea is to find a policy that allows DNS traffic in order to
    sinkhole that traffic when used for resolving malicious domains found in our signature
    source.
  key: PrimaryInternalDNSServerIP
  playbookInputQuery: null
  required: true
  value: {}
- description: Optional - the IP of the secondary internal DNS server. Used to find
    a policy that matches the malicious DNS queries that go out from the internal
    DNS server to the firewall. The idea is to find a policy that allows DNS traffic
    in order to sinkhole that traffic when used for resolving malicious domains found
    in our signature source.
  key: SecondaryInternalDNSServerIP
  playbookInputQuery: null
  required: false
  value: {}
- description: |-
    The IP of the public DNS server that the organization is using to resolve external domains. This is needed to find the rule that allows DNS requests so that malicious ones can be sinkholed by attaching a security profile to that rule.

    If there is currently no rule to allow DNS traffic from the internal DNS server to the internet, the user will be prompted to approve the creation of a new rule that allows DNS traffic from the internal DNS server/s to the IP specified in this input's value.
  key: PublicDNSServerIP
  playbookInputQuery: null
  required: true
  value:
    simple: 8.8.8.8
- description: |-
    Optional - the name of the security rule that will allow DNS traffic.
    If permission is granted and no other rule is currently allowing DNS, the playbook will create a new rule with the name specified in this value to allow DNS traffic from inside the network to the outside internet.
  key: RuleNameToAllowDNS
  playbookInputQuery: null
  required: false
  value:
    simple: Internal DNS to External DNS - Allow DNS Traffic
- description: |-
    Determines whether the playbook can automatically create a rule that specifically allows DNS traffic from the internal DNS servers to the public DNS server configured in the playbook inputs.
    Possible values and their meanings are as follows:
    True - create such a rule automatically if one does not exist (Warning - this will allow previously unallowed traffic).
    False - do not create such a rule automatically.

    If a value of "False" is specified, the playbook will check if the NetworkAdminEmail input is specified. If it is, the playbook will seek approval to create the rule, from the email specified in that input. If no email is specified, the playbook will abort without making any changes.
  key: AutoCreateRuleToAllowDNS
  playbookInputQuery: null
  required: false
  value:
    simple: "False"
- description: |-
    Optional - the email of the person who should approve the creation of a new security policy rule in the firewall. If no rule allows internal DNS traffic to go outside, the playbook will send an email to the email specified in this input, asking to approve the creation of such rule.
    If no email is specified, and the AutoCreateRuleToAllowDNS input is set to False, the playbook will abort without making any changes, as such a rule is mandatory for the flow of the playbook.
  key: NetworkAdminEmail
  playbookInputQuery: null
  required: false
  value: {}
- description: |-
    The name of the rule that will be created  to deny traffic to the sinkhole address. This is required so that traffic logs will reveal the endpoints attempting to connect to their C&C (which by the end of this playbook will be sinkholed).
    If a rule with the specified name does not exist, one will be created. The new rule will be placed before rules that allow DNS traffic, as recommended by the PAN-OS best practices.
    If no value is specified, and a rule for denying the traffic to the sinkhole does not exist, one with the name "Deny To Sinkhole" will be created.
  key: RuleNameToDenyToSinkhole
  playbookInputQuery: null
  required: false
  value:
    simple: Deny To Sinkhole
- description: |-
    Whether to overwrite an existing anti-spyware security profile if one is currently applied to the rule that allows DNS traffic.

    If set to True - if the rule already has a different anti-spyware profile applied to it, it will be overwritten with the one specified in the SecurityProfileName input.

    If set to False - if the rule already has a different anti-spyware profile applied to it, the playbook will use that profile when sinkholing domains from the specified DNS Signature Source.

    If you are not sure whether to overwrite it or not - leave this as False, since an existing security profile may have additional logic configured to it.
  key: OverwriteExistingProfile
  playbookInputQuery: null
  required: true
  value:
    simple: "False"
name: PAN-OS - Configure DNS Sinkhole
outputs: []
starttaskid: "0"
system: true
tags:
- Sinkhole
- PAN-OS
- Malware
- Remediation
tasks:
  "0":
    continueonerrortype: ""
    id: "0"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "77"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: f5e8c7ff-cfec-4e23-8a73-354b6c1dd7d5
      iscommand: false
      name: ""
      version: -1
    taskid: f5e8c7ff-cfec-4e23-8a73-354b6c1dd7d5
    timertriggers: []
    type: start
    view: |-
      {
        "position": {
          "x": 450,
          "y": -60
        }
      }
  "6":
    continueonerrortype: ""
    id: "6"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "56"
    note: false
    quietmode: 0
    scriptarguments:
      action:
        simple: sinkhole
      anti_spyware_profile_name:
        complex:
          root: AntiSpywareProfileNameApplied
          transformers:
          - operator: uniq
      dns_signature_source:
        complex:
          root: inputs.DNSSignatureSource
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Updates the anti-spyware profile that is applied to the rule/s
        to sinkhole traffic to domains from the DNS signature source specified in
        the DNSSignatureSource playbook input.
      id: 454902e5-e762-4600-8be5-c5e40078caaa
      iscommand: true
      name: Update security profile to sinkhole traffic to the domains
      script: '|||pan-os-apply-dns-signature-policy'
      type: regular
      version: -1
    taskid: 454902e5-e762-4600-8be5-c5e40078caaa
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 450,
          "y": 2200
        }
      }
  "7":
    continueonerrortype: ""
    id: "7"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "73"
    note: false
    quietmode: 0
    scriptarguments:
      description:
        simple: XSOAR - DNS Sinkhole Configuration
      interval_in_seconds:
        simple: "10"
      polling:
        simple: "true"
      timeout:
        simple: "300"
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Commits a configuration to the Palo Alto firewall or Panorama,
        validates if a commit was successful if using polling="true" otherwise does
        not validate if the commit was successful. Committing to Panorama does not
        push the configuration to the firewalls. To push the configuration, run the
        panorama-push-to-device-group command.
      id: eda4c8ea-03a8-4c4f-858b-9b970e80588f
      iscommand: true
      name: Commit changes
      script: '|||pan-os-commit'
      type: regular
      version: -1
    taskid: eda4c8ea-03a8-4c4f-858b-9b970e80588f
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 670,
          "y": 5610
        }
      }
  "10":
    continueonerrortype: ""
    id: "10"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "44"
    note: false
    quietmode: 0
    scriptarguments:
      destination:
        complex:
          root: inputs.PublicDNSServerIP
      destination-port:
        simple: "53"
      protocol:
        simple: "17"
      source:
        complex:
          root: inputs.PrimaryInternalDNSServerIP
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Tries to find a rule that allows DNS traffic from the primary internal
        DNS server to the public DNS server.
      id: 7144b4a8-b36c-44f8-86d2-e2928ce14916
      iscommand: true
      name: Match rule to traffic from primary internal DNS to public DNS
      script: '|||pan-os-security-policy-match'
      type: regular
      version: -1
    taskid: 7144b4a8-b36c-44f8-86d2-e2928ce14916
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 450,
          "y": 375
        }
      }
  "20":
    continueonerrortype: ""
    id: "20"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "87"
    note: false
    quietmode: 0
    scriptarguments:
      action:
        simple: deny
      destination:
        complex:
          root: SinkholeAddressObjectName
      dst:
        complex:
          root: RuleNamesAllowingDNS
          transformers:
          - operator: FirstArrayElement
      rulename:
        complex:
          root: inputs.RuleNameToDenyToSinkhole
          transformers:
          - args:
              applyIfEmpty: {}
              defaultValue:
                value:
                  simple: Deny To Sinkhole
            operator: SetIfEmpty
      source:
        simple: any
      where:
        simple: before
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: |-
        Creates a new rule to deny traffic to the sinkhole address object, before the first rule that allows DNS traffic. This in turn creates logs for the IPs making traffic to the sinkhole address.
        It's best practice to deny traffic to the sinkhole address.
      id: 90e857d3-c4c7-45bf-88fd-112c3c8fdf55
      iscommand: true
      name: Create new deny rule preceding the first DNS allowing rule
      script: '|||pan-os-create-rule'
      type: regular
      version: -1
    taskid: 90e857d3-c4c7-45bf-88fd-112c3c8fdf55
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 390,
          "y": 4350
        }
      }
  "22":
    continueonerrortype: ""
    id: "22"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "78"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: 176ec972-3563-4802-851d-f1a2ecd7720e
      iscommand: false
      name: Create Sinkhole Address Object
      type: title
      version: -1
    taskid: 176ec972-3563-4802-851d-f1a2ecd7720e
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 670,
          "y": 2820
        }
      }
  "36":
    conditions:
    - condition:
      - - ignorecase: true
          left:
            iscontext: true
            value:
              simple: inputs.AutoCreateRuleToAllowDNS
          operator: isEqualString
          right:
            value:
              simple: "True"
      label: Yes, automatically
    - condition:
      - - ignorecase: true
          left:
            iscontext: true
            value:
              simple: inputs.AutoCreateRuleToAllowDNS
          operator: isEqualString
          right:
            value:
              simple: "False"
      - - left:
            iscontext: true
            value:
              simple: inputs.NetworkAdminEmail
          operator: isNotEmpty
      label: Yes, with approval
    continueonerrortype: ""
    id: "36"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#default#':
      - "75"
      Yes, automatically:
      - "55"
      Yes, with approval:
      - "67"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: |-
        Checks whether a new rule that allows DNS traffic from the internal DNS server/s to the public DNS server can be created.
        The rule will be placed high in the rule list.
      id: 36e39093-785b-4283-8c04-a81f58ca06ec
      iscommand: false
      name: Can a new rule be created?
      type: condition
      version: -1
    taskid: 36e39093-785b-4283-8c04-a81f58ca06ec
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": -980,
          "y": 1825
        }
      }
  "39":
    continueonerrortype: ""
    id: "39"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "40"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: 32b6f9e5-4381-4d22-8d29-14198b922048
      iscommand: false
      name: Deny Traffic to Sinkhole Address Object - Creates Logs
      type: title
      version: -1
    taskid: 32b6f9e5-4381-4d22-8d29-14198b922048
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 670,
          "y": 3810
        }
      }
  "40":
    continueonerrortype: ""
    id: "40"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "41"
    note: false
    quietmode: 0
    scriptarguments:
      query:
        complex:
          root: SinkholeAddressObjectName
          transformers:
          - args:
              prefix:
                value:
                  simple: (destination/member eq '
              suffix: {}
            operator: concat
          - args:
              prefix: {}
              suffix:
                value:
                  simple: ''')'
            operator: concat
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Searches for rules that apply to traffic to the sinkhole address.
        Although it's recommended to deny traffic to the sinkhole address, because
        packets are dropped anyway, the search also looks for allow rules too. This
        is done because the goal is to log traffic to it, so the action is irrelevant.
      id: 64cc7b9e-62df-4dea-8159-6e172896cdaf
      iscommand: true
      name: Search for existing rule denying traffic to sinkhole
      script: '|||pan-os-list-rules'
      type: regular
      version: -1
    taskid: 64cc7b9e-62df-4dea-8159-6e172896cdaf
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 670,
          "y": 3940
        }
      }
  "41":
    conditions:
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                accessor: Name
                filters:
                - - left:
                      iscontext: true
                      value:
                        simple: Panorama.SecurityRule.Destination
                    operator: isEqualString
                    right:
                      iscontext: true
                      value:
                        simple: SinkholeAddressObjectName
                root: Panorama.SecurityRule
          operator: isNotEmpty
          right:
            value: {}
      label: "yes"
    continueonerrortype: ""
    id: "41"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#default#':
      - "20"
      "yes":
      - "87"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Checks whether a rule was found.
      id: 4bf3fe72-c342-4f32-8b0e-ed3523c8a0d6
      iscommand: false
      name: Does the rule already exist?
      type: condition
      version: -1
    taskid: 4bf3fe72-c342-4f32-8b0e-ed3523c8a0d6
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 670,
          "y": 4130
        }
      }
  "44":
    conditions:
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                root: inputs.SecondaryInternalDNSServerIP
          operator: isNotEmpty
          right:
            value: {}
      label: "yes"
    continueonerrortype: ""
    id: "44"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#default#':
      - "83"
      "yes":
      - "45"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Checks if there's another DNS internal server configured in the
        playbook inputs.
      id: 47fb9736-cc26-4baa-8647-9bba4fbcdccd
      iscommand: false
      name: Is there a secondary DNS server?
      type: condition
      version: -1
    taskid: 47fb9736-cc26-4baa-8647-9bba4fbcdccd
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 450,
          "y": 540
        }
      }
  "45":
    continueonerrortype: ""
    id: "45"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "83"
    note: false
    quietmode: 0
    scriptarguments:
      destination:
        complex:
          root: inputs.PublicDNSServerIP
      destination-port:
        simple: "53"
      protocol:
        simple: "17"
      source:
        complex:
          root: inputs.SecondaryInternalDNSServerIP
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Tries to find a rule that allows DNS traffic from the primary internal
        DNS server to the public DNS server.
      id: 04315d1e-bcfd-4cc8-837f-12390aa8f6ac
      iscommand: true
      name: Match rule to traffic from secondary internal DNS to public DNS
      script: '|||pan-os-security-policy-match'
      type: regular
      version: -1
    taskid: 04315d1e-bcfd-4cc8-837f-12390aa8f6ac
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 210,
          "y": 720
        }
      }
  "46":
    conditions:
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                accessor: Name
                filters:
                - - ignorecase: true
                    left:
                      iscontext: true
                      value:
                        simple: Panorama.SecurityPolicyMatch.Rules.Action
                    operator: isEqualString
                    right:
                      value:
                        simple: allow
                root: Panorama.SecurityPolicyMatch.Rules
                transformers:
                - operator: uniq
                - operator: count
          operator: isEqualString
          right:
            value:
              simple: "1"
      label: One Rule For Both Servers
    - condition:
      - - ignorecase: true
          left:
            iscontext: true
            value:
              complex:
                accessor: Name
                filters:
                - - ignorecase: true
                    left:
                      iscontext: true
                      value:
                        simple: Panorama.SecurityPolicyMatch.Rules.Action
                    operator: isEqualString
                    right:
                      value:
                        simple: allow
                root: Panorama.SecurityPolicyMatch.Rules
                transformers:
                - operator: uniq
                - operator: count
          operator: isEqualString
          right:
            value:
              simple: "2"
      label: Two Rules
    continueonerrortype: ""
    id: "46"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#default#':
      - "36"
      One Rule For Both Servers:
      - "54"
      Two Rules:
      - "50"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: If there are a primary and a secondary internal DNS servers, then
        there may be 2 separate rules that permit or block their traffic to the internet.
        If there are 2 rules - then the profiles of both of them will be edited and
        applied as needed.
      id: 1618c361-3718-444e-81ba-bc2f3457a9f0
      iscommand: false
      name: How many rules allow DNS from our internal servers?
      type: condition
      version: -1
    taskid: 1618c361-3718-444e-81ba-bc2f3457a9f0
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 450,
          "y": 1610
        }
      }
  "50":
    continueonerrortype: ""
    id: "50"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "52"
      - "53"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: cf91cbb1-981c-426f-8959-1c96385c1bba
      iscommand: false
      name: Edit Both Rules
      type: title
      version: -1
    taskid: cf91cbb1-981c-426f-8959-1c96385c1bba
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 170,
          "y": 1840
        }
      }
  "52":
    continueonerrortype: ""
    id: "52"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    loop:
      exitCondition: ""
      iscommand: false
      max: 100
      wait: 1
    nexttasks:
      '#none#':
      - "6"
    note: false
    quietmode: 0
    scriptarguments:
      OverwriteProfileIfExists:
        complex:
          root: inputs.OverwriteExistingProfile
      RuleName:
        complex:
          accessor: Name
          filters:
          - - ignorecase: true
              left:
                iscontext: true
                value:
                  simple: Panorama.SecurityPolicyMatch.Rules.Action
              operator: isEqualString
              right:
                value:
                  simple: allow
          root: Panorama.SecurityPolicyMatch.Rules
          transformers:
          - args:
              index:
                value:
                  simple: "1"
            operator: atIndex
      SecurityProfileName:
        complex:
          root: inputs.SecurityProfileName
    separatecontext: true
    skipunavailable: false
    task:
      brand: ""
      description: |-
        This playbook is used to add an Anti-Spyware security profile to a rule in PAN-OS in a safe manner. This means that it first checks if there's already a security profile attached, and if there is - it won't necessarily overwrite it.
        In addition, it checks if there's a Security Profile Group attached, and if there is, it will try to add the Security Profile to the group safely.
        In case we are trying to apply a Security Profile that doesn't exist yet - the playbook will create it too.
      id: 9c8c2e9f-378e-485c-8510-05a6efdcce44
      iscommand: false
      name: PAN-OS - Add Anti-Spyware Security Profile To Rule
      playbookId: PAN-OS - Add Anti-Spyware Security Profile To Rule
      type: playbook
      version: -1
    taskid: 9c8c2e9f-378e-485c-8510-05a6efdcce44
    timertriggers: []
    type: playbook
    view: |-
      {
        "position": {
          "x": 170,
          "y": 2010
        }
      }
  "53":
    continueonerrortype: ""
    id: "53"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    loop:
      exitCondition: ""
      iscommand: false
      max: 100
      wait: 1
    nexttasks:
      '#none#':
      - "6"
    note: false
    quietmode: 0
    scriptarguments:
      OverwriteProfileIfExists:
        complex:
          root: inputs.OverwriteExistingProfile
      RuleName:
        complex:
          accessor: Name
          filters:
          - - ignorecase: true
              left:
                iscontext: true
                value:
                  simple: Panorama.SecurityPolicyMatch.Rules.Action
              operator: isEqualString
              right:
                value:
                  simple: allow
          root: Panorama.SecurityPolicyMatch.Rules
          transformers:
          - args:
              index:
                value:
                  simple: "0"
            operator: atIndex
      SecurityProfileName:
        complex:
          root: inputs.SecurityProfileName
    separatecontext: true
    skipunavailable: false
    task:
      brand: ""
      description: |-
        This playbook is used to add an Anti-Spyware security profile to a rule in PAN-OS in a safe manner. This means that it first checks if there's already a security profile attached, and if there is - it won't necessarily overwrite it.
        In addition, it checks if there's a Security Profile Group attached, and if there is, it will try to add the Security Profile to the group safely.
        In case we are trying to apply a Security Profile that doesn't exist yet - the playbook will create it too.
      id: aeb6d47e-d550-4844-8261-20cdc8dcee7b
      iscommand: false
      name: PAN-OS - Add Anti-Spyware Security Profile To Rule
      playbookId: PAN-OS - Add Anti-Spyware Security Profile To Rule
      type: playbook
      version: -1
    taskid: aeb6d47e-d550-4844-8261-20cdc8dcee7b
    timertriggers: []
    type: playbook
    view: |-
      {
        "position": {
          "x": 710,
          "y": 2010
        }
      }
  "54":
    continueonerrortype: ""
    id: "54"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "53"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: 1e165f1c-1c44-49c7-867b-fdb9f3448453
      iscommand: false
      name: Edit One Rule
      type: title
      version: -1
    taskid: 1e165f1c-1c44-49c7-867b-fdb9f3448453
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 710,
          "y": 1830
        }
      }
  "55":
    continueonerrortype: ""
    id: "55"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "69"
    note: false
    quietmode: 0
    scriptarguments:
      action:
        simple: allow
      application:
        simple: dns
      destination:
        complex:
          root: inputs.PublicDNSServerIP
      rulename:
        complex:
          root: inputs.RuleNameToAllowDNS
      source:
        complex:
          root: inputs.PrimaryInternalDNSServerIP
          transformers:
          - args:
              item:
                iscontext: true
                value:
                  simple: inputs.SecondaryInternalDNSServerIP
              raw: {}
            operator: AppendIfNotEmpty
      where:
        simple: top
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Creates a policy rule.
      id: 7dd07f27-ee4f-45d9-83d4-98cd96d33d44
      iscommand: true
      name: Create a new rule to allow DNS traffic
      script: '|||pan-os-create-rule'
      type: regular
      version: -1
    taskid: 7dd07f27-ee4f-45d9-83d4-98cd96d33d44
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": -850,
          "y": 2220
        }
      }
  "56":
    continueonerrortype: ""
    id: "56"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "22"
    note: false
    quietmode: 0
    scriptarguments:
      key:
        simple: RuleNamesAllowingDNS
      value:
        complex:
          accessor: Name
          root: Panorama.SecurityPolicyMatch.Rules
          transformers:
          - operator: uniq
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Saves the names of the security rules that allow DNS traffic outside,
        which were found by a session-match previously, in a new context key. This
        is task is done to normalize the data as we need to refer to that rule later
        on in the playbook.
      id: 7dd5ba54-3323-4f7f-8fe0-a5058da934de
      iscommand: false
      name: Save rules allowing DNS in a new key
      script: Set
      type: regular
      version: -1
    taskid: 7dd5ba54-3323-4f7f-8fe0-a5058da934de
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 390,
          "y": 2615
        }
      }
  "58":
    continueonerrortype: ""
    id: "58"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "10"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: edb32439-f81d-47e9-8aa5-969107c3959b
      iscommand: false
      name: Find Policy To Edit
      type: title
      version: -1
    taskid: edb32439-f81d-47e9-8aa5-969107c3959b
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 450,
          "y": 245
        }
      }
  "59":
    continueonerrortype: ""
    id: "59"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "46"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: 88bfc3ec-a62e-4149-8491-e241d0873e60
      iscommand: false
      name: Apply Sinkhole Profile To Rule
      type: title
      version: -1
    taskid: 88bfc3ec-a62e-4149-8491-e241d0873e60
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 450,
          "y": 1480
        }
      }
  "67":
    continueonerrortype: ""
    id: "67"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    message:
      bcc: null
      body:
        simple: |-
          Please approve the creation of a new security rule in PAN-OS for the purpose of creating a DNS sinkhole. The new rule will allow new internet traffic as described below:
          Rule name: ${inputs.RuleNameToAllowDNS}
          From: ${inputs.PrimaryInternalDNSServerIP}   ${inputs.SecondaryInternalDNSServerIP} (internal DNS server/s)
          To: ${inputs.PublicDNSServerIP} (public DNS server)
          Action: Allow
          Application: DNS
          Location: Top

          Do you want to allow the playbook to create this rule?
      cc: null
      format: ""
      methods:
      - email
      replyOptions:
      - "Yes"
      - "No"
      subject:
        simple: Approve creation of a new security rule in PAN-OS
      timings:
        completeafterreplies: 1
        completeaftersla: false
        completeafterv2: true
        retriescount: 2
        retriesinterval: 360
      to:
        complex:
          root: inputs.NetworkAdminEmail
    nexttasks:
      "No":
      - "68"
      "Yes":
      - "55"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Gets approval to create a new rule that allows DNS traffic from
        the internal DNS server/s to the public DNS server being used. The user should
        know which public DNS they're using and they should provide it.
      id: 74695c6e-5035-4e72-8412-fee6fda7c1f6
      iscommand: false
      name: Is the creation approved?
      type: condition
      version: -1
    taskid: 74695c6e-5035-4e72-8412-fee6fda7c1f6
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": -650,
          "y": 2020
        }
      }
  "68":
    continueonerrortype: ""
    id: "68"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "76"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: |-
        Please create a new security rule in PAN-OS with the following information:

        Rule name: ${inputs.RuleNameToAllowDNS}
        From: ${inputs.PrimaryInternalDNSServerIP}   ${inputs.SecondaryInternalDNSServerIP} (internal DNS server/s)
        To: ${inputs.PublicDNSServerIP} (public DNS server)
        Action: Allow
        Application: DNS
        Location: Top
      id: f3fbadc6-2c66-4ab7-801b-529dcfbca5d4
      iscommand: false
      name: Create the rule manually according to description
      type: regular
      version: -1
    taskid: f3fbadc6-2c66-4ab7-801b-529dcfbca5d4
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": -440,
          "y": 2220
        }
      }
  "69":
    continueonerrortype: ""
    id: "69"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "22"
    note: false
    quietmode: 0
    scriptarguments:
      key:
        simple: RuleNamesAllowingDNS
      value:
        complex:
          root: inputs.RuleNameToAllowDNS
          transformers:
          - operator: uniq
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Saves the name of the new security rule that has just been created
        to allow DNS traffic outside in a new context key. This is task is done to
        normalize the data as we need to refer to that rule later on in the playbook.
      id: 1bd5eda5-0cfc-47d4-862a-88fb64a8c99f
      iscommand: false
      name: Save new rule allowing DNS in a new key
      script: Set
      type: regular
      version: -1
    taskid: 1bd5eda5-0cfc-47d4-862a-88fb64a8c99f
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": -50,
          "y": 2615
        }
      }
  "73":
    continueonerrortype: ""
    id: "73"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: 0acacc94-1156-48a2-861b-6435fb7249de
      iscommand: false
      name: Done
      type: title
      version: -1
    taskid: 0acacc94-1156-48a2-861b-6435fb7249de
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 670,
          "y": 5920
        }
      }
  "75":
    continueonerrortype: ""
    id: "75"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "73"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: ca9d57bc-b5dd-450b-8f13-8d3c06339ef6
      iscommand: false
      name: Sinkhole Cannot Be Created
      type: title
      version: -1
    taskid: ca9d57bc-b5dd-450b-8f13-8d3c06339ef6
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": -1440,
          "y": 2615
        }
      }
  "76":
    continueonerrortype: ""
    id: "76"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      "No":
      - "75"
      "Yes":
      - "69"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Asks the user whether they created the rule to allow DNS traffic
        or not.
      id: 5882ab7e-2537-4d7a-8a9d-ee972b9680e0
      iscommand: false
      name: Did you create the rule?
      type: condition
      version: -1
    taskid: 5882ab7e-2537-4d7a-8a9d-ee972b9680e0
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": -440,
          "y": 2390
        }
      }
  "77":
    continueonerrortype: ""
    id: "77"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#default#':
      - "75"
      "yes":
      - "58"
    note: false
    quietmode: 0
    scriptarguments:
      brandname:
        simple: Panorama
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Returns 'yes' if integration brand is available. Otherwise returns
        'no'
      id: 821ddf4e-cfa2-40ac-82bb-1af3aae1587b
      iscommand: false
      name: Is PAN-OS enabled?
      script: IsIntegrationAvailable
      type: condition
      version: -1
    taskid: 821ddf4e-cfa2-40ac-82bb-1af3aae1587b
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 450,
          "y": 60
        }
      }
  "78":
    continueonerrortype: ""
    id: "78"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "79"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Returns a list of addresses.
      id: 7710dec9-3d6a-4e0d-8766-8f1a6f4379d7
      iscommand: true
      name: Get all the address objects
      script: '|||pan-os-list-addresses'
      type: regular
      version: -1
    taskid: 7710dec9-3d6a-4e0d-8766-8f1a6f4379d7
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 670,
          "y": 2960
        }
      }
  "79":
    conditions:
    - condition:
      - - ignorecase: true
          left:
            iscontext: true
            value:
              complex:
                accessor: Name
                filters:
                - - ignorecase: true
                    left:
                      iscontext: true
                      value:
                        simple: Panorama.Addresses.FQDN
                    operator: isEqualString
                    right:
                      value:
                        simple: sinkhole.paloaltonetworks.com
                root: Panorama.Addresses
          operator: isNotEmpty
      label: "yes"
    continueonerrortype: ""
    id: "79"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#default#':
      - "81"
      "yes":
      - "80"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Checks whether there is an existing address object with the FQDN
        of sinkhole.paloaltonetworks.com.
      id: c390ba73-0bd7-4eb9-823f-247f7631d497
      iscommand: false
      name: Is there an address object for the sinkhole address?
      type: condition
      version: -1
    taskid: c390ba73-0bd7-4eb9-823f-247f7631d497
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 670,
          "y": 3140
        }
      }
  "80":
    continueonerrortype: ""
    id: "80"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "39"
    note: false
    quietmode: 0
    scriptarguments:
      key:
        simple: SinkholeAddressObjectName
      value:
        complex:
          accessor: Name
          filters:
          - - ignorecase: true
              left:
                iscontext: true
                value:
                  simple: Panorama.Addresses.FQDN
              operator: isEqualString
              right:
                value:
                  simple: sinkhole.paloaltonetworks.com
          root: Panorama.Addresses
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Saves the name of the sinkhole address object.
      id: 810d1944-57ce-404c-8522-0a3dc8362512
      iscommand: false
      name: Save the name of the address object
      script: Set
      type: regular
      version: -1
    taskid: 810d1944-57ce-404c-8522-0a3dc8362512
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 670,
          "y": 3565
        }
      }
  "81":
    continueonerrortype: ""
    id: "81"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "80"
    note: false
    quietmode: 0
    scriptarguments:
      description:
        simple: The address that resolves to the current Palo Alto Networks Sinkhole
          IP, which constantly rotates.
      fqdn:
        simple: sinkhole.paloaltonetworks.com
      name:
        simple: Sinkhole Address
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Creates an address object for the sinkhole FQDN. This is needed
        because the sinkhole IP rotates, and in order to create a rule that denies
        traffic to it, an address object is needed.
      id: 7c148a00-fcbf-45d0-898f-120d003816e7
      iscommand: true
      name: Create a new address object for the sinkhole address
      script: '|||pan-os-create-address'
      type: regular
      version: -1
    taskid: 7c148a00-fcbf-45d0-898f-120d003816e7
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 420,
          "y": 3350
        }
      }
  "82":
    conditions:
    - condition:
      - - left:
            value:
              simple: Sinkhole_Configured
          operator: in
          right:
            iscontext: true
            value:
              simple: ExistingTags
      label: "yes"
    continueonerrortype: ""
    id: "82"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#default#':
      - "59"
      "yes":
      - "85"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Checks whether there is a tag called "Sinkhole_Configured" in at
        least one rule that allows traffic from the internal DNS server to the public
        one.
      id: 72cb80e2-f783-41ee-8843-571a2a08e917
      iscommand: false
      name: Is there a tag indicating that sinkhole is configured?
      type: condition
      version: -1
    taskid: 72cb80e2-f783-41ee-8843-571a2a08e917
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 960,
          "y": 1210
        }
      }
  "83":
    continueonerrortype: ""
    id: "83"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "84"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: 81ca4acd-f9fd-4d1f-8254-2642e3977792
      iscommand: false
      name: Check Sinkhole Configuration
      type: title
      version: -1
    taskid: 81ca4acd-f9fd-4d1f-8254-2642e3977792
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 960,
          "y": 915
        }
      }
  "84":
    continueonerrortype: ""
    id: "84"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "82"
    note: false
    quietmode: 0
    scriptarguments:
      extend-context:
        simple: ExistingTags=tag.member
      ignore-outputs:
        simple: "true"
      rulename:
        complex:
          accessor: Name
          root: Panorama.SecurityPolicyMatch.Rules
          transformers:
          - operator: uniq
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Returns a list of predefined Security Rules. (When passing a query,
        all other arguments are overridden. Make sure the query includes all the filters
        you want).
      id: 53cbc73d-45f4-4031-8705-bba6f212d03b
      iscommand: true
      name: Get the tags of the existing rules
      script: '|||pan-os-list-rules'
      type: regular
      version: -1
    taskid: 53cbc73d-45f4-4031-8705-bba6f212d03b
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 960,
          "y": 1050
        }
      }
  "85":
    continueonerrortype: ""
    id: "85"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "73"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: c4bb7d78-0165-4937-8733-aacb637ae486
      iscommand: false
      name: Skipping reconfiguration
      type: title
      version: -1
    taskid: c4bb7d78-0165-4937-8733-aacb637ae486
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 1770,
          "y": 1500
        }
      }
  "86":
    continueonerrortype: ""
    id: "86"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "7"
    note: false
    quietmode: 0
    scriptarguments:
      behaviour:
        simple: add
      element_to_change:
        simple: tag
      element_value:
        simple: Sinkhole_Configured
      rulename:
        complex:
          root: RuleNamesAllowingDNS
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Edits a policy rule.
      id: 7866ac46-5e73-408c-8f92-64b737540b45
      iscommand: true
      name: Tag the rule to indicate that sinkhole is configured
      script: '|||pan-os-edit-rule'
      type: regular
      version: -1
    taskid: 7866ac46-5e73-408c-8f92-64b737540b45
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 670,
          "y": 5430
        }
      }
  "87":
    continueonerrortype: ""
    id: "87"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "88"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: 023c00b9-09ad-448e-84c8-240ecab776bc
      iscommand: false
      name: Tag To Indicate Sinkhole Is Configured
      type: title
      version: -1
    taskid: 023c00b9-09ad-448e-84c8-240ecab776bc
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 670,
          "y": 4530
        }
      }
  "88":
    continueonerrortype: ""
    id: "88"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "89"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Returns a list of tags from Panorama.
      id: bba23603-f89c-4fc6-883f-ac474f132334
      iscommand: true
      name: Get the existing tags
      script: '|||pan-os-list-tag'
      type: regular
      version: -1
    taskid: bba23603-f89c-4fc6-883f-ac474f132334
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 670,
          "y": 4670
        }
      }
  "89":
    conditions:
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                filters:
                - - left:
                      iscontext: true
                      value:
                        simple: Panorama.Tag.name
                    operator: isEqualString
                    right:
                      value:
                        simple: Sinkhole_Configured
                root: Panorama.Tag.name
          operator: isNotEmpty
      label: "Yes"
    continueonerrortype: ""
    id: "89"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#default#':
      - "90"
      "Yes":
      - "86"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Checks if a tag called Sinkhole_Configured exists.
      id: ff5f28db-69da-4599-88df-0b55c7b1036a
      iscommand: false
      name: Does the sinkhole tag exist?
      type: condition
      version: -1
    taskid: ff5f28db-69da-4599-88df-0b55c7b1036a
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 670,
          "y": 4850
        }
      }
  "90":
    continueonerrortype: ""
    id: "90"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "91"
    note: false
    quietmode: 0
    scriptarguments:
      comment:
        simple: A tag used by XSOAR to verify that sinkholing is configured in PAN-OS.
      name:
        simple: Sinkhole_Configured
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Creates a new tag in Panorama.
      id: 19e4183c-a903-471f-87d6-3c431e7b14c5
      iscommand: true
      name: Create a new tag to indicate sinkhole is configured
      script: '|||pan-os-create-tag'
      type: regular
      version: -1
    taskid: 19e4183c-a903-471f-87d6-3c431e7b14c5
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 1010,
          "y": 5050
        }
      }
  "91":
    continueonerrortype: ""
    id: "91"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "86"
    note: false
    quietmode: 0
    scriptarguments:
      polling:
        simple: "true"
      timeout:
        simple: "500"
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Commits a configuration to the Palo Alto firewall or Panorama,
        validates if a commit was successful if using polling="true" otherwise does
        not validate if the commit was successful. Committing to Panorama does not
        push the configuration to the firewalls. To push the configuration, run the
        panorama-push-to-device-group command.
      id: c6b49830-d9dc-417b-8b05-81aa052d7aaf
      iscommand: true
      name: Commit the new tag
      script: '|||pan-os-commit'
      type: regular
      version: -1
    taskid: c6b49830-d9dc-417b-8b05-81aa052d7aaf
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 1010,
          "y": 5230
        }
      }
version: -1
view: |-
  {
    "linkLabelsPosition": {
      "36_55_Yes, automatically": 0.4,
      "36_67_Yes, with approval": 0.46,
      "36_75_#default#": 0.31,
      "41_87_yes": 0.2,
      "46_50_Two Rules": 0.64,
      "46_54_One Rule For Both Servers": 0.5,
      "67_55_Yes": 0.5,
      "76_69_Yes": 0.61,
      "76_75_No": 0.56,
      "77_75_#default#": 0.11,
      "82_59_#default#": 0.52,
      "82_85_yes": 0.11
    },
    "paper": {
      "dimensions": {
        "height": 6045,
        "width": 3590,
        "x": -1440,
        "y": -60
      }
    }
  }
